URL reference: https://dev.to/krestomatio/introducing-lms-moodle-operator-251l
DateReviewed: 2024-05-01
Description: This article is about deploying Moodle on Kubernetes, so let's get started. The approach of our authors is to leverage an Operator, which they say works as a meta-operator to handle the entire stack, including Postgres, and other apps and even Moodle itself. They then try to sell us, explaining this gives us automatic deployment, meta-operator arch, full stack management and CRDs, with a sentence of explaination. We are then taken through the why of this approach, but honestly they still haven't explained why Operators are the way to go or anything about how they work by this point. They then explain how to get started, which is a quick three step hand wave at the process; to their credit, they do link to the docs which give a better runthrough. They then have a blurb for their managed service, where they run all of this for you. Ok, so my impression is one of disappointment -- I was interested in how Moodle can be married with K8s, and there isn't much here. If you were a Moodle person this means basically nothing, as they only mention Moodle in passing. Even as someone who has worked with K8s before, they don't explain why THIS is the way to run Moodle on K8s. It MIGT be a great way, but this article doesn't sell it like that.
BottomLine: Article on using Moodle on Kubernetes which isn't up to snuff
==
URL reference: https://medium.com/@setiadi.galih65/cloud-logging-on-kubernetes-engine-18627f206705
DateReviewed: 2024-05-02
Description: This article is going to talk about cloud logging, which is an interesting topic. They talk first about gathering all logs in one place, which is a good strategy. They are going to take us through a lab, using Terraform to deploy a log generating app so we can fiddle with cloud logs. Next, we have a diagram, and explain we'll use a K8s GKE cluster to generate logs which will be fed into stackdriver and then the cloud log we want to see. They set some configs, and then have the whole TF file - not in a small download box, but written out in full; it has comments, but no explaination. No CLI commands, just screenshots of TF running. We then visit a dashboard to confirm the cluster is running. We then visit the apps web page several times to generate log entries. We then take a peek at the web UI for viewing log entries. They talk about feeding logs into cloud storage and BigQuery for other analysis. So, I'm disappointed; the article is loose and sloppy - it handwaves at creation and ignores explaining what to do or why. It also seems to think logs are for debugging in the moment, and not for looking back -- it does cover long-term persistent storage, but more as a bonus then as a central theme.
BottomLine: Interesting topic of cloud logging but not well covered here
==
URL reference: https://swindonlink.com/news/kubernetes-security/
DateReviewed: 2024-05-03
Description: Kubernetes security is supposed to be part of the full lifecycle of an app, according to this article. Oddly, they claim the three phases are development, deployment and runtime? They mention malware and other risks in the opening too, so let's see what this is about. From that lofty height we drop right into node security, without any context, so okay. They do explain what nodes are and handwave for a paragraph about security updates, scans and pen tests, and using good auth. Next is API security, and they mention RBAC and review of server logs. Moving on, next is pod security, which they briefly explain before mentioning you must use a security context without explaining that. They also advocate for up to date images and other pod-focused security measures. We then move on to Data security, where they do mention encryption for data at rest and data in flight, backup and DR, and handwave at monitor and audit of data. After having a paragraph an area format, we pivot to a more loose format for what they call Enterprise security control, which is headings to things they covered earlier with different names. We move back to paragraphs under a section called common security threats, with subsections called pod to pod networking, config management, runtime risk, container image management, and lack of visibility. So, the title and the early bits felt promising, but the article starts as pablum and never really circles back to DevOps at all. I'd say it feels like they have all the ingredients here, but they lost the recipie so just smushed everything together.
BottomLine: Messy and shallow cover of Kubernetes security with no DevOps covered
==
URL reference: https://medium.com/@psakets/add-custom-headers-to-outgoing-request-from-applications-deployed-on-kubernetes-64d210c46bd9
DateReviewed: 2024-05-04
Description: We start with Kubernetes being the defacto place to deploy microservices, but no insight into why we'd inject custom headers, which is the focus of this article. We dive in with a walkthrough of how pods work, and how services leverage inter-pod comms to reach a service. We now do a walkthrough of service mesh, explaining a few of the things it does, and moving to use a specific one, in this case, Istio. We get an enhanced diagram showing how Istio handles straffic and how, in contrast to the pure service approach. We finally are at our payoff - header injection. We're told that Istio uses a component called Envoy, and this allows us to add filters to do things like logging, auth and even request modification, and can use multiple filters if needed. They explain we need a CRD to override a function, and the show us the YAML needed to get the override in place. The filter itself is a snip of Lua code, and is part of the YAML file. They also show us a longer function which is more complex and figures out if the target host is one of the ones we should be sending to. They then show how to add logging and then how to view the logs, to see what is going on. 
D
BottomLine: Short but interesting look at using service mesh to inject headers into Kubernetes services
==
