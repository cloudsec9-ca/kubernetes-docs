
URL reference: https://medium.com/@daniel.stefanelli.h/kubernetes-101-exposing-applications-services-load-balancers-and-ingress-f5e9b7f1212e
DateReviewed: 2025-10-01
Description: This article is the second part of a series - in the first part, they got an app working, and in this part they'll expose it to the Internet. We dive in by detailing the cluster network, where they explain all of the network paths. They go through different possibilities, including diagrams where helpful. We then talk about how K8s works and the way we can talk to different apps, with diagrams and the pros/cons. They summarize when you should use what, and then jump into a short hands-on part, to see how it all works.
BottomLine: Short article on Kubernetes net and ways to expose your app to the world
==
URL reference: https://www.linkedin.com/pulse/kernel-hardening-app-armor-seccomp-must-know-cks-exam-puru-tuladhar-li89f/
DateReviewed: 2025-10-02
Description: Our article today is about Kernel hardening with App Armor and how that applies to the CKS exam. We start with a bit of housekeeping, then a short acknowledgement that sys hardening is worth 10% on the exam, before jumping in. We start with what is Kernel hardening, where they explain securing the kernel to reduce vulns and mitigate attack risks. They look at two popular methods, App Armor and Seccomp. For each of them they explain the config process, and in the case of App Armor do a small walkthrough.
BottomLine: Basic intro to using Kernel hardening to increase Kubernetes security
==
URL reference: https://www.cncf.io/blog/2025/09/05/considerations-when-doing-ai-on-kubernetes/
DateReviewed: 2025-10-03
Description: This article talks about considerations around using AI on Kubernetes. Their approach is a bit odd, but they do cover a number of items. They start with an event driven infrastructure, talk a bit about serving LLMs in a cloud native env, dip ina bit on MLDevOps before tying things up. They do weave in a number of tech and various engines, to give a decent amount of coverage. Most of this is done point form, and it feels like there is a hefty pre-req to the piece.
BottomLine: Interesting piece on what to focus on with AI in Kubernetes
==
URL reference: https://medium.com/@mughal.asim/kubernetes-security-contexts-series-part-2-creating-a-non-privileged-pod-9b42aaf5115b
DateReviewed: 2025-10-04
Description: The article we're looking at today is about creating non-privileged pods. We start with a bit of background, where they note that this is then second post in a series. We jump in with an examination of what a non-privileged pod - basically disallowing things that require any elevated capabilities. They explain why this is helpful - a breach would leave an attacker not much to do. Next we examine a YAML snip specifying a non-priv container, with a breakdown of what the commands are and how they work. We then are shown how to deploy the pod and finally how to verify that capabilities are not available. They even try something that shouldn't be allowed - using SU and installing packages. Interesting article.
BottomLine: Short article on deploying non-privileged pods on Kubernetes
==
URL reference: https://medium.com/@mughal.asim/kubernetes-security-contexts-series-part-1-the-default-behavior-2debd0c0af63
DateReviewed: 2025-10-05
Description: Our article today is a companion to yesterday's part 2, but in this case it's part 1 - Security contexts in pods - what happens by default. We start by explaining that the defaults are basically as the underlying OS is baked. We start with what happens by default - that the container runs as root with UID and GID being 0. File ownership is also as root, and a bunch of varied perms are enabled, allowing almost anything to be done. We then look at a YAML file, and see how this works in practice. We deploy the pod and look at process ownership, to find it's root:root. We check general perms and see a wide array of abilities on tap. Lastly, we verify the volume ownership. They go through a few scenarios of what this means in a breach, to punctuate what deploying a default container allows. 
BottomLine: Short piece on what pod defaults enable security wise on Kubernetes
==
URL reference: https://blog.abhimanyu-saharan.com/posts/kubernetes-v1-33-fixes-a-10-year-old-image-pull-loophole
DateReviewed: 2025-10-06
Description: This article talks about a strange security issue - allowing pods to use previously pulled private images, even if that pod lacked permissions to do so. After a bit of background, we dive into the problem - a pulled and cached image doesn't invoke the permissions checks, allowing a non-authed pod to use a private pod. The fix is to do this auth, even if using a cached version of an image. They describe the various possible flags and results, and explain that v1.33 enables this fix. You still have to explicitly enable it, but if you do you can test it out. Now, this is a very specific security issue, and typical deployments don't have to worry about this, but some do.
BottomLine: Interesting security issue and the fix for Kubernetes
==
