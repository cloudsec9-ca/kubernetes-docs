
URL reference: https://medium.com/@daniel.stefanelli.h/kubernetes-101-exposing-applications-services-load-balancers-and-ingress-f5e9b7f1212e
DateReviewed: 2025-10-01
Description: This article is the second part of a series - in the first part, they got an app working, and in this part they'll expose it to the Internet. We dive in by detailing the cluster network, where they explain all of the network paths. They go through different possibilities, including diagrams where helpful. We then talk about how K8s works and the way we can talk to different apps, with diagrams and the pros/cons. They summarize when you should use what, and then jump into a short hands-on part, to see how it all works.
BottomLine: Short article on Kubernetes net and ways to expose your app to the world
==
URL reference: https://www.linkedin.com/pulse/kernel-hardening-app-armor-seccomp-must-know-cks-exam-puru-tuladhar-li89f/
DateReviewed: 2025-10-02
Description: Our article today is about Kernel hardening with App Armor and how that applies to the CKS exam. We start with a bit of housekeeping, then a short acknowledgement that sys hardening is worth 10% on the exam, before jumping in. We start with what is Kernel hardening, where they explain securing the kernel to reduce vulns and mitigate attack risks. They look at two popular methods, App Armor and Seccomp. For each of them they explain the config process, and in the case of App Armor do a small walkthrough.
BottomLine: Basic intro to using Kernel hardening to increase Kubernetes security
==
URL reference: https://www.cncf.io/blog/2025/09/05/considerations-when-doing-ai-on-kubernetes/
DateReviewed: 2025-10-03
Description: This article talks about considerations around using AI on Kubernetes. Their approach is a bit odd, but they do cover a number of items. They start with an event driven infrastructure, talk a bit about serving LLMs in a cloud native env, dip ina bit on MLDevOps before tying things up. They do weave in a number of tech and various engines, to give a decent amount of coverage. Most of this is done point form, and it feels like there is a hefty pre-req to the piece.
BottomLine: Interesting piece on what to focus on with AI in Kubernetes
==
URL reference: https://medium.com/@mughal.asim/kubernetes-security-contexts-series-part-2-creating-a-non-privileged-pod-9b42aaf5115b
DateReviewed: 2025-10-04
Description: The article we're looking at today is about creating non-privileged pods. We start with a bit of background, where they note that this is then second post in a series. We jump in with an examination of what a non-privileged pod - basically disallowing things that require any elevated capabilities. They explain why this is helpful - a breach would leave an attacker not much to do. Next we examine a YAML snip specifying a non-priv container, with a breakdown of what the commands are and how they work. We then are shown how to deploy the pod and finally how to verify that capabilities are not available. They even try something that shouldn't be allowed - using SU and installing packages. Interesting article.
BottomLine: Short article on deploying non-privileged pods on Kubernetes
==
URL reference: https://medium.com/@mughal.asim/kubernetes-security-contexts-series-part-1-the-default-behavior-2debd0c0af63
DateReviewed: 2025-10-05
Description: Our article today is a companion to yesterday's part 2, but in this case it's part 1 - Security contexts in pods - what happens by default. We start by explaining that the defaults are basically as the underlying OS is baked. We start with what happens by default - that the container runs as root with UID and GID being 0. File ownership is also as root, and a bunch of varied perms are enabled, allowing almost anything to be done. We then look at a YAML file, and see how this works in practice. We deploy the pod and look at process ownership, to find it's root:root. We check general perms and see a wide array of abilities on tap. Lastly, we verify the volume ownership. They go through a few scenarios of what this means in a breach, to punctuate what deploying a default container allows. 
BottomLine: Short piece on what pod defaults enable security wise on Kubernetes
==
URL reference: https://blog.abhimanyu-saharan.com/posts/kubernetes-v1-33-fixes-a-10-year-old-image-pull-loophole
DateReviewed: 2025-10-06
Description: This article talks about a strange security issue - allowing pods to use previously pulled private images, even if that pod lacked permissions to do so. After a bit of background, we dive into the problem - a pulled and cached image doesn't invoke the permissions checks, allowing a non-authed pod to use a private pod. The fix is to do this auth, even if using a cached version of an image. They describe the various possible flags and results, and explain that v1.33 enables this fix. You still have to explicitly enable it, but if you do you can test it out. Now, this is a very specific security issue, and typical deployments don't have to worry about this, but some do.
BottomLine: Interesting security issue and the fix for Kubernetes
==
URL reference: https://gravitycomputers.lll-ll.com/?i=5028539&li=28852204
DateReviewed: 2025-10-07
Description: The article we look at today is an overview of the Azure Kubernetes Service (AKS). We start with a bit of background, explaining that it is a managed service and how that benefits people wanting to use K8s. Next is an overview of AKS, and as I always like they bring out a diagram of how things work. They show how K8s is exposed with an API endpoint to access the managed control plane, which then uses a private tunnel to fire up Nodes and Pods as Customer VMs. They then talk about some of the various offerings, which all have different goals and details. Next up is when to use AKS, and they have a laundry list of possible use cases - seven in all, with a sentence or two of explaination. Next up is a table with the various features of AKS, basically describing the important bits around K8s, like identity mgmt, logging, clusters and nodes and storage vol support among others. There are 7 features in all and they make 2-4 points on each feature in the table. To finish up, they link to a number of docs and ways to get your hands dirty. 
BottomLine: A good overall intro to Azure Kubernetes Service - AKS
==
URL reference: https://devopsoasis.blog/seven-surprisingly-costly-kubernetes-mistakes-we-finally-fixed/
DateReviewed: 2025-10-08
Description: Our article today is about seven things you can do wrong with Kubernetes, and how to avoid that. No background here, we jump right into the first issue - they advise starting with SLO or service level objectives and not abstractions. They spend a long para on this, and it makes sense. Next is using things like Namespaces, guardrails and RBAC to constrain what can be done on various pods. They even give a sample YAML. Next is right-sizing pods with Requests, Limits and HPA if needed, to keep things on track. Moving on we dive into networking with DNS, CNI and policies. Next they look into Storage and stateful behavior. We look at PDBs, drains and spreads to enhance resilience. For deployments, we dip into secrets, rollouts and drift. To wrap things up, they look at autoscaling and spot instances to make your bills happier. A great walkthrough of good techniques.
BottomLine: Great look at challenges and how to address them in Kubernetes
==
URL reference: https://medium.com/@earayu/install-postgresql-on-kubernetes-with-kubeblocks-86667cafcde7
DateReviewed: 2025-10-09
Description: The article today is about managing databases on Kubernetes. The author thinks its best to use a package called KubeBlocks to do so. The ides of KubeBlocks is to provide an API to any DB, simplifying things on theh programming side. This article is a walkthrough, so we'll get our hands dirty. We start with installing the KubeBlocks CLI, and then adding the bits needed for Kubernetes, specifically the accompanying CRD. We then add the KubeBlocks Helm repo and install from Helm. At this point, we then verify things are up. Next, we create a PostgreSQL database with one line and a bit of patience. We then verify our cluster is up and running. One more quick command and we're logged into Postgres where we can create, insert and retrieve data. We get a few more points about the benefits of KubeBlocks, and we're done.
BottomLine: Walkthrough of setting up KubeBlocks install
==
URL reference: https://www.infoq.com/news/2025/09/kubernetes-1-34/
DateReviewed: 2025-10-10
Description: Our article today is about some new features in Kubernetes v1.34, paticularly KYAML and in cluster traffic improvements. They talk about a half dozen enhancements, with a sentence or two on each - the net traffic one talks about tuning how traffic gets to a service point. An alpha feature is the Kubernetes streamlined YAML (KYAML) aimed at improving readability and maintainability. An interesting read.
BottomLine: Discussion about new features for Kubernetes v1.34
==
URL reference: https://go.veeam.com/securing-cloud-native-applications-on-kubernete
DateReviewed: 2025-10-11
Description: The article today is about deploying a couple spring boot projects as microservices. While the author gives links, it would be nice to give a short summary of what they do. He goes through building a Docker image, with binary build, create dockerfile, build image with dockerfile, and upload image to repository. We then repeat this process for the second image. We then create dev and QA namespaces, with instructions on the YAML and CLI commands to do so, and then run them and verify the namespace is created. We do this again for the QA namespace. We are shown how to delete the namespaces for future reference. We then create a deployment YAML for both apps, with all the bits we need and specify the dev namespace to deploy to. We then create the service, and run the CLI command to stand everything up, before verifying it is all running. We then repeat this process for the QA namespace, ostensibly to test. I think it is good to cover this, but would like a bit more info on the interaction between apps or what issues we might run into with microservices.
BottomLine: Decent article explaining end to end how to build a microservice on Kubernetes
==
URL reference: https://blog.abhimanyu-saharan.com/posts/fine-grained-control-with-configurable-hpa-tolerance
DateReviewed: 2025-10-12
Description: Our article today talks about tolerances, specifically around the horizontal pod autoscalar (HPA) which is now configurable but was previously fixed at 10%. After a short backgrounder, we dive in - what is the issue with one size fits all tolerance? For scaling, we use a metric (like CPU usage) to estimate usage, taking the overall ratio and comparing it to replica count. The issue is that no scaling occurs within the tolerance, and it means a lag in response until the tolerance is exceeded and isn't as tight in huge replica deployments. For v1.33, you can adjust the tolerance per HPA, allowing finer control. The control also allows different scale up & down tolerances, allowing you to tweak how fast the scaling down happens. Our article has some YAML snips to help configure it, explain how it works under the hood, and shows how to enable it in Kubernetes. It's also backwards compatible -- without the field, the old cluster-wide default is applied, and the config bits are ignored if not enabled in K8s. They throw in some FAQs at the end.
BottomLine: Good exploration of the new HPA tolerance feature on Kubernetes
==
URL reference: https://www.fairwinds.com/blog/how-to-create-view-and-destroy-a-pod-in-kubernetes
DateReviewed: 2025-10-13
Description: This article talks about creating, viewing and destroying pods in Kubernetes. We start with a bit of background, where we find out this is part of a series, and they explain a bit about how pods fit into the K8s infra. We dive in with a look at Pod network and storage, and explain a bit about how things are set up and work. We then move on to Kubernetes deployments, where they explain how they work at a high level and give a link to actually doing one. They show us how to create a cluster (in GKE), and then how to run an image from the CLI. They then walk us through how to view pods, and what you will see when you do. Finally they take us through deleting or destroying a pod, so you can get rid of resource usage you no longer need. They move on to things like pod policy and security, with YAML snips this time. They also look at various probes, things like monitoring, labels and auditing and other security best practices. Decent look through.
BottomLine: High level walkthrough of creating and destroying a Pod in Kubernetes
==
URL reference: https://www.helpnetsecurity.com/2025/09/22/report-kubernetes-ai-gitops-trends/
DateReviewed: 2025-10-14
Description: Today's article talkls about AI and GitOps, and starts with a bit of background, assuring us Kubernetes is out of its early adoption phase. The claim here is that the real challenge isn't architectural matters, but rather operational ones. They proffer a study that shows AI/ML is becoming a core workload, denoting a shift in emphasis from traditional app workloads. They note that it helps to manage GPU heavy workloads, which is where things are moving to. They also talk about resource underuse, and how things such as K8s native GPU operators can assists. They then talk about GitOps, mentioning tools such as ArgoCD and Flux to help manage resources. They touch a bit on namespaces, but do mention some teams use different clusters for isolation. Finally, they talk a bit about complexity and how that can be helped with good platform engineering. By building a solid env for developers, you are laying a solid groundwork.
BottomLine: Decent article touching on AI and using GitOps to manage Kubernetes
==
URL reference: https://github.com/mysql/mysql-operator
DateReviewed: 2025-10-15
Description: This repo is the official MySQL operator for Kubernetes. The repo mentions it is a full lifecycle manager, with set up and maintenance including auto upgrades and backup. The repo shows how to download and set up the operator, as well as how to create a DB cluster with a root user to allow you to create databases and users generally. They also show how to connect to the MySQL shell and do port forwarding from the standard port to a specific node (for testing).
BottomLine: Walkthrough on setting up the offical MySQL operator for Kubernetes
==
URL reference: https://go.veeam.com/kubernetes-enterprise-trends
DateReviewed: 2025-10-16
Description: So our article today is actually a blurb and a download form about something interesting but with not much of a hook to get things going. They are talking about enterprise trends for Kubernetes, and they say that enterprise are no longer simply asking about K8s but actually running it at scale. I'd think they could have at least included some highlights or snips from it, but naw.
BottomLine: Just a signup for a report - skip
==
URL reference: https://www.linkedin.com/pulse/kubernetes-node-maintenance-security-patching-zero-pdg1f
DateReviewed: 2025-10-17
Description: Today's article is more of a collection of point form bits of info, but it does a decent job of explaining the steps required to do an upgrade. They start with some background in general, and then explain the setup - a Kubernetes cluster with a critical vuln and immediate patching needed. They explain the stack we are dealing with, and the fact that this has to be done w/o downtime. They start by doing a bunch of checklist/prep items, then picking some nodes and isolating them out of the cluster. They then SSH in, apply patches to the node and update the containers, and restart kubelet. They then bring the nodes back out of isolation and into the cluster. They then validate they are working as expected, and also add the documentation to a central spot. 
BottomLine: Good walkthrough of a security upgrade without downtime on Kubernetes
==
URL reference: https://kubernetes.io/blog/2025/09/15/kubernetes-v1-34-decoupled-taint-manager-is-now-stable/
DateReviewed: 2025-10-18
Description: Our article today is about the latest Kubernetes having the decoupled taint manager as stable. Basically they explain that previously the node lifecycle controller handled both marking nodes as unhealthy and evicting pods from them, whereas now there is a dedicated taint manager that controls the eviction process. This allows finer controls and better code organisation, as well as allowing custom implementations.
BottomLine: Update to stable of the decoupled taint manager in Kubernetes
==
URL reference: https://cloud.google.com/blog/products/containers-kubernetes/2025-gartner-magic-quadrant-for-container-management-leader
DateReviewed: 2025-10-19
Description: This article is a bit of a victory lap for Google - where they are announcing that they are a "leader" in the Gartner magic quadrant for a third year in a row. They do pay homage to GKE, which is their main motivator for the win, but also talk about all workloads in general, before toe dipping into GKE being an AI ready platform and talkign a bit about Cloud Run.
BottomLine: Celebration of Google being a leader for Kubernetes as per Gartner
==
URL reference: https://jurgenallewijn.nl/azure-kubernetes-security-demystified-from-nodes-to-pods-6339210fcad5
DateReviewed: 2025-10-20
Description: The article today will focus on Kubernetes security as it applies to Azure. We start with a bit of an intro, with a bit on AKS before talking about Kubernetes and the various layers it has, explaining that combined they make up a defense in depth. They explain that worker nodes are just ordinary VMs, and that it is our responsibility to keep these up to date. There are some tools to help manage this in AKS. They talk a bit about encryption at rest and how this is critical, and what you need to do to enable this in AKS. There is three areas they divide things into - Host, Cluster, and finally Pod security, each with their own supporting pieces. We then jump into a long section on Cluster security, with some YAML examples and diagrams for effect. Next up is Pod security, with some YAML and diagrams as well, with a bit less text. to tie everything up, they have a section on Security as a continuous process. Very decent article.
BottomLine: Introduction to Kubernetes security on Azure Kubernetes Service (AKS)
==
URL reference: https://levelup.gitconnected.com/kubernetes-security-best-practices-to-protect-your-cluster-7c1a2efca0fe
DateReviewed: 2025-10-21
Description: Today we have an adapted article on 12 Kubernetes security best practices. We start with a short background bit, before diving in. The approach here is to name the practice, then talk shortly about it, and then to explain how to (or not to) do things, often with a snip of YAML to clarify. We go through using non-root containers, priv containers, not using hostPath vols, not using hostPort, not sharing host namespace, as well as a half dozen more. Many of these are not typical recommendations, and they are quite well done. They finish up with an a Kubernetes action plan.
BottomLine: Well done and diverse Kubernetes security best practice approach
==
URL reference: https://dev.to/aws-builders/introducing-the-aws-eks-best-practices-mindmap-30lc
DateReviewed: 2025-10-22
Description: What we're looking at today is an article that explains a mindmap. I'm a big fan of alternative approaches to presenting info, and a mind map is a great variation. They present the visual mindmap, and then have 8 sections with  3 to 4 points explaining what is going on and how this works. Very interesting.
BottomLine: This is a mind map of EKS best practices and is a great alternate approach
==
URL reference: https://devtron.ai/blog/beyond-adoption-what-it-takes-to-scale-kubernetes/
DateReviewed: 2025-10-23
Description: This article will talk about what it takes to scale Kubernetes. After a bit of general background on K8s uptake, they get into the issue - scaling K8s. They talk about the scaling paradox, where success cretes problems. They heavily recommend automation to help with this. They also try a new approach on how to scale. They have three general headings - making Governance useful, where automation pays off, and using AI where humans can't keep up. Each of these has a number of paras, and some solid points and expansion on things. To wrap things, they do a small pitch for their tools at Devtron.
BottomLine: Good look at the problems around scaling Kubernetes
==
URL reference: https://www.cncf.io/blog/2025/09/19/top-kubernetes-k8s-troubleshooting-techniques-part-2/
DateReviewed: 2025-10-24
Description: Our article today is going to talk about Kubernetes troubleshooting. It doesn't talk about general stuff, but rather focuses on a few rough spots to provide insight. I'll also mention this is part of a series, and isn't the first part, so some of that stuff might be elsewhere. They start numbering at 7, but actually cover 4 different scenarios. The first bit is surrounding storage, specifically PVC pending errors. Next they dive into events and audit logs for analysis, before moving on to K8s dashboards and visual tools. They look at implementing health checks and probes, before finally going over some advanced troubleshooting. Each scenario is quite detailed, with CLI and YAML and a bunch of paras for each. Worth a read.
BottomLine: Article touching on a number of specific troubleshooting approaches for Kubernetes
==
URL reference: https://www.akamai.com/blog/cloud/ten-evaluation-points-app-platform-kubernetes
DateReviewed: 2025-10-25
Description: Today we'll look at an article that looks at 10 points to help you choose or build up a developer app platform. They start with a bit of background, then they lay out the 10 points - address teamwork, adopt automation, include security early, invest in good observability, provide common data services, simplifies networking, integration with dev tools, artifact management, apply config as code, and finally control costs. These are given a one line treatment to clarify upfront, and then a 2 to 4 para description in the body. They then show how this is applied, in their own tool (App Platform). We get a diagram, and they do some various description of the points and how they leverage that in their tool. Good article.
BottomLine: Covers the bases of what you should look for with a dev platform for Kubernetes
==
