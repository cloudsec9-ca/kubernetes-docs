URL reference: https://dev.to/cicube/how-to-use-kubectl-exec-command-3e4n
DateReviewed: 2024-04-01
Description: While containers are a great tool, sometimes we want to interact with the app or env in the container, to understand what is going on, because logs aren't always telling the whole story. Often being able to run a command or a shell helps, and Kubernetes does have that ability, which this article explores.  First they quickly explain what k8s exec is, and go through some of the top features, before showing the syntax usage. It's part of kubectl, and you have to supply the target pod name and the command you want to run. They do a bit of a walk through, so they create some pods and wait for them to come ready. First up they show the very useful interactive shell, where you can interact like being logged into the pod. Next, they show some one-off commands, which are run in the context of the pod to allow you to see what is going on. They run the date command, and then perplexingly an update command -- odd because best practice dictates your containers should be immutable. They then show getting the env and setting an env variable, as well as running as a specific user. A use I haven't seen before is forwarding a pod port to your local machine. They also show how to access a second container in the same pod. They then have a few paragraphs on access restrictions and ensuring things are done in a secure manner.
BottomLine: Good intro to Kubernetes exec and some of its capabilities
==
URL reference: https://blog.devgenius.io/mastering-nginx-deployment-on-kubernetes-e96005152d8a
DateReviewed: 2024-04-02
Description: We start with praise for K8s and then the author mentions how Nginx is often used as a web server on K8s. This article is going to go through a few ways to get that working. We start by actually invoking a specific image on a pod first, and then he shows how to use YAML to spin it up as well. I like this, as it shows both imperative and declaritive approaches to resource deployment. He then walks through the deprecated ReplicationController and ReplicaSet methods, to show ways to create multiple copies of a containers. He then walks through both a Deployment and a StatefulSet, with a very brief explanation of what they are and shows the YAML and command do run them. His last two are DaemonSets and Helm, again with walkthroughs. I find it's pretty good, although I wish he would have added a bit to the how and why to use different methods.
BottomLine: Walk through on various ways of running Nginx on Kubernetes
==
URL reference: https://overcast.blog/13-kubernetes-tricks-you-didnt-know-647de6364472
DateReviewed: 2024-04-03
Description: This article will reveal 13 interesting ways to get things done in Kubernetes. Each trick has a paragraph of explaination, an example usage, and a when to use and what to be careful of when using the trick. First up is a hook that signals apps to clean up when a graceful shutdown is initiated. Next up is automated secret rotation, which allows K8s to securely update things like passwords; caveat is your app has to actually ask K8s for the secret regularly. They look at ephemeral pods for debugging, which is a cool technique. Another trick is pod scaling based on a custom metric, rather than just CPU or memory. They mention Init containers for setup, which is a great tactic. They go into node affinity and taints and tolerations, which allow control over which nodes pods are or aren't scheduled to. They dive into Pod priority and preemption, which allows some pods to take precedence over other pods by evicting them if needed. They talk about ConfigMaps and secrets to control app behavior. A cool new trick is the debug pod -- where you copy your running pod to a new image, which has additional tools your production images don't need to include. They look into requests and limits to manage resources, extending Kubernetes with CRDs, and finally using the K8s API for automation and dynamic interaction. This is almost too much info, but it is concise, well presented and a great resource.
BottomLine: Thirteen awesome tricks to make your Kubernetes journey easier
==
URL reference: https://coruzant.com/tech/the-evolution-and-importance-of-saas-application-security/
DateReviewed: 2024-04-04
Description: So, SaaS or Software as a Service is something that is important, but apparently it, like Kubernetes, is not as secure as it should be, and this article will tackle that. We start with some odd framing tracing the origins back to the '60s, before leaping ahead to the 2000s. What's not made clear is if we are focused on SaaS from a provider or comsumer point of view. We go on to enumerate the key security features, which include Authentication and authorization, encryption, access controls, monitoring and compliance. After a paragraph outlining each feature, we're treated to anoter paragraph on how they help secure stuff. There is a pitch in the final paragraph, but I'm still wondering WHAT we are talking about. It's an interesting topic, but done I'd argue poorly here.
BottomLine: Decent topic of SaaS app security done with a poor treatment
==
URL reference: https://github.com/teyhouse/CVE-2024-3094
DateReviewed: 2024-04-05
Description: This repo is a tool to test for vulnerable versions of xz. The xz utility is compression software, for packing files together for archives generally. The tool was subverted and a backdoor was added in the 5.6.0 version, which is what this software is tracking. The repo includes a bunch of article links which explain the vulnerability, and even sample scripts for other tools. This tool is meant to be a quick check to see if there is an issue. This repo and tool is a great example of the Open Source approach to security.
BottomLine: Repo with a tool to test for the recent xz backdoor vulnerability in Kubernetes pods
==
URL reference: https://loft.sh/blog/kubernetes-maintenance-what-it-is-and-how-to-do-it/
DateReviewed: 2024-04-06
Description: We start with K8s is a great orchestration platform, but it requires maint to work well. So this article will cover that. They argue that life cycle management is a key, and standardizing is a good way to work towards that goal. Challenges to standardization include diverse infra, various stakeholders and a rapidly evolving ecosystem. To help achieve standardization, using things like IaC, GitOps, Kubernetes operators and continuous monitoring are key. We next move onto Governance and compliance, and they argue that these help manage your cluster. They list various compliance standards which can be guides, and point out things, like mutli-tenancy and integration as issues that can come up. To help achive compliance, they mention tools like RBAC and policy as code among others. We move next to K8s extensibility, and how that can both help and hinder our efforts. They mention focusing on security, using a service mesh and an appropriate K8s distro. We then get a bit in the weeds, in a discussion about adding and draining nodes. The mention it first in terms of scaling, but then also for maint/repair/replacement of hardware. They go through a step by step process on draining, albeit at a high level. And out of nowhere, we go into a tangent on self service K8s. They talk about it, but not really tying it into their bigger picture. So, it feels like this post was an aggregate of other posts -- the points are decent, but near the end they wander all over.
BottomLine: Interesting premise and good start but fails to really deliver on how and why we should do Kubernetes maintenance
==
URL reference: https://overcast.blog/kubernetes-garbage-collection-a-practical-guide-22a5c7125257
DateReviewed: 2024-04-07
Description: For long running processes, keeping things clean is important, and this article looks into the K8s garbage collections approaches. We start with a brief overview of what GC is, and then dive into the types, of which there are three. First up we look at Container image GC, which are nodes cleaning up images which had run but are no longer used by a pod, and this is done periodically. The second kind is when pods are evicted, freeing up their referring objects. As opposed to the first type which focuses on disused image disk space, this might include IP addresses and general volumes. Lastly is orphaned resource GC, which are resources that were in use but no longer have any active owner. Now that this is explained, we're going to go through a short tutorial to enable GC on our Kubernetes clusters. So, we start with container images, and they walk through config adjustments (how full it is triggered, and the target we want to get to) and then the CLI commands to make it take effect. Next up they craft a K8s cronjob in YAML which runs every 6 hours to tidy up evicted pods, and show the CLI to apply. For orphaned resources, they suggest ensuring all resources are tied to owners, and also using finalizers to clean up any resources. They also show how to set up general resource limits and monitors to make sure things are being used as intended. Then then have six Garbage Collection best practices, where they go through a practice with a few paragraphs to explain at a high level what to do. Overall a solid article.
BottomLine: Great walkthrough of Kubernetes Garbage collection
==
URL reference: https://blog.opstree.com/2024/04/04/unveiling-cloud-vulnerabilities-top-3-security-concerns/
DateReviewed: 2024-04-07
Description: Cloud computing good we start, but security is not as solid. The have three broad areas to look at, so let's follow along. First up is Data breaches and unauthorized access, which apparently draw a contrast with non-cloud services by being probed "everywhere". This can be mitigated by strong ID methods (which I think are things like MFA, but they never actually say that) and data encryption. Next up is compliance, because if you comply with an alphabet soup of standards you are bound to be secure (not). Finally we deal with APTs, which are scary actors using complex techniques like advanced malware and social engineering. The solution to this, of course, is AI-powered threat detection. Okay, so I have issues -- while the TITLE of this piece refers to THREE concerns (there is a graphic that says that too), the 2nd paragraph talks about FIVE major challenges, which I think they group into 3 areas, but never say that. They handwave most of the "threats", and don't really link things together that well. I'm frustrated because this is a good premise and could have easily been a solid article, but this one just isn't.
BottomLine: Avoidable piece on a number of cloud security concerns
==
URL reference: https://medium.com/@victorrodriguez1984/unauthenticated-kubernetes-apps-never-again-03c24bd01637
DateReviewed: 2024-04-08
Description: It seems that humans are the weak link, so we should make things easier for security. This article will look at user facing security, and it feels like we'll build something reusable among a number of apps. We start wih a diagram and a few bullet points, laying out the overall approach. They explain the approach in more detail next, with some YAML and brief high level guidance and a chart of providers that Dex supports. They even provide a snippet on how to configure a sidecar which does the auth pieces. It ends with a list of additional steps to fully secure the auth pieces. I think this is an excellent topic, and the presentation is decent but is a bit light and I think would lose some of the more beginner users who could most benefit from this.
BottomLine: Interesting topic of using Auth to secure Kubernetes is a decent treatment but misses those starting out
==
URL reference: https://medium.com/@visrow/kubernetes-management-with-ai-using-tools4ai-1280c6dabde0
DateReviewed: 2024-04-09
Description: Kubernetes is good for orchestrating, but API details can be daunting. This article will show how to get help with K8s APIs using a the Tools4AI project. We start with a quick overview of what Tools4AI is - an LLM to help with cluster managment. So it seems you do a bit of initial config, then Tools4AI dynamically probes your cluster and tells you what can be done. With a snip of JSON, they show us how the initial config needs to be set up. The idea here is to be able to use natural language to initiate actions against the K8s API. They then go through a few samples of requests to the K8s API. They explain again how this makes the K8s API more accessible. Next they explain that more complex scenarios are possible, and then walk through how to ask for them to be initiated and what the tool does to accomplish them. So, this is a great tool and topic, but the walk through almost seems written by AI; the examples don't feel complete and the descriptions of the first few scenarios are almost non-existent. I'd like to get a bit more confidence in how to ask for things and how it works before using it on anything serious.
BottomLine: Interesting tool but the tour is a bit lacking
==
URL reference: https://gigahertzconsultants.com/resources/blogs/hardening-kubernetes-security-with-hardened-images
DateReviewed: 2024-04-10
Description: Starts with Kubernetes good, security not so good -- who knew? The solution though, per this article, is hardened container images. They dive in with a section on why hardened images, and it's actually quite good - they go through 4 principles which are basically eliminate things you don't need and use least privs, with a bit more explaination. They then go through how your K8s cluster benefits with 4 points, which leverage the goodness coming out of less attack surface. They title the next section oddly, but it boils down to "select good base images" and "keep updated". Sadly we end there with a conclusion, where I'd like for them to have done a bit of low level stuff -- but it's a good approach.
BottomLine: Interesting approach using hardened images to improve Kubernetes cluster security
==
URL reference: https://blog.devops.dev/kubernetes-ingress-how-to-use-an-ingress-controller-with-your-kubernetes-applications-359dffd465f8
DateReviewed: 2024-04-11
Description: This article will talk about Kubernetes inbound traffic facilitator, Ingress. We start strong, with them explaining the issues prior to Ingress and how they impacted traffic, including things like lack of good load balancing and TLS issues. They explain that Ingress allows path-based routing, and in fact you can route traffic to different services for different routes. They explain how a typical virtual host based setup would work, and then show how this would be set up with Ingress in Kubernetes. They then pivot to a walkthrough, to show us how to set things up. They go through an explaination, and then show a YAML snip of how Ingress is set up with a path. They explain the need for a controller and how it works, and then test it out. A pretty decent coverage of the Ingress topic.
BottomLine: High level overview coupled with a walkthrough of Ingress on Kubernetes
==
URL reference: https://opcito.com/blogs/kubernetes-security-challenges-and-solutions
DateReviewed: 2024-04-12
Description: Start with Kubernetes is great, but you know ... security concerns. And this article will tackle them, so let's get into it. After a bit of a handwave on how you might be a victim of weak security, they get to the issues. They deal with seven, and each starts with a concern and then they spend a paragraph on each filling in the issue. It's a solid lineup of concerns, with vulnerable images, API issues, misconfiguration of all kinds touched on. They then have a matching list where they peel off all seven concerns, and explain techniques at a high level to mitigate them all. At the end there is an ad blurb. Honestly, it's solid but not exciting; but I had the idea that instead of loading all the bad stuff upfront and spitting out all the solutions, it would be nice once for them to do a security problem/security solution combo once.
BottomLine: Solid high level treatment of usual issues with Kubernetes and suggested mitigations
==
URL reference: https://thenewstack.io/enhancing-kubernetes-network-security-with-microsegmentation/
DateReviewed: 2024-04-13
Description: We start by diving right in - microsegmentation divides networks into smaller and easier to manage and secure segments. Next, they go through how microsegmentation helps in three headings, with a paragraph or so underneath. First is scalability and flexibility, which was a bit handwavy; then they touched on prevention of lateral movement, or hopping from one machine to another if there is a compromise, and finally they tout namespace isolation. They then dive into the how, in this case through security domains with a nice diagram, where each domain is encapsulated and all traffic is subject to a network policy as it crosses the domain edge. They then go through seven areas with a paragraph on each to increase traction for this, while throwing a few diagrams in to help illustrate. They then do a quick benefits and impact before going through their conclusion. The article includes a link to a workshop you can try it out with.
BottomLine: Good high level motivation for using microsegmentation with Kubernetes
==
URL reference: https://medium.com/@bhushannemade2001/gitops-e03e155a3955
DateReviewed: 2024-04-14
Description: This article will talk about a Cloud Native approach, namely GitOps. We start with the traditional approach to building with CI/CD - bespoke scripts. They argue there are lots of manual bits and it's hard to revert. We are then introduced to GitOps, which are declarative, versioned, pulled automatically and reconciled continuously, which they explain in a couple sentences for each. They explain we end up with a single source of truth in Git, and we eliminate the need to manage things manually. They then go through some examples showing how and where GitOps simplifies and adds a safety net to your building process. Finally, the piece finishes with some video resources that will help get started.
BottomLine: Good high-level introduction to GitOps for Cloud Native and Kubernetes enviroments
==
URL reference: https://medium.com/@masskeran261220mk/using-microservice-run-a-voting-application-47f1bfc8e3f9
DateReviewed: 2024-04-15
Description: So, this article isn't a perfect app, but rather a broad example of types of tech you might see on Docker. The author links to a Git repo, and has a list of the target tech (front end python app, Redis, .NET worker, PostgreSQL db and a Node.js app to display results) and a helpful diagram without labels. They then walk through how to run on various platforms, and how to access. And, that is it. So, strong start but really no walkthrough -- so how does this demonstrate anything? If you aren't handy in containers how would you be able to tinker?
BottomLine: A container app article that doesn't explain anything - likely skip
==
URL reference: https://cloudnativenow.com/features/ai-emerges-as-next-major-kubernetes-challenge/
DateReviewed: 2024-04-16
Description: The author poses that AI is the next "challenge" that Kubernetes has to tackle. It seems you need lots of skilled software engs to build and run AI platforms -- who knew? The piece seems to touch base with people at various big tech companies, but fails to articulate exactly what the challenges might be. One says, for instance, that you should use DevOps principles on AI apps - which might make sense, but is that the hardest issue emerging? Later on, another person mentions that AI teams have extended K8s, but these need to be built into the standard -- without saying what is missing. And, that is the piece. While it is a wide survey, it misses in actually articulating a solid point.
BottomLine: No challenge is identified for Kubernetes to challenge in this piece
==
