
URL reference: https://www.macchaffee.com/blog/2024/you-have-built-a-kubernetes/
DateReviewed: 2025-09-01
Description: Our article today is a humorous take on you have built a compiler, where we poke fun at using a simple way to do what another tech does, but as you need more features you rebuild the other tech, just worse and way less maintainably.
BottomLine: Good joking letter on why you shouldn't rebuild Kubernetes again
==
URL reference: https://securityboulevard.com/2025/08/love-your-kubernetes-add-ons-securing-kubernetes-beyond-the-core/
DateReviewed: 2025-09-02
Description: Today's article is on Kubernetes add ons and making them secure. After a bit of background, we get into what Kubernetes add ons are and why they matter. They talk about Kubernetes base and what K8s does when it starts, and then it talks about the required add-ons like CNI and DNS, and then dipping into the optional things like TLS and Ingress among other things. Then we move into the security side, explaining that add ons are often run with more privs. They make the point that an addon with a security issue can lead to an easier compromise for attackers. They do talk about why it is hard to keep add ons updated - compatibility, lack of rollbacks, and set it and forget it among others. They then talk about the issues that people had with K8s upgrades in the past, and a bit about how this is improving. They have great suggestions - bring the pain forward, using open source tools to automate the boring stuff. They also advocate using a staged approach and doing it more often, before wrapping up.
BottomLine: A good discussion on security around Kubernetes add ons
==
URL reference: https://www.nivelepsilon.com/2024/06/19/understanding-kubernetes-network-policies-a-friendly-guide/
DateReviewed: 2025-09-03
Description: What we're looking at today is a friendly guide to Kubernetes network policies. We start with a bit of background, before digging into what Kubernetes network policies actually are. They go through concepts like what a network policy is, what selectors are, and what ingress and egress rules are. Next we look at how to craft the policies as YAML files, going through 3 examples before summing up. Good compact intro.
BottomLine: Solid intro to Netowrk Policies in Kubernetes with YAML examples
==
URL reference: https://medium.com/@DynamoDevOps/12-kubernetes-security-anti-patterns-you-ship-every-week-and-the-one-line-fix-for-each-a5e3456ec605
DateReviewed: 2025-09-04
Description: This article is about quick security fixes to Kubernetes issues that occur all the time. We start with a short intro, and then dive right into the issues. The format is to list the issue, what the security badness is around it, and a one-line fix to it is in YAML format. The concerns include running pods as root, allowing priv. access, using "latest" tag in Prod, and hardcoding secrets. Good appraoch and execution.
BottomLine: Good walkthrough of simple security concerns in Kubernetes and quick fixes
==
URL reference: https://learnkube.com/issues/144
DateReviewed: 2025-09-05
Description: Today's article will look at Yoke, a possible replacement for Helm as a resource deployment system. We start with a short intro, we dive into the differences between them. They both map inputs to outputs basically, but the differences is that Helm uses Go to convert the templates to resources; they point out things like type disagreement. Yoke uses WebAssembly, which means anything that can produce a WA output can be used to write it. Where Helm calls the templates "charts", Yoke uses "flights". They also point out that Yoke can use Helm, because Go can be compiled to WA. The interesting thing is that a flight is a full program that writes resources to stdout. It does go through a code demo in Go using Yoke. Interesting project.
BottomLine: New project with a new take on Helm for Kubernetes called Yoke
==
