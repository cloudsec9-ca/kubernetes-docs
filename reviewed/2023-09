
URL reference: https://commandk.dev/blog/best-practices-for-data-protection-in-kubernetes/
DateReviewed: 2023-09-01
Description: Focus for this article is data protection techniques in Kubernetes. In a past article they covered creating secrets in K8s, so we're just going to focus on using them. To make sure only containers that need them have access, we can use RBAC for access control. They explain how this helps, and then we explore an example with snippets, and end with some added tips. They then move on to storage and transport of secrets; by default, secrets are stored in plain text. They then compare a bunch of methods to encrypt the secret data with pros & cons. Next they go through automatic secret rotation and touch on auditing and monitoring of secrets. They go through a few more best practices. Overall a good treatment.
BottomLine: Focus on secrets in Kubernetes and making them more secure
==
URL reference: https://matthiasportzel.com/docker/
DateReviewed: 2023-09-02
Description: Short piece which explains the Docker ecossytem -- being the file format, the engine that runs the file(s), the desktop app that allows you to run/test your images locally, and the repo that allows you to distribute your app.
BottomLine: Super short and to the point summary of Docker ecosystem
==
URL reference: https://prajwalt.medium.com/k8s-security-bit-by-bit-2-service-account-8ea98145b4c0
DateReviewed: 2023-09-03
Description: A quick whirlwind on the main differeneces between a traditional user account and a service account in Kubernetes. Well illustrated and touches on a use case or two for illustration.
BottomLine: Brief into on the differences between user and service accounts in Kubernetes
==
URL reference: https://www.odbms.org/2023/08/the-business-value-of-running-databases-on-kubernetes/
DateReviewed: 2023-09-04
Description: Our article says we can deploy databases to Kubernetes, but we should do so with Operators. Seems we're going to dive into the benefits, so let's get started. First up is ownership costs, and the fact that we have lots of flexibility. By giving up management, we can reduce cost, and furthermore, because we can autoscale, we don't have to size for peak load. We then have a strange journey, through resource sharing, autoscaling and spot instances, but nothing is explained on how these can be leveraged in a DB context. We then touch on avoiding vendor lock-in, which is good for flexibility. There are a few more points made, but overall this is a good argument for using the cloud for your DBs, but nothing really compelling about using Kubernetes in the article.
BottomLine: Argues poorly for using Kubernetes over just cloud for DB deployment
==
URL reference: https://ksoc.com/blog/kubernetes-security-ultimate-checklist
DateReviewed: 2023-09-04
Description: We start by touching on other entries in this series, to center what this installment covers and what has already been covered. They then list 10 items they feel are priority in a list, and feel if you've covered these you are in decent shape. They then tackle each item in the list in detail. We start with Authentication, and we cover both users and service access, before moving on to Authorization with RBAC and best practices. We then touch on Kubelet security, managing secrets, and admission controllers in detail. We dive into Kubernetes security boundries, Network security, K8s auditing and logging and finally open defaults, all in a good amount of detail. A really thorough and pretty detailed intro.
BottomLine: Good detailed introduction to ten priority areas for Kubernetes security
==
URL reference: https://blog.getambassador.io/kubernetes-security-best-practices-for-building-a-secure-environment-b9700b487eb9
DateReviewed: 2023-09-05
Description: We start with K8s popular but insecure, so this article will show best practice to secure. After a bit of overview, we start doing security. First up is controlling cluster access, and they go through 4 methods of authenticating to the K8s API. Next is using RBAC to lock down things. We go on to look at node authorization as a way to contol API access. They talk about TLS and network segmentation, monitoring and auditing, securing images and keeping the cluster up to date. Overall, good coverage.
BottomLine: Good broad high level walkthrough of securing Kubernetes
==
URL reference: https://securityboulevard.com/2023/09/pluto-finds-deprecated-kubernetes-api-versions-3-questions-from-users/
DateReviewed: 2023-09-06
Description: In a confusing opening, it talks about how Pluto can find old "API versions", and at first I thought this was running clusters, but after reading it a couple times I think they mean API invocations from YAML. Using old or deprecated APIs is bad, and it might not be easy to know you are using broken stuff. Okay, so there are 3 ways to use it -- in an IaC repo, against live Helm releases, and in-cluster. They work through three user questions, the first is explaining what permissions Pluto needs to do its inspections. The second revolves around versions, and Pluto tells you what is deprecated based on the version you pas s it - so you can check against the version you are running or one you want to upgrade to. Last is a question on CRDs, which Pluto does deal with, but with the caveat that you have to explicitly pass the version of the CRD. I like the tack this takes, it is very approachable.
BottomLine: Pluto deprecation check tool intro with some discussion
==
URL reference: https://medium.com/@dangreenlee_/deep-dive-into-k9s-supercharge-your-kubernetes-workflow-629a6e1b7305
DateReviewed: 2023-09-07
Description: Starting with K9s being a tool to manage, troubleshoot and monitor your K8s cluster, this article will do a walk through of K9s. There is a prereq we go through quickly, and now we're on to the meat. K9s aims to be a simpler way to interact with your cluster, replacing kubectl it seems. We then go through the UI with a tour, and explaining things a bit. Then they have some tasks, which they walk you through to get some hands on, as a scavanger hunt. All told there are 5 tasks, and they take you through different things, like logs, secrets, and checking configs. An interesting approach.
BottomLine: Good hands on of the Kubernetes tool K9s
==
