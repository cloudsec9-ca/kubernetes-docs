
URL reference: https://commandk.dev/blog/best-practices-for-data-protection-in-kubernetes/
DateReviewed: 2023-09-01
Description: Focus for this article is data protection techniques in Kubernetes. In a past article they covered creating secrets in K8s, so we're just going to focus on using them. To make sure only containers that need them have access, we can use RBAC for access control. They explain how this helps, and then we explore an example with snippets, and end with some added tips. They then move on to storage and transport of secrets; by default, secrets are stored in plain text. They then compare a bunch of methods to encrypt the secret data with pros & cons. Next they go through automatic secret rotation and touch on auditing and monitoring of secrets. They go through a few more best practices. Overall a good treatment.
BottomLine: Focus on secrets in Kubernetes and making them more secure
==
URL reference: https://matthiasportzel.com/docker/
DateReviewed: 2023-09-02
Description: Short piece which explains the Docker ecossytem -- being the file format, the engine that runs the file(s), the desktop app that allows you to run/test your images locally, and the repo that allows you to distribute your app.
BottomLine: Super short and to the point summary of Docker ecosystem
==
URL reference: https://prajwalt.medium.com/k8s-security-bit-by-bit-2-service-account-8ea98145b4c0
DateReviewed: 2023-09-03
Description: A quick whirlwind on the main differeneces between a traditional user account and a service account in Kubernetes. Well illustrated and touches on a use case or two for illustration.
BottomLine: Brief into on the differences between user and service accounts in Kubernetes
==
URL reference: https://www.odbms.org/2023/08/the-business-value-of-running-databases-on-kubernetes/
DateReviewed: 2023-09-04
Description: Our article says we can deploy databases to Kubernetes, but we should do so with Operators. Seems we're going to dive into the benefits, so let's get started. First up is ownership costs, and the fact that we have lots of flexibility. By giving up management, we can reduce cost, and furthermore, because we can autoscale, we don't have to size for peak load. We then have a strange journey, through resource sharing, autoscaling and spot instances, but nothing is explained on how these can be leveraged in a DB context. We then touch on avoiding vendor lock-in, which is good for flexibility. There are a few more points made, but overall this is a good argument for using the cloud for your DBs, but nothing really compelling about using Kubernetes in the article.
BottomLine: Argues poorly for using Kubernetes over just cloud for DB deployment
==
URL reference: https://ksoc.com/blog/kubernetes-security-ultimate-checklist
DateReviewed: 2023-09-04
Description: We start by touching on other entries in this series, to center what this installment covers and what has already been covered. They then list 10 items they feel are priority in a list, and feel if you've covered these you are in decent shape. They then tackle each item in the list in detail. We start with Authentication, and we cover both users and service access, before moving on to Authorization with RBAC and best practices. We then touch on Kubelet security, managing secrets, and admission controllers in detail. We dive into Kubernetes security boundries, Network security, K8s auditing and logging and finally open defaults, all in a good amount of detail. A really thorough and pretty detailed intro.
BottomLine: Good detailed introduction to ten priority areas for Kubernetes security
==
URL reference: https://blog.getambassador.io/kubernetes-security-best-practices-for-building-a-secure-environment-b9700b487eb9
DateReviewed: 2023-09-05
Description: We start with K8s popular but insecure, so this article will show best practice to secure. After a bit of overview, we start doing security. First up is controlling cluster access, and they go through 4 methods of authenticating to the K8s API. Next is using RBAC to lock down things. We go on to look at node authorization as a way to contol API access. They talk about TLS and network segmentation, monitoring and auditing, securing images and keeping the cluster up to date. Overall, good coverage.
BottomLine: Good broad high level walkthrough of securing Kubernetes
==
URL reference: https://securityboulevard.com/2023/09/pluto-finds-deprecated-kubernetes-api-versions-3-questions-from-users/
DateReviewed: 2023-09-06
Description: In a confusing opening, it talks about how Pluto can find old "API versions", and at first I thought this was running clusters, but after reading it a couple times I think they mean API invocations from YAML. Using old or deprecated APIs is bad, and it might not be easy to know you are using broken stuff. Okay, so there are 3 ways to use it -- in an IaC repo, against live Helm releases, and in-cluster. They work through three user questions, the first is explaining what permissions Pluto needs to do its inspections. The second revolves around versions, and Pluto tells you what is deprecated based on the version you pas s it - so you can check against the version you are running or one you want to upgrade to. Last is a question on CRDs, which Pluto does deal with, but with the caveat that you have to explicitly pass the version of the CRD. I like the tack this takes, it is very approachable.
BottomLine: Pluto deprecation check tool intro with some discussion
==
URL reference: https://medium.com/@dangreenlee_/deep-dive-into-k9s-supercharge-your-kubernetes-workflow-629a6e1b7305
DateReviewed: 2023-09-07
Description: Starting with K9s being a tool to manage, troubleshoot and monitor your K8s cluster, this article will do a walk through of K9s. There is a prereq we go through quickly, and now we're on to the meat. K9s aims to be a simpler way to interact with your cluster, replacing kubectl it seems. We then go through the UI with a tour, and explaining things a bit. Then they have some tasks, which they walk you through to get some hands on, as a scavanger hunt. All told there are 5 tasks, and they take you through different things, like logs, secrets, and checking configs. An interesting approach.
BottomLine: Good hands on of the Kubernetes tool K9s
==
URL reference: https://araji.medium.com/kubernetes-security-monitoring-bfb196e062de
DateReviewed: 2023-09-08
Description: We start with K8s is hard to secure, and not secure by default, and outlines 3 security phases, which they will focus on detection from. We start by drawing a distinction between K8s monitoring and K8s security monitoring, where one is focused on running an app well while the other is looking for security related issues. They have a good container diagram and then mislabel it "defense in depth". They look at audit logs and policies, cloud host and VM logs, and container logs as interesting info sources. They look at K8s runtime security, which they postulate is the final level of defense. They examine external tools for enforcement and auditing, such as Seccomp, SELinux and AppArmor. They emphasize it's not just about recording, but analyzing and actioning this info. They have a list of best practices too, including having a plan for incident remediation. An interesting approach to K8s security.
BottomLine: Interesting approach to Kubernetes security through monitoring
==
URL reference: https://blog.devops.dev/kubernetes-node-security-the-role-of-kubelet-authorization-366220051cb
DateReviewed: 2023-09-09
Description: First off we ack K8s being the orchestration cornerstone, and touch on Kubelet being an important part of making things work; and if an attacker can escape to the host, they can gain access to kubelet credentials. So, we start by taking a step back and understanding K8s auth in general. They mention that kubectl has a command "auth can-i", but this tool is focused on RBAC, where you can be granted other perms. Then we dive into a hands on with KinD. They build a 3 node cluster and then hop on one of the nodes to look at the perms. We examine some outputs and then there is a bit of discussion on RBAC and Node Authorizer, and how perms are stacked. We also chat about admission controllers, and how they are affected. They then explain that different distos can have different setups for kubelets and would affect what the "default" behavior is. 
BottomLine: Interesting discussion of Kubernetes security from a Kubelet perspective
==
URL reference: https://cloudwithease.com/the-4-cs-of-cloud-native-security/
DateReviewed: 2023-09-10
Description: We're going to discuss Cloud, Cluster, Container and Code in this article. While your cloud provider is responsible for some things, it is important to know what you are responsible for, our author says. Common cloud issues include visibility to data, misconfigss, theft and lack of training. To combat this, our author advocates 4 prongs, with an explaination of each. We then work through the cluster layer (with 3 issues), the container (3 also), and then code/devs (3 as well). It's a good start but very high level.
BottomLine: High level introduction to Kubernetes and Cloud security
==
URL reference: https://faun.pub/kubernetes-architecture-in-a-nutshell-801a6f558f52
DateReviewed: 2023-09-10
Description: We dive right into it, explaining that K8s is API driven and there is a reconcilliation loop at the heart to move from current state to desired state. They surface the desired state is called spec, and the current state is called status. We walk through some commands to understand this. Very interesting short article.
BottomLine: Interesting dip into the Kubernetes API and how it works
==
URL reference: https://datavirke.dk/posts/bare-metal-kubernetes-part-1-talos-on-hetzner/
DateReviewed: 2023-09-11
Description: Our author is documenting his from-scratch journey in an 8 part series, and this is part one. The author then dives into K8s distros and how to spin up the cluster at all. As a base, he chooses Talos Linux, which is one I haven't heard of. He has some hoops he jumps through to get the Talos ISO bootable on the system, but then we get into the config of the OS. After a bunch of OS discussion, we then jump into the K8s config. We're actually doing both OS and K8s config bits, as we need to build the base OS and then the cluster on top of it. Our author finally spins up a node with the config, and voila, we're K8s-ing! There are lots of snippets and screen caps, and it's a good approach. We're even left with a cliffhanger - the box isn't on networking because it needs a CNI, see part 2!
BottomLine: Great hands on walkthrough of a baremetal Kubernetes cluster
==
URL reference: https://owasp.org/www-project-kubernetes-top-ten/
DateReviewed: 2023-09-11
Description: We start at a plain page with a simple list of 10 items which are links. Each link takes us to an animated image explaining visually the issue, with a descrption of the problem, an illustration and finally ways to mitigate the issue. These are great individual pages, but taken as a whole applying them would put you on a good road to securing your K8s cluster.
BottomLine: Great in-depth list of top Kubernetes weaknesses from OWASP
==
URL reference: https://blog.devops.dev/kubernetes-day-22-advanced-rbac-and-pod-security-83f2c8b572eb
DateReviewed: 2023-09-12
Description: We start off by placing this as the late part of 30 day journey, and an advanced topic in K8s security. Our author says that while RBAC can be momre complex, with complexity comes flexibility. Off the shelf, there are a few "built in" roles, but the piece takes us through how to create and make the role work. It's a unique approach which I like.
BottomLine: Interesting toe-dip into custom RBAC definitions
==
URL reference: https://itnext.io/exploring-oci-registries-by-use-case-pull-a-public-helm-chart-761d63f24d64
DateReviewed: 2023-09-12
Description: For this piece, we jump right in, and in this case it is to OCI registries. We start with a Helm chart and the snippet that will get it installed to our cluster. Interestingly, they are using a private K8s which doesn't have Internet access, so they go through how to tweak it and set up a caching private proxy registry. The tweak is an operator, which will switch in the private registries FQDN for the pulls. After a bit more work and tweaking for CRD related images, we're in business. I love the approach of the article, which is try something->fail->troubleshoot->fix->try more. I also enjoy that they spitball approaches, because they realize others might need different things. Very well done.
BottomLine: Troubleshooting Kubernetes with a private OCI image registry
==
URL reference: https://securityboulevard.com/2023/09/best-practices-of-secrets-management-with-kubernetes/
DateReviewed: 2023-09-13
Description: To open, we're told we can unlock potential by using best practice secret management ... ok? Seems we are going to look at external secrets for K8s. A bit of fluff about the goodness of external secrets, and then ... fluff about RBAC, and how it can help you to limit where secrets are exposed. Okay, finally a unique strong point, that being you have to have a secret lifecycle. We then go thorough creating with snippets a standard Kubernetes secret, with the needed YAML. They also show how to update and delete a secret. They then go back through some of the earlier handwaves with deeper but still high level recommendations. They even have a number of useful pitfalls to try to avoid with secrets. They do mention a specific external product, but the ad pitch isn't too strong. Overall, I find some parts are good but the piece seems confused, and doesn't flow well.
BottomLine: Some good pieces on Kubernetes security but overall confused
==
URL reference: https://github.com/kr8s-org/kr8s
DateReviewed: 2023-09-14
Description: This is a repo to bring K8s to Python. The idea here is to allow someone who is a Python programmer API access to Kubernetes, but in a way that works very much like kubectl. It has a simple pip installer, and they have simple example like displaying node info or spinning up a pod. Very interesting library.
BottomLine: Python tool to allow access to Kubernetes API
==
URL reference: https://www.cncf.io/blog/2023/09/12/kyverno-completes-fuzzing-security-audit/
DateReviewed: 2023-09-14
Description: We start with an orienting bit, explaining that Kyverno is a policy engine and that a fuzzing audit has been carried out by a third party. Once we get going, we get a few paragraphs explaining what fuzzing is and how it works. They then describe how the fuzzing was done against Kyverno, and where the cases generated live. They also explain how they set up and approached the code, and how they picked what to exercise. The goal of the fuzzer is to find a crash, which is then examined to find the bug that allowed the crash. In the case of this audit, a total of three bugs were identified. They note that all three bugs were fixed. They further explain that the fuzzing work will continue, with the thought that there may be older or deeper bugs that are harder to surface.
BottomLine: Interesting discussion of how a component used in Kubernetes is security tested through fuzzing
==
URL reference: https://securityboulevard.com/2023/09/k8s-enterprise-questions-what-about-security-platform-engineering-and-distros/
DateReviewed: 2023-09-15
Description: So this piece is a snippet from a webinar, covering the first six questions. The first Q - is security trailing in Kubernetes - is a popular one, and it's a combo of K8s evolving quickly and being unfamiliar with the ecosystem. They dig through various issues, including K8s not being secure out of the box. Next they explain what Platform eng is, and when you need it, and how to use it to your advantage. They also look at distros and adoption by enterprises.
BottomLine: Different perspective looking at Kubernetes with an enterprise lens
==
URL reference: https://superuser.openinfra.dev/articles/enhancing-kubernetes-security-with-kyverno-runtimeclass-and-kata-containers/
DateReviewed: 2023-09-16
Description: We start fairly typically with lots of K8s adoption but sec is a major concern. The author explains policy engines in general, and then Kyverno in paticular, including their basis and how they work. Next we talk about RuntimeClass in Kubernetes, which allows you control over the runtime container portion of your workloads. They then explore Kata containers, which differ from typical containers that use cgroups for process isolation but all use the same kernel, while in Kata each pod uses it's own kernel. They then outline the benefits of combining these approaches, and do a walkthrough to see how to set it up. Interesting approach to apps that require additional security.
BottomLine: Unique extra security approach to a typical Kubernetes cluster
==
URL reference: https://blog.min.io/suse-rancher-and-minio-lock-horns-in-a-good-way/
DateReviewed: 2023-09-16
Description: We kick off by vibing into being data-driven and cloud-centric, and how Kubernetes enables this. After a bit of scaffolding, we are told that K8s has an affinity for object storage, accessible through a RESTful interface. And here is where the synergy between Rancher and MinIO come in, the former providing the K8s and the latter object store. We then go through blurbs about both, and then an examination about how together they enable scalability, security, simplicity and performance.
BottomLine: Decent walkthrough of the capabilities of Rancher combined with MinIO
==
URL reference: https://www.itpro.com/technology/artificial-intelligence-ai/368107/what-good-ai-cyber-security-software-looks-like
DateReviewed: 2023-09-17
Description: We start with a dire warning about threat actors and them using AI. So, they postulate that AI threats need AI defences. AI seems to be able to detect things better, and they are available for clouds like MS and AWS. AI apparently learns from experience and can find things humans miss. But it seems that AI still needs humans for now, to configure and manage them correctly. So the AI is surfacing threats and humans ane making the calls. It's an interesting thought exercise with a bit too much theory and not enough application for me.
BottomLine: Intro to AI security which is somewhat interesting but very high level and a bit too abstract
==
URL reference: https://itnext.io/hardeneks-the-easy-way-to-keep-your-aws-eks-clusters-secure-and-compliant-d9b88b615b3a
DateReviewed: 2023-09-18
Description: Wow, simple start here, where we begin with a blurb about what EKS is and a blurb about HardenEKS, and a short para about how to do its thing. So, HardenEKS is a Python CLI that helps you test out your EKS clusters for compliance with best practices. I'm impressed, this is a serious hands on which gives code snips and a detailed walkthrough, including a peek at the TUI.
BottomLine: Interesting tool for hardening EKS Kubernetes clusters with Python
==
URL reference: https://www.armosec.io/securing-ci-cd-pipelines/
DateReviewed: 2023-09-18
Description: We start by talking about why we use a CI/CD pipeline; namely to automate and streamline software development. They do mention "shifting left", or dealing with security earlier in the app lifecycle. We then enumerate some of the things that can be issues, like third party libs, external images or even the CI/CD tools themselves, like Jenkins and Github. We have a chart, showing early is easy and later is hard. The solution is Armo of course, but the process is useful to go through -- which is four steps. They prevent during coding, detect through scanning repos and continer images, and do post-deploy security. While I like the approach they outline, they provide zero info about how this works, and of course don't provide a demo/walkthrough.
BottomLine: Interesting approach to app security but doesn't feel complete
==
URL reference: https://joshuaburgin.substack.com/p/the-future-of-cloud-native-app-development
DateReviewed: 2023-09-19
Description: This is going to be an essay on early days on the web up until today; it should be a wild ride. We start in the era of everything is a physical machine, and we run into the normal issues with scale at that exposure. So we jump into distributed systems, and talk a bit about that. And then, we go back to the origins of the Internet. I see this is an abridged history, as we jump 20 yrs and a paragraph later a decade, but it's the thought that counts. Here we are talking about the birth of the WWW and browsers, and the commercial Internet. We inch forward a bit and into Virtualization and hypervisors. Now we're at 2006, and the birth of cloud computing. Then the invention of Docker in 2013, which spawned Kubernetes and our current enviornment. They then talk about our current state, and a bit about where we are going.
BottomLine: A good if brief history of the Internet and Cloud
==
URL reference: https://www.csoonline.com/article/652303/new-kubernetes-vulnerability-allows-privilege-escalation-in-windows.html
DateReviewed: 2023-09-19
Description: We start with a short overview of the issue. It seems it's a parsing weakness, and is exposed when looking through YAML files. In this case, it seems that since our host is Windows, that we can trick the parser into evaluating a PowerShell expression that can be arbitrary. To stop this, the patch passes the params now as Enviroment variables, which are treated as strings and not expressions. It's an interesting attack and one for Windows users to be aware of.
BottomLine: Vulnerability against Windows Kubernetes hosts found and patched
==
URL reference: https://www.cncf.io/blog/2023/09/19/kubernetes-1-28-the-security-perspective/
DateReviewed: 2023-09-20
Description: It's a blog post reviewing the latest security updates for Kubernetes. We start with CEL (Common Expression Language) moving to beta; this underpins admission policies and webhooks, and allows complex expressions to be written and evaluated. Next is the reduction of secret-based service account tokens. These tokens allow various resources to do their work, but they are being phased out in favor of better methods of authentication. They detail ensuring images are pulled and verified securely, using sigstore to validate image signatures, KMS v2 (key mgmt) improvements, and finally an Auth API to ensure that you have the right roles and permissions from where you are in the cluster. Overall, a good walkthrough and temp check on the new improvements.
BottomLine: An overview of a number of Kubernetes security improvements for the lates version
==
URL reference: https://www.cuemby.com/article/mastering-kubernetes-release-management-staying-current-with-1-28-and-beyond
DateReviewed: 2023-09-20
Description: Our article is going to look at keeping current with the latest version of Kubernetes. It seems this is a ten step process, but at a glance the steps seem compact and simple. Step one is basically staying informed, and knowing what is in the pipeline. Step two is maintating a test/staging env, which allows you to check out a release and see the impacts in short order. Step three is to understand releases, which means reading the release notes and changelog. Step four is test and validated, and here they stress checking out alpha and beta features and assessing third-party compatibility in your env. Step five is plan and schedule the upgrade - so maint windows and other related tests. Step six is Automation and IaC, so do as much this way. Step seven is backup and rollback strategy, which I think should have come earlier, but good to have -- know where your data is, and how to go back to an older version if you run into issues. Step eight is community engagement, so discussions and forums and conferences. Step nine is Learning and training - need to keep your staff up to date too! Step ten is consider using a Kubernetes manages service provider. Overall, I think it's a good approach, although maybe needing a bit of a reorder.
BottomLine: Interesting ten steps strategy to keep up to date with your Kubernetes cluster
==
URL reference: https://thehackernews.com/2023/09/alert-new-kubernetes-vulnerabilities.html
DateReviewed: 2023-09-21
Description: We're going to visit 3 new high-viz vulns. One allows remote code exec with SYSTEM privs, so pretty serious, and affects all major cloud providers and a laundry list of Kubelet versions. The root cause seems to be input sanitization issues. Next up is a priv escalation in the CSI or container storage ingerface, which might allow admin access. So, while we go through at a high level, there isn't really any examples of how to exploit here.
BottomLine: High level discussion of some recent Windows Kubernetes vulnerabilities
==
URL reference: https://contentmx.com/b/page/page.php?u=AccelbiArrow&i=3615284
DateReviewed: 2023-09-22
Description: Embedded doc has a lead in about gaining efficiency with Kubernetes (along with a sales pitch). Ah, they are pitching an "intergrated" Kubernetes platform, so let's see what they are talking about. Okay, so point one is about leveraging legacy apps with new Cloud Native stuff. Point two is buzzword city, while the big point is about standard workflow tools, it talks about ML and AI. Point three talks about managing containers and VMs, which is similar but slightly different than point one? Point four is about deploying and managing workloads in a uniform manner. Point five is about using a unified stack and point six is using tested and supported software. Okay, so some of these are good points, and I'm guessing that there is a suite that does all of this, but we're left wondering, because this is all high level and they never actually tie it in. 
BottomLine: Some good points for a Kubernetes platform but high level and more legacy focused
==
URL reference: https://romanglushach.medium.com/devsecops-best-practices-essential-kubernetes-security-checklist-b1f84bc5d0bf
DateReviewed: 2023-09-23
Description: We start with some fluff, DevSecOps is important and Kubernetes is popular blah blah. So I thought this would be a lightweight treatment, but I was mistaken. When we get going, the author mentions security should be a priority and you need a plan with goals, and talks about what those ought to be. We then go on a long run of many different (high-level) pieces of the Kubernetes security pie, with main headings and sub-heads with a paragraph on each. On the main level, he goes through IAM, network, node, pod and image security; secrets management, logging, disaster recovery and training. He tops that off with a detailed security checklist. Well done, I'm impressed.
BottomLine: Good high-level Kubernetes security walkthrough with detailed checklist
==
