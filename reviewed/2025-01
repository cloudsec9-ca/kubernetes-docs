
URL reference: https://dev.to/jamiu_cloud/kubernetes-architect-52fg
DateReviewed: 2025-01-01
Description: This article is more of a quick summary of learning. It does have a small diagram, but there are no real details. On the upside, it does broadly cover both the control plane and the data plane, and in point form goes through the high level components of each.
BottomLine: High level list of some Kubernetes architecture components - skippable
==
URL reference: https://www.kubecost.com/kubernetes-best-practices/kubernetes-firewall/
DateReviewed: 2025-01-02
Description: As Kubernetes has a slightly different layout then a traditional network, this article argues that you need a different approach to implementing a firewall. They do mention you could use a firewall in front of all of your K8s cluster, but I think the idea here is that it might not be the most effective guard, unless your ingress is mostly static. They start out with a table of some best practices along with ways to realize them, which is a decent starting point. They then give a primer on pods, service/ingress and Container network interface (CNI). They explain that all pods can communicate to all others by default, and to restrict this we have to implement a Network Policy. We are shown a YAML snip, and shown how to add the restrictions. They even show a deny-all YAML snip, if that is what you want to set as your base. They follow this up with the good advice to audit and monitor your usage, and show how to check from the CLI. They even say certain providers, like GKE allows you to log policy actions. Next up, we look at CNIs, which handle the network layer. They touch on Flannel, Calico, OVN-Kubernetes and Cilium. They point out chosing a CNI that aligns with your use case is very important. They go over various benefits and tradeoffs, allowing an informed decision. A very decent article.
BottomLine: Strong article on firewalls and network controls for Kubernetes
==
URL reference: https://minervadb.xyz/how-to-implement-encryption-at-rest-for-postgresql-in-kubernetes/
DateReviewed: 2025-01-03
Description: This article tackles encryption on the disk in PostgreSQL. They go through the steps, at a high level, to get this done. For this article, they are going to do the encryption on the disk itself, so have to enable it at the Kubernetes provider level when creating a Persistent Volume. They then add that volume to the pod with a PVC, and install PostgreSQL on top; they do include a sample YAML snip to show what it does. They then do say you should verify that encryption at rest is active. I have one issue -- they never mention that you could do this within PostgreSQL as an option, or explain any of the cons.
BottomLine: High level walkthrough of using encryption at rest in a Kubernetes PostgreSQL deployment
==
URL reference: https://irsl.medium.com/sneaky-write-hook-git-clone-to-root-on-k8s-node-e38236205d54
DateReviewed: 2025-01-04
Description: This article is a deep dive on the gitRepo volume driver exploit. We start with some background on Kubernetes volumes and how they are accessed through storage drivers, to give an overview. The note there are 16 different ones, and then we focus on the exploited one. The gitRepo driver includes a URL to a git repository, and Kubelet will check the repo out and make it available to your app. They note that this driver has had security issues before, related more that time to the git CLI itself, but still resulting in commands executing as root. The resulted in the gitRepo driver being updated to fix the issue but then deprecated. Now we go through getting a basic pod working with gitRepo - in an init container, you mount an emptyDir volume and that clones the repo into the pod's container. The way the repo is cloned is by passing the repo URL, and optional revision and directory parameters. In the CLI, it does a clone, then a checkout and a reset if revision is specified. Combing the options, it allows the clone, but allows the attacker to specify the directory it then changes into and then can checkout an arbitrary repo, including a .git subdirectory. This allows the attacker to have arbitrary commands executed, as .git holds the config files and the CLI will execute these commands as part of it's config parsing. They further note there is no fix coming, as it is deprecated already -- but do note you can restrict gitRepo volumes with AdmissionPolicy directives.
BottomLine: Good explaination of the gitRepo volume exploit on Kubernetes
==
URL reference: https://www.einfochips.com/blog/unleashing-superior-performance-and-scalability-with-docker-and-kubernetes/
DateReviewed: 2025-01-05
Description: We're going to look at some performance and scalability improvements in containers, with an eye to Docker and Kubernetes in this article. We start with background and a link to files used in the article. We start by going through some of the benefits of Docker, and then move on to how it helps with portability. They then show us a C# app, where they create a Dockerfile and show how to get an image from that and then run it. Now we move on to Kubernetes, with a bit of K8s background and then the benefits, before moving on to how K8s does scalability and high availability. The have a diagram of how autoscaling works, and then go through how horizontal scaling works, and do so with a Kind cluster. They also show how to set up metrics. Once we've got that, they go through creating a sample app to generate load. They then go though all the CLI commands to generate load and see the autoscaler work. We then move on to vertical scaling, and again they build a sample app to test things out. We then touch on LoadBalancing before concluding. Its a decent article, but tries to do too much -- I think it might have been better as a couple parts honestly.
BottomLine: Decent article on various autoscale strategies on Kubernetes
==
URL reference: https://altinity.com/blog/kubecon-recap-data-on-kubernetes-and-observability-with-clickhouse
DateReviewed: 2025-01-06
Description: This article is a brief recap on some talks at KubeCon, focused on observability. Each talk got a sentence or two, along with a YouTube link to the actual talk so you can watch it if it seems interesting. They talked about themes like OpenTelemetry emerging as a standard, and a few talks on logging and observability. They touch on some Data on K8s day talks, before some of the Observability hallway tracks, highlighting Last9, SigNoz, Dash0, HyperDX and Quesma. Each talk gets a link and a paragraph of descrption. Good recap!
BottomLine: Recap on the Observability side of KubeCon
==
URL reference: https://devpod.sh/
DateReviewed: 2025-01-07
Description: At first I thought this was an article or a product pitch, but it's an open source alternative to something like codespaces. That would be awesome for those that know what that is, but basically it is a workspace for development - basically a psuedo-VM for containing your development tools and editors/environments. It has a short video where they walk through opening up some different projects and walking through how you'd get productive. The key strength seems to be speed and isolation of your dev env. Actually something to check into.
BottomLine: Site for an Open source dev workspace tool called DevPod
==
URL reference: https://itbrief.co.nz/story/mirantis-unveils-open-source-kubernetes-engine-mke-4
DateReviewed: 2025-01-08
Description: This article seems like a slightly rewritten PR release, focused on Mirantis Kubernetes Engine. We're wowed with its 300K nodes in production and the fact that it's new releae is based in k0s, without telling us what that is. They handwave about enteprise encyrption and follow up with lots of buzzwords and references, without any real details. I'm not against product announcements, but explain the audience, what your product does, and what the real world case that is solved by the new features. This isn't that.
BottomLine: A skippable and fluffy release announcment for MKE 4
==
URL reference: https://www.suse.com/c/designing-for-the-edge-embracing-cloud-native-principles/
DateReviewed: 2025-01-09
Description: This article is a short exploration of designing for Cloud Native at the edge. We start with the statement that designing at the cloud's edge is different than in the data center or the public cloud. They say consideration must be paid to limited power, cooling or space, and the need for ruggeized platforms. It can also be the case that nodes are on the public network, and even might be physically accessible. They draw the contrast to things like automatic recovery and cluster monitoring not being available at the edge, so that the application itself has to be more resilient. They talk about best practices, starting with a hub and spoke model, where the hub allows for centralized comms to many clients. This model works well in retail deployments, where you have many locations that your apps must run at. They also point out that data generated at the edge is critical, but also must be protected. They touch on system hardening, network segmentation, and secure meshes to help achieve this. It's a short intro, but covers a lot of ground at a high level.
BottomLine: Decent intro to a good topic - Edge based cloud native design
==
