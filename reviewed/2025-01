
URL reference: https://dev.to/jamiu_cloud/kubernetes-architect-52fg
DateReviewed: 2025-01-01
Description: This article is more of a quick summary of learning. It does have a small diagram, but there are no real details. On the upside, it does broadly cover both the control plane and the data plane, and in point form goes through the high level components of each.
BottomLine: High level list of some Kubernetes architecture components - skippable
==
URL reference: https://www.kubecost.com/kubernetes-best-practices/kubernetes-firewall/
DateReviewed: 2025-01-02
Description: As Kubernetes has a slightly different layout then a traditional network, this article argues that you need a different approach to implementing a firewall. They do mention you could use a firewall in front of all of your K8s cluster, but I think the idea here is that it might not be the most effective guard, unless your ingress is mostly static. They start out with a table of some best practices along with ways to realize them, which is a decent starting point. They then give a primer on pods, service/ingress and Container network interface (CNI). They explain that all pods can communicate to all others by default, and to restrict this we have to implement a Network Policy. We are shown a YAML snip, and shown how to add the restrictions. They even show a deny-all YAML snip, if that is what you want to set as your base. They follow this up with the good advice to audit and monitor your usage, and show how to check from the CLI. They even say certain providers, like GKE allows you to log policy actions. Next up, we look at CNIs, which handle the network layer. They touch on Flannel, Calico, OVN-Kubernetes and Cilium. They point out chosing a CNI that aligns with your use case is very important. They go over various benefits and tradeoffs, allowing an informed decision. A very decent article.
BottomLine: Strong article on firewalls and network controls for Kubernetes
==
URL reference: https://minervadb.xyz/how-to-implement-encryption-at-rest-for-postgresql-in-kubernetes/
DateReviewed: 2025-01-03
Description: This article tackles encryption on the disk in PostgreSQL. They go through the steps, at a high level, to get this done. For this article, they are going to do the encryption on the disk itself, so have to enable it at the Kubernetes provider level when creating a Persistent Volume. They then add that volume to the pod with a PVC, and install PostgreSQL on top; they do include a sample YAML snip to show what it does. They then do say you should verify that encryption at rest is active. I have one issue -- they never mention that you could do this within PostgreSQL as an option, or explain any of the cons.
BottomLine: High level walkthrough of using encryption at rest in a Kubernetes PostgreSQL deployment
==
URL reference: https://irsl.medium.com/sneaky-write-hook-git-clone-to-root-on-k8s-node-e38236205d54
DateReviewed: 2025-01-04
Description: This article is a deep dive on the gitRepo volume driver exploit. We start with some background on Kubernetes volumes and how they are accessed through storage drivers, to give an overview. The note there are 16 different ones, and then we focus on the exploited one. The gitRepo driver includes a URL to a git repository, and Kubelet will check the repo out and make it available to your app. They note that this driver has had security issues before, related more that time to the git CLI itself, but still resulting in commands executing as root. The resulted in the gitRepo driver being updated to fix the issue but then deprecated. Now we go through getting a basic pod working with gitRepo - in an init container, you mount an emptyDir volume and that clones the repo into the pod's container. The way the repo is cloned is by passing the repo URL, and optional revision and directory parameters. In the CLI, it does a clone, then a checkout and a reset if revision is specified. Combing the options, it allows the clone, but allows the attacker to specify the directory it then changes into and then can checkout an arbitrary repo, including a .git subdirectory. This allows the attacker to have arbitrary commands executed, as .git holds the config files and the CLI will execute these commands as part of it's config parsing. They further note there is no fix coming, as it is deprecated already -- but do note you can restrict gitRepo volumes with AdmissionPolicy directives.
BottomLine: Good explaination of the gitRepo volume exploit on Kubernetes
==
