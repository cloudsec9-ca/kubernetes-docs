
URL reference: https://krolcloud.com/blog/anonymous-authentication-in-kubernetes/
DateReviewed: 2023-07-01
Description: The article explores a bit on what anonymous users mean in Kubernetes. It seems every access to the Kubernetes API requires a user, and if you don't supply one, it uses the "anonymous" one. Things like health and version are exposed by default. So if you don't want to expose this, the article asks -- how do you turn it off? They explain where this is set, and explain it might have implications in some cases. We pause to talk a bit about RBAC, and how the role a user slots into impacts what it can do. So, what if you want to give the anonymous user MORE access? They walk through adding the perms, and show before/after calls to the API. They then use a few tools to detect such happenings, and show which tools surface the info.
BottomLine: A good mid-level exploration of Kubernetes explaining the anonymous user permissions
==
URL reference: https://cloudsecurityalliance.org/blog/2023/06/29/mastering-kubernetes-security-navigating-complexity-and-securing-your-cloud-native-architecture/
DateReviewed: 2023-07-02
Description: This blog starts by hyping Kubernetes unique challenges and promising to provide insights; let's dig in. Using a 2 yr old report, we're touted that uptake is high, with 96% of orgs using it -- but the survey is of CNCF orgs, who are Cloud adjacent. So, I'd say this is creative stats. The article argues that security teams should be taking point, and they have to understand Kuberenetes. They then start to go through those challenges, first by talking about ephemeral workloads. This means short-lived containers, and is a depature from earlier tech, and requires more pro-active approaches. Next up is default configs, which can expose permissions to services and users. They give a good recommendation here, with a link to a benchmark. Another technique is enforced policies, to ensure compliance to security at all the lifecycle stages. Finally, they recommend a proactive security approach, of which K8s is just one part. Overall, the blog is helpful but feels like it lacks a bit in impact.
BottomLine: Okay overview but there are better high-level overviews out there.
==
URL reference: https://itnext.io/performing-security-checks-for-deployed-kubernetes-manifests-fa9d442b7951
DateReviewed: 2023-07-03
Description: Short motivation on what can happen if you have a vulnerable pod, and quick background on one way to prevent it. The article does mention there are other tools, but explains why this one is a good choice. The author walks us through the install of the tool (Polaris). He then takes us through the result, which is a pretty display, showing a donut chart of what is good and what is an issue in your cluster. They then dive into a result, showing the issue raised and even how they resolved it. Now the author promotes two adjacent articles, covering CI/CD and Github, to do this as part of your build pipeline, which is fair. 
BottomLine: A quick intro to Kubernetes security, but getting dirty with a specific tool
==
URL reference: https://blog.aquasec.com/introducing-kbom-kubernetes-bill-of-materials
DateReviewed: 2023-07-04
Description: Starts with a bit of motivation about SBOM and what KBOM means and how it differs. So while SBOM is app focused, KBOM tries to bring visibility to your various configs around your cluster. They then travel through a Q&A on a number of questions, including if they are touting a product of theirs -- sort of -- one does and one doesn't do the KBOM. It's an interesting concept.
BottomLine: Introduces KBOM for Kubernetes and explains how it differs from SBOMs
==
URL reference: https://itnext.io/cilium-cni-a-comprehensive-deep-dive-guide-for-networking-and-security-enthusiasts-588afbf72d5c
DateReviewed: 2023-07-05
Description: Article starts strong by explaining the network focus of Cilium, which is a Container Network Interface (CNI). They explain how Cilium can be used to do Ingress. As well, it exposes the Kubernetes Gateway API, which allows implementors like Cilium to expose external services. Bonus: a good amount of diagrams spinkled in. The author goes through what Cilium can do through the API, including Load balancing. It also supports SNI, which allows multiple names to be served on a single IP. There is a bit dedicated to service mesh with Cilium as well. I'd say this is a great overview and motivation to try Cilium!
BottomLine: Good broad introduction to Cilium and how it can work in Kubernetes
==
URL reference: https://dev.to/ciscoemerge/building-secure-docker-images-for-production-best-practices-5d0f
DateReviewed: 2023-07-06
Description: Our focus in this article is practial security enhancements to our production Docker images. We start by digging into a paticular project, with an image file. We are then treated to a discussion on the differences between production and dev enviroments. To satisfy these varied requirements, we use a different image for dev and prod -- the multi-stage build. They incorporate a scanner to review images we might use in prod for security. Next, they tune the dockerfile, and show how the cache can speed up your build. We also see how to create a user and add a healthcheck, to ensure our app runs properly. They then build and do another scan, to make sure everything is secure. A pretty nice walkthrough.
BottomLine: Good walkthrough of steps to do some practical basic security on your Docker builds
==
URL reference: https://securityboulevard.com/2023/07/navigating-kubernetes-and-cloud-native-security/
DateReviewed: 2023-07-07
Description: We start with a decent motivating paragraph, then follow with a definition of Cloud Native security. They talk about IaC, DevOps and various providers. Next we talk about Cloud Native security, where a key aspect is automation, and where we need to think about scaling and updates. The chat about the imporance of integrating security into this pipeline, and a few strategies that can help. They talk also about vulnerabilities and misconfigs, and even a bit on automatic remediation. There are a number of other points covered, and it makes a good overview and starting point to Kubernetes security.
BottomLine: Decent high level intro to Kubernetes security
==
URL reference: https://thenewstack.io/how-to-give-kubernetes-immunity-from-privilege-escalation/
DateReviewed: 2023-07-08
Description: This article starts by saying security has been crafted over 20 years into a decent state, but Kubernetes is a disruptor to the scene. The article argues that isolation at different levels is key to security, and that Kubernetes is even better at this then traditional architectures. They propose that namespaces can help with privacy and security, and that by using segments and other supporting pieces you can get good isolation. One good benefit is that by using Kubernetes in something like a multitennant system, you end up with a homogenous configuration approach. They argue that the weak link is actually Linux, and that is due to lack of knowledge. This is because of things like container escapes from privileged pods. They say the way to overcome this is to consider Kubernetes and the Linux OS as part of a single system. So, while I agree with their approach and message, I'm not sure their idea is revolutionary -- it seems to be "also make your nodes hardened". But I'm not sure "run easily targeted nodes" is many playbooks. Still, a good toe-dip.
BottomLine: Good perspective on approaches to not only container but Kubernetes node level security
==
URL reference: https://addozhang.medium.com/deep-dive-into-kubernetes-network-model-and-communication-57a2bffc852e
DateReviewed: 2023-07-09
Description: First in a series, this is a dive into network and comms for Kubernetes. The author explains the Kubernetes network model, and talks about how node and pod networking is arranged. A bit out of order, the article then explains what pods, containers and nodes are. We then dive through network namespaces, and show how a paticular pod is connected to its host node through some commands. We then back up to explore networking between two pods on the same node, and compare that to two pods on two different nodes. Overall, a good intro and a solid walkthrough with easy to understand diagrams.
BottomLine: Good intro and high level walkthrough of Kubernetes networking
==
URL reference: https://dev.to/salecharohit/bootstrap-security-in-kubernetes-deployments-2e59
DateReviewed: 2023-07-10
Description: This is actually a pretty good low level walkthrough, and it includes all of the configs and discussions that are needed. The hands-on starts with a Dockerfile and builds into a fully secured Kubernetes deployment.
BottomLine: Good hands-on low level walkthrough on Kubernetes security
==
URL reference: https://medium.com/@seifeddinerajhi/kubernetes-security-assessment-guidelines-and-necessary-checklist-9a326f341b68
DateReviewed: 2023-07-11
Description: This article start with a bit of the normal "K8s is the future, but must be secured" stuff we often see, but soon we have clear focus -- which is using a checklist to provide a systemic approach to security in Kubernetes. We then traverse the 9 top-level item list, which should be a starting point in the security approach. Each of the top level items has a number of bullet points, which walk through the concerns and how to address them for the various items. The first two are authentication and authorization, and after that we deal with secrets. Cluster config security, Audit & logging, OS security, Network security, config of workloas and finally secure image building are all tackled. A great resource and excellent starting point for the Kubernetes security journey.
BottomLine: Great list to start on securing a Kubernetes cluster
==
URL reference: https://itnext.io/aws-eks-openid-connect-and-serviceaccounts-40e01fbed55f
DateReviewed: 2023-07-12
Description: Our author is trying to get something working, and the article is a way to put some auth bits into context -- nice and practical, I like it. He talks about OIDC, IDP, and the roles of Identity and Service providers and how they interact at a cloud provider, which in this case is AWS. He does mention this is done by JWT, or JSON web tokens. Now, we get a bit into the weeds here -- I'm pretty good with AWS and decent with K8s but a lot of this is EKS specific. He does include a diagram to help, but it is way down in the article. So, I'll say it's a decent hands on, but of specific interest.
BottomLine: Good hands on for roles and accounts with AWS EKS Kubernetes
==
URL reference: https://securityboulevard.com/2023/07/4-ways-to-improve-long-term-kubernetes-capacity-cloud-costs-in-kubernetes/
DateReviewed: 2023-07-13
Description: Our intro here digs into trying to save money and improve performance. So, the answer it seems is FinOps, to help the business see where costs are being incurred to make data-driven decisions. As k8s uses a shared instance model, attributing costs can be more challenging. So, to do this, they advocate for using logical seperation like namespaces and labels to track workloads. With your workloads logically seperated, you can now track what they end up costing. They discuss using various tools to surface what you are using, how efficiently you are using things like CPU utilization. They then basically zoom out, to look at a monthly/quarterly trends to go and try to optimize. Last but not least, they advocate for checking on development and building costs. The goal here is to charge the costs of resources back to the business units that incurred them. Overall not a bad high level approach.
BottomLine: Good high-level cost control process for Kubernetes
==
URL reference: https://www.breakp.dev/blog/build-your-own-faas/
DateReviewed: 2023-07-14
Description: Right from the get go, they assume you know zero -- to the point they not only define FaaS, but even what a function is! They are using Fly as their provider, but they intend for this to be something you can use. They explain the architecture of FaaS, which consists of a Publisher (where your code goes) and a Worker (how your code runs). Then then march through 6 steps, where they get the arch ready, prep the pieces, and finally deploy the result. They use Javascript for their language, and write and then configure the various code bits to be ready to serve FaaS. They then do a local test of the whole system, followed by a full deployment to Fly with the ability to run on the Internet. It's actually a pretty cool walkthrough, and if you are interested in the guts of FaaS and how it works, this is a great piece.
BottomLine: Walks through all of the parts of how an FaaS system works, in an approachable way
==
URL reference: https://medium.com/@magstherdev/opentelemetry-operator-d3d407354cbf
DateReviewed: 2023-07-15
Description: Starts by pumping some past posts and promising you can implement things w/o code changes. Sounds like we're doing a hands on, in this case a Java app that runs a Pet Clinic, and then bolting on telemetry. And it has an arch diagram to start, nice. They then explain a few different ways OpenTelemetry can work, and how that mainfests on your K8s cluster. We then pivot over to the "app", and they supply a YAML with the deploment info. Then there is some setup and the actual telemetry bits, again as YAML with commands. So, it feels client/server-y, with an agent close to the service and a collector which aggregates, if I'm understanding. Oh, and now, the no code part -- is done through something called auto instrumentation. At writing, DotNet, Java, NodeJS and Python are supported. They go throug a bit more setup, and as they call it, "showtime". To _see_ the data, we need another service like Grafana, which queries OpenTelemetry. I like this walk through -- it shows it's fairly simple to set up, and has plenty of links to fill things out and help with any issues.
BottomLine: Great into hands-on to using OpenTelemetry without code changes
==
URL reference: https://slycreator.medium.com/cilium-empowering-kubernetes-networking-and-security-9d25750e8f44
DateReviewed: 2023-07-16
Description: Starts with an outline of what Cilium is (CNI) and how it works (eBPF). They dig in a bit, explaining things like it works at a low (kernel) level and it supports but IPv4 and IPv6 traffic. The authors then explain what can be done with Cilium's eBPF -- namely enforcing security policies and load balancing, among other things. Like Kubernetes, Cilium has different planes -- a control plane, to configure and converse with the K8s API, so it can understand the state of the cluster, and the data plane, where the actual network traffic work is done. It then also explains how Cilium closely integrates with K8s networking. We are then treated to some real-work use cases, and work through how Cilium can be used. Overall a good high level introduction.
BottomLine: Good first touch on how to use Cilium with Kubernetes
==
URL reference: https://www.youtube.com/watch?v=KWKxgv4lT3o
DateReviewed: 2023-07-17
Description: Our video starts with an intro, where our host admits he often is just trying to get things to work and not always worrying about security, but he's hoping to change that. He introduces a tool called Datree, which is a SaaS security offering which tests your Kubernetes cluster against their list of issues. He points out he was using the CLI tool, but sometimes he forgets -- so for this vid he shows how to deploy a proactive checker. It comes with a nice dashboard, which shows you what is failing, why, and gives you a difficulty to resolve rating and suggestions on what needs to be done. He then shows some flagged issues, from the simple "add an ENV tag" to the more complicated readiness and liveness checks. He also shows how to skip tests, in case you can't or don't want to fix them right now. He goes through another 3 such issues, to give a good feel of what the tool does and how you might resolve the concerns. The code bits are a bit too quick but overall its a great walkthrough and frankly an honest reflection of how development works sometimes. Well worth the just under 18 minutes.
BottomLine: Video walkthrough of a tool to flag Kubernetes security issues with a discussion on how to resolve them
==
URL reference: https://www.youtube.com/watch?v=Ll9StOD848A
DateReviewed: 2023-07-18
Description: While this vid has distinct sections, our host doesn't give us the overview and dives right in. We first talk a bit about the background and how to do Kubernetes, and what managed means vs. on prem. He talks about the various skills required -- for any K8s install, you'll need sysadmins, but on prem, you also need expertise for hardware and physical networks, for instance. The host makes some good points on things like scaling - in the cloud, it feels unlimited, whereas on prem you can only scale to the hardware you have on hand. Another good example is LoadBalancers - in the cloud, you pay but it's managed for you, whereas on prem it's another piece you have to manage. There is a plug for Portainer which does some of this management, but he recommends MicroK8s. He ends up talking about security. Overall, a decent comparison between on-prem and managed Kubernetes flavors.
BottomLine: Decent comparison between self-hosted on prem and hosted Kubernetes
==
URL reference: https://www.practical-devsecops.com/demystifying-dread-and-stride-threat-modeling-for-kubernetes-security/
DateReviewed: 2023-07-19
Description: We being with a short intro, lauding K8s role and highlighting security challenges, which this article thinks are a good fit to apply threat modeling frameworks DREAD or STRIDE to. The defined what DREAD is, and then give an example of it -- compromise of the Kubernetes API server. You rate each of the factors from 0 to 10, with 10 being the most damaging. The go on to define STRIDE, and give an example where a network policy bypass is available, which might allow attackers to spoof a trusted service. With definitions out of the way, we are treated to a brief comparison, where DREAD is able to tackle any issue but STRIKE focuses on six areas. They compare their ratings of issues, and suggest you could use both of them for best effect. We now dive into applying the frameworks to Kuberenetes, which breaks down roughly to - inventory, analyze risk, prioritize, apply mitigation. While I like threat modeling and the approach, I feel that the author could have done a bit more on the examples to make things clearer.
BottomLine: Decent conversation starter on Kubernetes threat modeling, but lacks a bit on examples and tactics
==
URL reference: https://ksoc.com/blog/if-you-are-using-kubernetes-cloud-security-is-not-enough
DateReviewed: 2023-07-20
Description: Starts strong with a good intro -- Cloud sec can be confusing, with the shared responsibility model. But mix in K8s, and is even Cloud security enough? Is there a better way with Kubernetes, they ask. From the intro we pivot to a definition of the cloud, and talk about some of the nuance and also the fact that cloud can be public or private. Then they talk about Kubernetes, and how while it usually runs in a cloud, it doesn't have to, so it's a layer above the cloud. They talk about the contrast and cooperation between cloud and Kubernetes, and how K8s abstracts and standardizes a lot of things. They move into the application lifecycle, and how that pertains to security. We are then explained how in the cloud view, everything is a process, and to understand the big picture we have to weave in the Kubernetes abstractions to make holistic security decsisions. Overall, a good walkthrough with references and excellent points.
BottomLine: Good high level discussion on how Kubernetes security is a bit different than cloud security
==
URL reference: https://github.com/jesseduffield/lazydocker
DateReviewed: 2023-07-21
Description: So this is a repo, and our review will try to take that into account. They start with an "elevator pitch", which we'll take as their intro. It's basically "docker is hard to remember, so let's make it more simple" - so, aimed at developers. Depending on your platform, there are a bunch of ways to run it, and the explain many of them. They have a list of cool things it does, a video tutorial link, a FAQ and some other similar projects. The gist of this is that it bundles and organizes docker, so you can run/get logs/stop/build all in one spot, with a textual dashboard giving you info on your services. Actually kind of neat!
BottomLine: Repo for something that helps simplify/manage your running docker containers
==
URL reference: https://www.macchaffee.com/blog/2022/k8s-secrets/
DateReviewed: 2023-07-22
Description: Kubernetes secrets isn't super hardened, and this author in the intro argues that is fine. What follows is a nuanced and well reasoned discussion, where the author highlights consideration of your risk model when figuring out if K8s secrets is decent or if you need something else. They talk about attacks against secrets, mitigations and even alternatives to K8s secrets. A decent discussion of the issues.
BottomLine: Good piece that evaluates Kubernetes secrets use in terms of what your threat model is
==
