
URL reference: https://krolcloud.com/blog/anonymous-authentication-in-kubernetes/
DateReviewed: 2023-07-01
Description: The article explores a bit on what anonymous users mean in Kubernetes. It seems every access to the Kubernetes API requires a user, and if you don't supply one, it uses the "anonymous" one. Things like health and version are exposed by default. So if you don't want to expose this, the article asks -- how do you turn it off? They explain where this is set, and explain it might have implications in some cases. We pause to talk a bit about RBAC, and how the role a user slots into impacts what it can do. So, what if you want to give the anonymous user MORE access? They walk through adding the perms, and show before/after calls to the API. They then use a few tools to detect such happenings, and show which tools surface the info.
BottomLine: A good mid-level exploration of Kubernetes explaining the anonymous user permissions
==
URL reference: https://cloudsecurityalliance.org/blog/2023/06/29/mastering-kubernetes-security-navigating-complexity-and-securing-your-cloud-native-architecture/
DateReviewed: 2023-07-02
Description: This blog starts by hyping Kubernetes unique challenges and promising to provide insights; let's dig in. Using a 2 yr old report, we're touted that uptake is high, with 96% of orgs using it -- but the survey is of CNCF orgs, who are Cloud adjacent. So, I'd say this is creative stats. The article argues that security teams should be taking point, and they have to understand Kuberenetes. They then start to go through those challenges, first by talking about ephemeral workloads. This means short-lived containers, and is a depature from earlier tech, and requires more pro-active approaches. Next up is default configs, which can expose permissions to services and users. They give a good recommendation here, with a link to a benchmark. Another technique is enforced policies, to ensure compliance to security at all the lifecycle stages. Finally, they recommend a proactive security approach, of which K8s is just one part. Overall, the blog is helpful but feels like it lacks a bit in impact.
BottomLine: Okay overview but there are better high-level overviews out there.
==
URL reference: https://itnext.io/performing-security-checks-for-deployed-kubernetes-manifests-fa9d442b7951
DateReviewed: 2023-07-03
Description: Short motivation on what can happen if you have a vulnerable pod, and quick background on one way to prevent it. The article does mention there are other tools, but explains why this one is a good choice. The author walks us through the install of the tool (Polaris). He then takes us through the result, which is a pretty display, showing a donut chart of what is good and what is an issue in your cluster. They then dive into a result, showing the issue raised and even how they resolved it. Now the author promotes two adjacent articles, covering CI/CD and Github, to do this as part of your build pipeline, which is fair. 
BottomLine: A quick intro to Kubernetes security, but getting dirty with a specific tool
==
URL reference: https://blog.aquasec.com/introducing-kbom-kubernetes-bill-of-materials
DateReviewed: 2023-07-04
Description: Starts with a bit of motivation about SBOM and what KBOM means and how it differs. So while SBOM is app focused, KBOM tries to bring visibility to your various configs around your cluster. They then travel through a Q&A on a number of questions, including if they are touting a product of theirs -- sort of -- one does and one doesn't do the KBOM. It's an interesting concept.
BottomLine: Introduces KBOM for Kubernetes and explains how it differs from SBOMs
==
URL reference: https://itnext.io/cilium-cni-a-comprehensive-deep-dive-guide-for-networking-and-security-enthusiasts-588afbf72d5c
DateReviewed: 2023-07-05
Description: Article starts strong by explaining the network focus of Cilium, which is a Container Network Interface (CNI). They explain how Cilium can be used to do Ingress. As well, it exposes the Kubernetes Gateway API, which allows implementors like Cilium to expose external services. Bonus: a good amount of diagrams spinkled in. The author goes through what Cilium can do through the API, including Load balancing. It also supports SNI, which allows multiple names to be served on a single IP. There is a bit dedicated to service mesh with Cilium as well. I'd say this is a great overview and motivation to try Cilium!
BottomLine: Good broad introduction to Cilium and how it can work in Kubernetes
==
URL reference: https://dev.to/ciscoemerge/building-secure-docker-images-for-production-best-practices-5d0f
DateReviewed: 2023-07-06
Description: Our focus in this article is practial security enhancements to our production Docker images. We start by digging into a paticular project, with an image file. We are then treated to a discussion on the differences between production and dev enviroments. To satisfy these varied requirements, we use a different image for dev and prod -- the multi-stage build. They incorporate a scanner to review images we might use in prod for security. Next, they tune the dockerfile, and show how the cache can speed up your build. We also see how to create a user and add a healthcheck, to ensure our app runs properly. They then build and do another scan, to make sure everything is secure. A pretty nice walkthrough.
BottomLine: Good walkthrough of steps to do some practical basic security on your Docker builds
==
URL reference: https://securityboulevard.com/2023/07/navigating-kubernetes-and-cloud-native-security/
DateReviewed: 2023-07-07
Description: We start with a decent motivating paragraph, then follow with a definition of Cloud Native security. They talk about IaC, DevOps and various providers. Next we talk about Cloud Native security, where a key aspect is automation, and where we need to think about scaling and updates. The chat about the imporance of integrating security into this pipeline, and a few strategies that can help. They talk also about vulnerabilities and misconfigs, and even a bit on automatic remediation. There are a number of other points covered, and it makes a good overview and starting point to Kubernetes security.
BottomLine: Decent high level intro to Kubernetes security
==
URL reference: https://thenewstack.io/how-to-give-kubernetes-immunity-from-privilege-escalation/
DateReviewed: 2023-07-08
Description: This article starts by saying security has been crafted over 20 years into a decent state, but Kubernetes is a disruptor to the scene. The article argues that isolation at different levels is key to security, and that Kubernetes is even better at this then traditional architectures. They propose that namespaces can help with privacy and security, and that by using segments and other supporting pieces you can get good isolation. One good benefit is that by using Kubernetes in something like a multitennant system, you end up with a homogenous configuration approach. They argue that the weak link is actually Linux, and that is due to lack of knowledge. This is because of things like container escapes from privileged pods. They say the way to overcome this is to consider Kubernetes and the Linux OS as part of a single system. So, while I agree with their approach and message, I'm not sure their idea is revolutionary -- it seems to be "also make your nodes hardened". But I'm not sure "run easily targeted nodes" is many playbooks. Still, a good toe-dip.
BottomLine: Good perspective on approaches to not only container but Kubernetes node level security
==
URL reference: https://addozhang.medium.com/deep-dive-into-kubernetes-network-model-and-communication-57a2bffc852e
DateReviewed: 2023-07-09
Description: First in a series, this is a dive into network and comms for Kubernetes. The author explains the Kubernetes network model, and talks about how node and pod networking is arranged. A bit out of order, the article then explains what pods, containers and nodes are. We then dive through network namespaces, and show how a paticular pod is connected to its host node through some commands. We then back up to explore networking between two pods on the same node, and compare that to two pods on two different nodes. Overall, a good intro and a solid walkthrough with easy to understand diagrams.
BottomLine: Good intro and high level walkthrough of Kubernetes networking
==
URL reference: https://dev.to/salecharohit/bootstrap-security-in-kubernetes-deployments-2e59
DateReviewed: 2023-07-10
Description: This is actually a pretty good low level walkthrough, and it includes all of the configs and discussions that are needed. The hands-on starts with a Dockerfile and builds into a fully secured Kubernetes deployment.
BottomLine: Good hands-on low level walkthrough on Kubernetes security
==
URL reference: https://medium.com/@seifeddinerajhi/kubernetes-security-assessment-guidelines-and-necessary-checklist-9a326f341b68
DateReviewed: 2023-07-11
Description: This article start with a bit of the normal "K8s is the future, but must be secured" stuff we often see, but soon we have clear focus -- which is using a checklist to provide a systemic approach to security in Kubernetes. We then traverse the 9 top-level item list, which should be a starting point in the security approach. Each of the top level items has a number of bullet points, which walk through the concerns and how to address them for the various items. The first two are authentication and authorization, and after that we deal with secrets. Cluster config security, Audit & logging, OS security, Network security, config of workloas and finally secure image building are all tackled. A great resource and excellent starting point for the Kubernetes security journey.
BottomLine: Great list to start on securing a Kubernetes cluster
==
