URL reference: https://www.cncf.io/blog/2023/05/31/the-cost-of-ignoring-security-champions-a-cautionary-tale-for-application-security-culture/
DateReviewed: 2023-06-02
Description: This article explains what a security champion is, why they are needed, and what happens when they aren't there. Champions act as the catalyst between tech people (devs but also other IT) and the formal security org. I like the approach and advocacy of tackling security early and being thorough.
BottomLine: Good piece arguing for using Security Champions
==
URL reference: https://cloudsecdocs.com/container_security/theory/secure_components/pod_security_standards/
DateReviewed: 2023-06-03
Description: A quick guide for those switching from PodSecurityPolicy. Goes through how to set the new Pod Security Standards up, how the policies are defined, and how they are enforced. It wraps up with a quick example of the YAML needed to use them.
BottomLine: Good quick reference and intro to Pod Security Standard
==
URL reference: https://blog.cloudsecque.com/how-to-improve-the-security-of-your-applications-with-kubernetes-security-scanners-cda97fd2f574
DateReviewed: 2023-06-04
Description: We start off being told the case for why we want a scanner and how it helps, which is a good foundation. It then goes through things like needed permissions, supported configs and even touches on prices, including free options. We then dig into 5 scanners, talking about what they target and a high level on how they work. Overall, decent, but I wish they'd have touched on the weakness of scanning (a scan today won't find a zero-day discovered next week -- you'll have to wait until your next deployment/update to pick that up.
BottomLine: Good motivation on Kubernetes security scanners and a touch on a hnadful of such tools
==
URL reference: https://blog.codeswiftr.com/kubernetes-in-azure-a-step-by-step-guide-to-setting-up-a-production-ready-cluster-7336f78d5f7
DateReviewed: 2023-06-05
Description: Starts with a good groundwork, explaining why you want Kubernetes and how Azure factors into the equation here. They have a list of prereqs and do a handwave at how to get one of them. They use Terraform as their IaC tool, so the explain the gameplan on how to get the cluster running. First up is creating some storage which will keep track of our TF state. They then set up things like cloud networks and other plumbing, which we need to actually have traffic flow. Next up is logging, done through Log Analytics. We need a way to talk to the cluster from outside, and for that they set up an Application Gateway Ingress Controller and finally they spin up Kubernetes itself. They then show using kubectl to actually talk to the cluster.
BottomLine: A complete walkthrough of setting up Kubernetes on Azure
==
URL reference: https://securityonline.info/kubeshark-api-traffic-analyzer-for-kubernetes/
DateReviewed: 2023-06-06
Description: We start with a brief background on kubeshark, which is an API traffic analyster for Kubernetes. They have a colorful but small screenshot. Kubeshark seems like wireshark, using eBPF to grab all kinds of possible traffic. And it does integration too, it seems. The article lacks use cases -- is it a debugging tool, or should I use it to monitor -- maybe both? The approach is VERY high level, but then they smack an "install & use" link.
BottomLine: The tool seems interesting, but the article is a bit lightweight
==
