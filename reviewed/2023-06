URL reference: https://www.cncf.io/blog/2023/05/31/the-cost-of-ignoring-security-champions-a-cautionary-tale-for-application-security-culture/
DateReviewed: 2023-06-02
Description: This article explains what a security champion is, why they are needed, and what happens when they aren't there. Champions act as the catalyst between tech people (devs but also other IT) and the formal security org. I like the approach and advocacy of tackling security early and being thorough.
BottomLine: Good piece arguing for using Security Champions
==
URL reference: https://cloudsecdocs.com/container_security/theory/secure_components/pod_security_standards/
DateReviewed: 2023-06-03
Description: A quick guide for those switching from PodSecurityPolicy. Goes through how to set the new Pod Security Standards up, how the policies are defined, and how they are enforced. It wraps up with a quick example of the YAML needed to use them.
BottomLine: Good quick reference and intro to Pod Security Standard
==
URL reference: https://blog.cloudsecque.com/how-to-improve-the-security-of-your-applications-with-kubernetes-security-scanners-cda97fd2f574
DateReviewed: 2023-06-04
Description: We start off being told the case for why we want a scanner and how it helps, which is a good foundation. It then goes through things like needed permissions, supported configs and even touches on prices, including free options. We then dig into 5 scanners, talking about what they target and a high level on how they work. Overall, decent, but I wish they'd have touched on the weakness of scanning (a scan today won't find a zero-day discovered next week -- you'll have to wait until your next deployment/update to pick that up.
BottomLine: Good motivation on Kubernetes security scanners and a touch on a hnadful of such tools
==
URL reference: https://blog.codeswiftr.com/kubernetes-in-azure-a-step-by-step-guide-to-setting-up-a-production-ready-cluster-7336f78d5f7
DateReviewed: 2023-06-05
Description: Starts with a good groundwork, explaining why you want Kubernetes and how Azure factors into the equation here. They have a list of prereqs and do a handwave at how to get one of them. They use Terraform as their IaC tool, so the explain the gameplan on how to get the cluster running. First up is creating some storage which will keep track of our TF state. They then set up things like cloud networks and other plumbing, which we need to actually have traffic flow. Next up is logging, done through Log Analytics. We need a way to talk to the cluster from outside, and for that they set up an Application Gateway Ingress Controller and finally they spin up Kubernetes itself. They then show using kubectl to actually talk to the cluster.
BottomLine: A complete walkthrough of setting up Kubernetes on Azure
==
URL reference: https://securityonline.info/kubeshark-api-traffic-analyzer-for-kubernetes/
DateReviewed: 2023-06-06
Description: We start with a brief background on kubeshark, which is an API traffic analyster for Kubernetes. They have a colorful but small screenshot. Kubeshark seems like wireshark, using eBPF to grab all kinds of possible traffic. And it does integration too, it seems. The article lacks use cases -- is it a debugging tool, or should I use it to monitor -- maybe both? The approach is VERY high level, but then they smack an "install & use" link.
BottomLine: The tool seems interesting, but the article is a bit lightweight
==
URL reference: https://securityboulevard.com/2022/10/zero-trust-the-service-mesh-and-linkerd/
DateReviewed: 2023-06-07
Description: Ah, an article on Zero Trust -- let's dig in. We start talking about buzzwords and marketing, and then go through a decent definition of zero trust. Main gist is this is a pivot from perimeter security which we are familiar with on-prem, where there is a boundary and the inside is trusted. They then explain how perimeter security breaks down in the cloud. They introduce three concepts - Identity, Policy, and Enforcement, and explains how each works and why we need them with details. We're now taken through how this can work in Kubernetes, mainly leaning on Linkerd, but with high-level explainations of how things flow. It talks about side cars, mTLS, and automated checks to ensure containers are only talkling to who they need to.
BottomLine: Good, practical walk through of Zero trust, including a high level glance at doing it on Kubernetes, but still beginner friendly
==
URL reference: https://www.civo.com/blog/cilium-introduction
DateReviewed: 2023-06-08
Description: This article is a high-level walkthrough of Cilium, which explains what it is, and how it works -- and what it is useful for. Cilium uses eBPF under the covers, to do the work, which in most cases is slicing and dicing network traffic. The article explains that Cilium can either augment or in some cases replace pieces of the standard Kubernetes stack, to allow maximum flexibility. It claims to do proxy and load balancing, and even service load balancing. It also talks a bit about Cilium's security features. It spends a bunch of paragraphs talking about the piece they use for the UI, which they call Hubble. Hubble is integrated in, and allows you visibility into what Cilium is doing and thus into  your network. Overall a decent but high level walkthrough.
BottomLine: A great high level into to Cilium, which can help manage Kubernetes Nettwoking
==
URL reference: https://www.tigera.io/blog/using-calico-egress-gateway-and-access-controls-to-secure-traffic/
DateReviewed: 2023-06-08
Description: Unlike much security focused on inbound issues, this post focuses on traffic leaving the cluster, or Egress. The first issue they surface is that cluster IPs are ephemeral, and might even be NATed, and this can mean having to open up more firewall space than usual. In paticular, while one pod might require access to an external DB, because the outbound IP is the node, any other pod on that node will have access. The solution, using Calico, is to set up an egress gateway, which will only allow the correct pod to use it. The article goes on to talk about a few configs, including different namespaces and load balancing to account for different use cases. A good look at an interesting security approach.
BottomLine: Good examination of the Calico tool used to restrict egress traffic from a Kubernetes cluster
==
