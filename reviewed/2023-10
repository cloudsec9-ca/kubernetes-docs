
URL reference: https://keentolearn.medium.com/kubernetes-error-codes-what-they-mean-and-how-to-fix-them-e63656927af3
DateReviewed: 2023-10-01
Description: I've read a few of these error code articles, and they can be good; and this one starts with a "what K8s is". Actually, it only covers 6 errors, but they are often encountered, and it's well done. The author gives us a bit of info about what the error is, possible causes and a snip to get more concrete info. It's a good resource.
BottomLine: Goes through six common Kubernetes errors and their fixes
==
URL reference: https://blog.sonatype.com/npm-packages-caught-exfiltrating-kubernetes-config-ssh-keys
DateReviewed: 2023-10-02
Description: We start with a quick grounding that this sec team has found something. They used an automatic detector to spot the issue, then had analysts dig in to figure out what was going on. After explaining their process a bit, they find a JS component that finds configs and SSH keys and sends them to a malware domain. They do note that while there are 14 affected NPM modules, each module has only been downloaded less than 200 times, meaning this isn't too widespread. Still, something to know and check for.
BottomLine: A walkthrough of detection and understanding of an NPM software supply chain attack
==
URL reference: https://vijilan.com/blog/navigating-the-complexities-of-logscale-deployment-in-kubernetes-with-vijilan/
DateReviewed: 2023-10-03
Description: We start of with a nod to logs being a key part of security. Now, there is a pitch here, but just a handwave to that at first. We are run through a quick and very high level series of challenges with logging, which are good considerations. We then transition to a high level walkthrough of how their tool, Vijilan, makes logging (and LogScale in this case) easier. It stays very high level throughout, but it's a good toe-dip into logging and managing logging.
BottomLine: Decent first contact to Kubernetes logging and log management approachesk
==
URL reference: https://medium.com/@kevinlutzer9/raspberry-pi-kubernetes-cluster-with-k3s-and-metallb-1dab9ef475bb
DateReviewed: 2023-10-04
Description: Using K3s to run your own apps is cool. Our author talks a bit about how running K8s works in the cloud, and how things are a bit different on bare metal using Pis. We go through a short setup section, where they go through the prep parts. They talk about the hardware bits needed, and how to build your cluster from parts. We then are taken through setting up the primary node, followed by networking and a low-level automation tool. We then install and configure K3s, and watch our node(s) come up. We then configure "metallb", which allows us to use Load balance services on our bare metal machines. We are then treated to a demo of using Nginx to test our cluster.
BottomLine: An interesting approach to running Kubernetes on Raspberry Pis
==
URL reference: https://itnext.io/securing-kubernetes-applications-with-crowdsec-intrusion-detection-system-8eb2f93d3c9f
DateReviewed: 2023-10-05
Description: We start with the typical K8s is a security target. The author is going to use CrowdSec, so the article is built around that. Starts with some pre-reqs, then sets up a sample app to run on your cluster. Then it goes through the install process for CrowdSec. They then do a demo of an attack, show what they look like in the tool, and then show how to mitigate such an attack. Overall, a decent walkthrough.
BottomLine: Walks through a Kubernetes intrusion detection app with a sample attack
==
URL reference: https://github.com/openclarity/kubeclarity
DateReviewed: 2023-10-06
Description: This is a repo, so we start with a basic intro, which is that KubeClarity detects and manages SBOM and vulns. They have a why/solution section, which is great for motivation. They include a feature list, supported 3rd parties, and an arch diagram. They walk through a Helm install and a simple local demo. They do some hands-on walkthroughs, and then show how some of the integrations work. They have a limitations and a roadmap, to see the future.
BottomLine: Interesting open source SBOM component with vuln scanning
==
URL reference: https://www.solo.io/blog/buyers-guide-kubernetes-security/
DateReviewed: 2023-10-07
Description: We start with cloud giving us new possibilities, and new risks. We then dive into risks, highlighting both internal and external issues. But somehow traditions security blows this up? They then move to solutions, which they seem to cover 5 products, and how they do in the wild. They do cover a number of best practices, which I'll give them credit for. But I said "seem to" earlier because the entry here is just a puff piece to get you to download their guide, and I'm not a fan of that approach. Their guide may be great, but I'm here to learn something, not be punted to another document. I might review the guide another time.
BottomLine: Mainly a promo for a guide -- but does chat about risks and best practices a bit
==
URL reference: https://rafay.co/the-kubernetes-current/8-advantages-of-gitops-kubernetes-deployment
DateReviewed: 2023-10-08
Description: Ah, we begin with - K8s is the defacto way to deploy, but can be cumbersome. So, using version control we can "GitOps" our pipeline, with git as the place where everything is stored. They go through this as 8 points, starting with version control and auditing. Mostly good points about git and being able to know what is where (auditing) and being able to roll back (version history), but "knowing who did what" does require git to be set up properly. Second point is simplified collab, which means digital collab that is captured; but some things require outside collab. Third is IaC principles, and I do agree in principle, there are bits that might elude being checked in. Fourth is easy CD, and that is a strong feature of git. Fifth is declarative Config mgmt, and I like this trend. Sixth is DR and HA, and, maybe? Having configs are critical for spinning up replacement bits, but what about data? Seventh is self-serve for app teams, and while it sounds interesting, I'd like to see an example to understand it better. Last is security and compliance, and while I see some wins with git here, there are some gaps, which this piece doesn't address, like secrets. Overall a good high-level starting spot, though.
BottomLine: Good high level case for using GitOps with Kubernetes
==
URL reference: https://www.redhat.com/en/blog/enhancing-kubernetes-security
DateReviewed: 2023-10-09
Description: Starts like many, K8s, defacto, must be more secure. So, this article will focus on a compliance operator for OpenShift to do this. The piece actually outlines a solid policy, while of course hawking their own product, that does this. They covern Vuln mgmt, runtime thread detection, net segmentation, policy enforcment, IR, and compliance and reporting. In addition, they hawk the earlier mentioned compliance operator with 7 key points. One pet peeve is that they define only some of the acronyms they use. Worth a read if you might consider their offering, but it's similar to other non-biased guides I've reviewed.
BottomLine: Decent advice but with a definite RedHat product slant, so wouldn't be a first-read
==
URL reference: https://www.youtube.com/watch?v=whXHphf7LuI
DateReviewed: 2023-10-10
Description: Okay, reviewing a vid this time, and it starts weird ... our presenter goes on a bit about how many views they got on their last vid? Then we start to go through some config info, he explains the command he used and shows the layout diagram. He then shows us two pods running his app, and fires up the port forward. Then he shows that the port-forward only utilizes a specific pod, and destroys that pod. He isn't clear, but I think he's saying that when you set up the port-forward, it brings it up hooked up to a specific pod; because when he stops and re-starts it, it does work. One small annoyance -- he has text over on his vid, but it highlights the word he's on, and is prominently centered in the screen, and you can't turn it off. It's a decent length of about 5 and a half minutes, and I'd say you have to know K8s basics but not too much more to get something out of this.
BottomLine: Interesting short vid which talks a bit about Kubernetes port forwards
==
URL reference: https://www.adaptavist.com/blog/kubernetes--cloud-native-storage-uncovered
DateReviewed: 2023-10-11
Description: We start with K8s is great and Cloud Native dev is everywhere, so what is a problem? Storage, apparently, so we'll look at cloud native storage. So we start with a defintion, and in fact they explain cloud native itself, before delving into storage. They define it at a high level, but then spend a bit of time explaining why it's better then on-site storage, rather then any details. They then tie this into K8s in a high level way. Now we dig in a bit, and they explain types of storage, and then key characteristics, including scalability, reliablity, availability, consistency, flexibility and durability. They explain cloud vendors have some offerings, but there are also other projects that do cloud native storage too. Overall, a decent but mostly high-level intro to cloud native storage.
BottomLine: Decent intro to Cloud Native Storage at a high level
==
URL reference: https://www.helpnetsecurity.com/2023/09/28/2023-kubernetes-attacks-video/
DateReviewed: 2023-10-12
Description: Apparently there are new malware attacks targeting Kubernetes, icky. Okay, so in this video, they are going to touch on the attacks a bit. We start with a bit on why K8s, which is because it's capable. First attack is against a K8s misconfig, and deploys a whole pod to do cryptomining. Next attack uses the same vuln but applies a daemonset to try and escape the env, but also deploys a cryptominer. Next attack targets a web app and then pivots to the cloud provider to grant access to the cloud account. Last attack targets RBAC, creating a pod and trying to find cloud access keys. Then we go on to talk about how to mitigate, and we focus on RBAC. Removing unneeded privs, tracking and understanding how many login attempts are happening against your K8s auth.
BottomLine: Decent runthrough of some recent Kubernetes attacks that have been discovered
==
URL reference: https://cto.ai/blog/data-management-in-kubernetes/
DateReviewed: 2023-10-13
Description: Kubernetes does everything, yay, but it is transient, boo. Our focus on this article is persistence. We dive right in, talking about Persistent Volumes and PV claims, and their definitions. We then get some YAML to show us what it looks like, and then we dip into storage classes. The author then attempts to define what a storage class is, but it doesn't go well. My thought is that storage classes might refer to speed or size, but I'm not sure. We then dip into DR, and a bit out of left field, because this is all very abstract. They then mention multi-region, but now how it helps. And then we hop onto a CI/CD pipeline, because WUT? Okay, so this is like a book by different authors stitched together poorly, but this is just topic sub-heads in the same article.
BottomLine: Odd amalgam of good Kubernetes related PV/PVC bits and other unrelated bits
==
URL reference: https://www.tigera.io/learn/guides/kubernetes-security/kubernetes-waf/
DateReviewed: 2023-10-14
Description: We dive right in, with a definition of what a WAF or Web application firewall is. Next we deal a bit with why we might need a WAF, which here is a list of 4 main topics, only one of which is K8s specific. Apparently there are 4 different types, but it's not clear on the roles and what makes a WAF one type or another from these descriptions. They then present a 5 point evaluation metric to help in choosing what kind of WAF would be best. They then, as a wrap up, talk about a different WAF - which comes from Calico.
BottomLine: Decent starting spot to think about Kubernetes WAFs, but very high level
==
URL reference: https://thenewstack.io/kubernetes/kubernetes-infrastructure-architecture/
DateReviewed: 2023-10-14
Description: We start with talking about K8s strengths. Our article is going to focus on making architectural decisions. We start by thinking about WHERE we host - on site, data center, or a cloud of some sort? They also talk about things like Linux vs. Windows, or even Arm vs. x86. Another thing to consider is whether we need high availability in our clusters. They talk about using one control plane and using different namespaces, but also using different nodes for different workloads. We then go on to consider networking, and things like VPN, firewalls, DNS, load balancer and ingress controllers. Next up is managing K8s, and they talk about manual changes vs IaC, advocating for the latter. Overall a good read.
BottomLine: Interesting arch-based appraoch to managing Kubernetes - recommended
==
URL reference: https://www.cncf.io/blog/2023/10/12/only-one-label-to-improve-your-kubernetes-security-posture-with-the-pod-security-admission-psa-just-do-it/
DateReviewed: 2023-10-15
Description: Refering to a recently stable feature, you can now enforce security standards by simply applying a label; and that's what this article will address. They start out with a short why, but with a long list of issues which point to breaches. Now we dive into how it works, and we go hands on right away - we create a namespace, and then spin up an ordinary webserver container. We then slap a label onto the namespace, and it immediately alerts us that our container is non-conforming. Interestingly, if we deploy a new webserver, the deployment is created by the container fails to create as it violates the policy. They then show the policy bits required in YAML to actually be able to create a container. Good hands on, quick walkthrough.
BottomLine: Hands on walkthrough of using labels to enforce Pod Security
==
URL reference: https://medium.com/@seifeddinerajhi/kubernetes-rbac-privilege-escalation-exploits-and-mitigations-26c07629eeab
DateReviewed: 2023-10-16
Description: We start with K8s being an awesome orchestrator, but security can have nuance in a complex system. Our article postulates there are seven priv escalations in the K8s system, and we're going to work through them. They start with a general vector, explain what it does and what some of the exposures are, walks through some example exploits and then explains some mitigations. In the body, they go into some detail, including on pod creation, service account token handling, and cluster node access, among others. It gives good coverage, without getting too low level.
BottomLine: Good overview of various vulnerabilities in Kubernetes and how to mitigate
==
URL reference: https://blog.ugulino.com/posts/10_oct_23/
DateReviewed: 2023-10-17
Description: In this article, rather than talking about K8s, we're going to find out about a building block of containers - cgroups. Control groups, or cgroups as they are known in the system, allow us to restrict what a process can do under Unix. Mainly they deal with how much CPU, memory and network I/O a process can use. The way this is controlled is with files located under /sys/fs/group, and they are arranged by resource. Each process comes with a cgroup, and if we want to fiddle, we need to create a new cgroup. When we spawn a container, it creates the cgroups needed to control the container. Overall, an interesting intro
BottomLine: Quick walkthrough of how cgroups work under containers
==
