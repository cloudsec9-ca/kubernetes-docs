
URL reference: https://dev.to/eren_yeager/exploring-kubernetes-what-it-is-key-features-and-how-it-powers-devops-1gn3
DateReviewed: 2024-12-01
Description: This article is an intro to Kubernetes and DevOps. We start with an overview of Kubernetes, where it talks a bit of history and then gets into the nitty gritty of K8s, talking about lifecycles and nodes among other things. It goes through an 8-point list of K8s features, each getting a good sentence of explaination. We then look in DevOps and DevSecOps, explaining what they are, and how they improve the management of resources. They talk about CI/CD, and then IaC as tools to help this. We then touch on prog lans supporting K8s, with a list of the 8 most common. The article mentions parent company, but they mean current owner, and explain how it started as a Google project but now is under the CNCF umbrella. We end up with talk about open-source versions of K8s compared with managed versions like at a cloud provider. Has some insights, but the formatting is a bit odd.
BottomLine: Decent intro to Kubernetes and DevOps in general
==
URL reference: https://thenewstack.io/cloud-native-networking-as-kubernetes-starts-its-second-decade/
DateReviewed: 2024-12-02
Description: This is a prediction post, at the milestone of Kubernetes being 10 years old. There are some strong predictions - that eBPF will play a major role going forward, and that OpenTelemetry will vie for a spot in the monitoring of Kubernetes stuff. There is some introspection about things like Ingress and service meshes. With the new Gateway API emerging, they argue it's time to move on from traditional Ingress. There is a bit of coverage here on AI as it relates to Kubernetes networking; they break it into two parts. They also talk a bit about a new rev to CNI vs possibly evolving to something like Kubernetes network drivers. An interesting piece to read.
BottomLine: Some interesting discussions on the future of Kubernetes now that it has reached ten years
==
URL reference: https://faun.pub/how-kubernetes-health-checks-keep-your-apps-running-159d762a4ea3
DateReviewed: 2024-12-03
Description: This article goes over Kubernetes health checks with probes - to see if your app ecosystem is working. We start with a definition of probe, and then a quick overview of the three main probe types - liveness, readiness, and startup. For each time, we get a purpose, how it works and when to use, and wrapped up with an example. There are even diagrams! We do a basic config runthrough for a probe, and then they do a "demo" to show how this works in real life. They spin up some pods, and disable the liveness probe, which they then trace through to see a restart. Actually a decent treatment.
BottomLine: Goes through different Kubernetes probes, and then shows a demo of them
==
URL reference: https://www.cncf.io/blog/2024/11/08/kubernetes-rbac-improve-the-k8s-security-posture/
DateReviewed: 2024-12-04
Description: The focus of this article is how to improve Kubernetes security by strengthening RBAC. We start with a discussion of K8s, and we get links to arch and workload discussions. They then contrast deploying a monolithic app vs deploying a K8s one, and how being distributed impacts things. Next we have a bit of a thread about how not all K8s users need to be full admins, but rather just access to the resources they are developing or deploying. They mention things like time-based tokens, as well as limiting the impact of say a dev's creds getting leaked, if things are set up right. They talk a bit more about RBAC, and introduce the objects - Roles, RoleBindings, ClusterRole, ClusterRoleBinding and ServiceAccounts. They then walk us through how to set up a user to authenticate with a certificate. Next, we are walked though permissions, specifically creating a role (or cluster role) to allow something, and then using a role binding to attach that role to a user, giving them the permission. They then talk a bit about User and Service accounts, and what the purpose of each is. To wrap up, we go through some of the challenges with K8s RBAC, with a small plug for a package called Devtron which can help with this. Decent coverage of a hard topic.
BottomLine: Decent intro to RBAC for Kubernetes security
==
URL reference: https://thenewstack.io/magic-is-happening-in-kubernetes/
DateReviewed: 2024-12-05
Description: This article will talk about OpenShift, and how Kubernetes supports that software. We start with a bit of author background before diving into OpenShift from Red Hat, and what types of things it enables. They note that it is a variety of tech that it makes work, both UDP and TCP, from all areas and doing lots of things. They do mention AI driving better access to hardware accels like GPUs, and how things like dynamic resource allocation work. They touch on things like LeaderWorkingSet and security stuff lik Zero trust. So, my take - this is a decent topic but not really done well. There is lots of things going on but the coverage is a word or two here. I think it would be better to have a longer piece, or have a short intro which leads to longer pieces.
BottomLine: Maybe too quick a survey of the OpenShift and Kubernetes landscape
==
URL reference: https://hackernoon.com/what-kubernetes-network-plugin-should-you-use-a-side-by-side-comparison
DateReviewed: 2024-12-06
Description: This article is a test of which Kubernetes network plugin you should use. I've read a couple of these, and usually they are fluff -- this one is an actual test with benchmarks. We start with a bit of background and identify the 4 that we'll be testing - Flannel, Cilium, Calico and Canal. They give the hardware setup too, so you can see how things are set up. For each plugin, we get a short blurb, a point-form key features section and then a working principle section, along with a architecture diagram. They put it through 5 different networking tests, and honestly they were all competitive in most of them. Some of them had slight edges in certain tests, but they didn't vary that widely. They then looked at RAM and CPU utilization, and most were close but Cilium used almost double the RAM and CPU. Well done test and article!
BottomLine: Recommended read testing various network plugins for Kubernetes
==
URL reference: https://thenewstack.io/how-to-stop-worrying-and-start-loving-databases-on-kubernetes/
DateReviewed: 2024-12-07
Description: This article tries to address some of the concerns surrounding running databases on Kubernetes. We start the meat of the article by looking at the operator pattern, which we are told is for managing stateful workloads. They point out that there are a number of operators for each DB, so this could mean different teams running the same DB have different implementations, which could cause issues. They do try emphasize that running older operator is an advantage, as they may have better coverage of edge cases. The draw out a number of essentials in a DB - backups, monitoring, disaster recovery, high availability and connection scaling. Each get a para of discussion on what an operator needs to do to address this, and how they tend to do so. Next up, we look at "cloud native" considerations, and these include - disk storage solutions, backups and object storage, ease of use and scalability, and finally upgrades and maint -- and again, a para for each topic. They end with some words about how it is no longer a concern to run DBs on K8s.
BottomLine: Decent intro to running DBs on Kubernetes
==
URL reference: https://compile.hashnode.dev/default-vs-custom-serviceaccounts-securing-api-access-for-kubernetes-pods
DateReviewed: 2024-12-08
Description: This article will dive into Service Accounts, and show us the difference between the Default account and Custom Service accounts. We start by a bit of info on what Service Accounts are and how they work, basically allowing a Pod to talk to the K8s API. They explain this is simiilar to a user account, and is so pods or other resources can be allowed or denied from various API activites. There is a default account per namespace, and if you don't specify when creating a pod you then get this default. Basically this means that a pod has full access inside a namespace, which might be more permissions than you want to grant. Now we go on a step by step process of creating a custom service account - they use the CLI to create it, then a bit of YAML to associate it with a pod, then going through the RBAC mechanism to give the custom account the access you want. Good walkthrough, decent explaination.
BottomLine: Good and easy to understand explaination of Custom service accounts on Kubernetes
==
URL reference: https://www.wiz.io/blog/kubernetes-data-plane
DateReviewed: 2024-12-09
Description: This is an exploration of Kubernetes security in an AI adjacent environment. We start with a ref to an earlier article which looked at control planes, where this article looks at data planes. We start with a diagram, and there are some pretty ones throughout. We dive in to talk about applications, and they do mention that any app can have code issues that allow attackers access, like RCE. They also talk about priv. escalation, which helps after establishing an intial foothold. After talking about the issues, they then talk about steps you can take to prevent this, including using least privs and building good security boundries. They walk through NodePort service, noting that it isn't used in production much, and enumerate some of the security concerns there. Next up they talk about images and supply chain security, with a few solid recommendations. Finally, they tackle "execution as a service", where K8s runs some 3rd party binary, usually to access an AI model or similar. They liken it to executing arbitrary code, as the prompts that are passed are not controlled by our app. They outline ways to mitigate the possible impact of AI-facing attacks.
BottomLine: Interesting security areas involving Kubernetes are discussed.
==
URL reference: https://medium.com/@s.atmaramani/mastering-kubernetes-top-40-one-liner-commands-8503d55cdcd4
DateReviewed: 2024-12-10
Description: This article is about upping your game, from using YAML files to being able to control Kubernetes through CLI kubectl commands. It's a bit of a walk through, and we start with just simply spinning up a Pod. Next we allow those outside our K8s cluster access to our webserver. We then do a couple pod commands, one to show all pods and one to get details of a single pod. We then look at getting logs from a pod, and cleaning up by deleting a pod. Next we look at scaling, by adding replicas and then looking how we can do updates to pods. We then peek into how we get a shell on a pod, to do troubleshooting. It goes on like this; into a thing, give the CLI command, and a short explaination of what is going on, for 40 commands. Actually a good primer into K8s CLI!
BottomLine: Decent quick walkthrough of a lot of Kubernetes CLI commands that are useful
==
URL reference: https://cloudnativenow.com/topics/cloudnativedevelopment/a-nose-for-a-node-perfectscale-streamlines-kubernetes-optimization/
DateReviewed: 2024-12-11
Description: Since Kubernetes is complex, this article claims that it constantly needs optimizaation, and remarkably, the tool they talk about is the right choice to provide this optimization. The tool they talk about is PerfectScale. They talk about node-level optimization, where the seeming focus is on allocating the right CPU and GPU power, alongside memory and storage, to ensure Kubernetes worker nodes are right-sized. They point to "wastage" of 30 or even 50%, but without explaining exactly what is being wasted. They focus on "pinpointing idle capacity and planning budgets effectively". But we don't get any insight here into what idle capacity means, or how costing is working -- there are no technical details. With that, they then pivot to AI, which is using more GPU then CPU. Apparently it's using up 75% of hourly cloud costs, which might be a decent estimate. They do mention misconfigs can cause instability, so you don't want to over or underprovision by too much. While the message is solid, there is near zero tech info to inform a decision; so not a great article.
BottomLine: Skippable article on a solid topic - managing GPU and Kubernetes costs
==
URL reference: https://collabnix.com/how-to-generate-your-sbom-from-docker-images/
DateReviewed: 2024-12-12
Description: This article talks about generating an SBOM, which is an inventory of dependencies, from your container images. We dive right in with a description of what comprises an SBOM, and then move on to the tool they are going to use to generate the SBOM - Docker Scout. A quick word on why we want SBOMs, and then the CLI command to generate an SBOM from Scout in JSON. We get a couple of output format variations, before looking at how to save it to a file. Helpfully, they show how to generate an SBOM during the build process, by adding a few parameters to the Docker build command. They mention that Scout works with local images, image tarballs and also registry images. This is a great quick walkthrough - recommended.
BottomLine: Recommended walkthrough on using Docker to create SBOMs
==
URL reference: https://developers.redhat.com/learn/openshift/develop-containers-using-podman-desktop-and-kubernetes?sc_cid=7015Y000003sfSfQAI
DateReviewed: 2024-12-13
Description: A short article which is the intro to a lab on developing containers with Podman Desktop and Kubernetes. Starts with a general background, then we get an intro into the various bits. They go through the Pre-reqs to run, and then a motivation of what is being done in the learning. They tell us the general length of the lab and the learning objectives, and mention it will be using Python as the programming language. Very interesting!
BottomLine: Short setup for a lab to do development of containers with Podman
==
URL reference: https://medium.com/@a.najarian/how-to-deploy-batfish-on-kubernetes-with-helm-and-gitlab-ci-cd-pipeline-5236da996956
DateReviewed: 2024-12-14
Description: This article is about Batfish, a network simulation and validation tool, and how to deploy it. We start with "what is" sections for both K8s and Helm, so not targeted only at K8s vets here. Next up is pre-reqs, and it's basically a K8s cluster, Helm, and a CI/CD system. We then dive into the Helm YAML to build and deploy Batfish, with explainations. Then some K8s YAML for templates, and we're ready to deploy with the Helm chart, and finish this off by confirming it is running. Next up is CI/CD, with some more YAML, and finally we have a snippet of Python that allows us to interact with Batfish. Decent walkthrough.
BottomLine: Install and basic walkthough of Batfish network sim on Kubernetes
==
URL reference: https://koho.dev/achieving-zero-downtime-how-we-upgraded-our-postgres-clusters-at-koho-c6403d7d519d
DateReviewed: 2024-12-15
Description: This article will tackle the issues around upgrading a PostgreSQL database without downtime. They talk a bit about options other databases have, but point out that Postgres doesn't have these in their present version. They then explain why it's so important to not have downtime, as they are a payments provider. So, they explain some various approaches, and detailed the pros and cons. They covered logical replication, AWS Database Migration Service (DMS), and finally partitioned tables. They then go through how partitioning works with some examples. They also go through DMS validation and foreign keys and secondary indexes. Finally, they talk a bit about cutover and consistency. They then outline the three steps - set up a replica, do a tune up - make sure data is all okay, and finally do the cutover. All in all, a decent walkthrough.
BottomLine: Outlines approaches to do a no downtime upgrade of a PostgreSQL database.
==
URL reference: https://itnext.io/k8studio-cloudmaps-using-maps-to-master-kubernetes-observability-c879a49440d4
DateReviewed: 2024-12-16
Description: This article is going to try and help us simplify the complexity buried in Kubernetes resources through visualization. The folks at K8Studio use something called maps to help visualize data, and they bring that approach to K8s. They have a new representation called CloudMaps to show the status of your K8s cluster, and surface the various objects and allow you to drill down on them. At the top level you see all resources organized by application name; then you can zoom in on a component, seeing all of the objects that make up an area, like pods, storage and things like ingress. It also includes things like a timeline, showing events related to the object in chrono order, along with things like metrics and ability to edit with th Quick editor and the YAML editor. It's an interesting approach and worth looking into.
BottomLine: Interesting new way to look at Kubernetes resources - CloudMaps
==
URL reference: https://medium.com/@averageguymedianow/exploring-alternatives-to-kubernetes-pros-and-cons-3b33b7d1ba5d
DateReviewed: 2024-12-17
Description: This article will go through a number of alternatives to Kubernetes - some workalikes or clones, others a bit different. Our article lists an alternate and gives us some background, then lists the various pros and cons of each. They walk through Docker Swarm, Nomad, OpenShift, Apache Mesos and Marathon, AWS ECS, Cilium and Rancher. To wrap up, they have ones the recommend for a number of situtations, depending on your use case. 
BottomLine: Short overview of alternatives - good for research and a quick intro
==
URL reference: https://devtoolhub.com/stateful-vs-stateless-applications-in-kubernetes/
DateReviewed: 2024-12-18
Description: In this article, they'll suss out the differences between stateful and stateless applications on Kubernetes. K8s started with a strong preference for stateless applications -- where there is logic and data, but no precious state to be preserved between requests. This is ideal for things like a static website, or an app where everything is defined in the request. Stateful applications, on the other hand, is where you have a flow of info and you have to keep track of, like a shopping cart. They go through these definitions, then talk about how these are treated in Kubernetes with a YAML snip showing how they are specified. They have a short list of apps of each type, and then they wrap.
BottomLine: Short but effective comparison of stateful vs stateless apps on Kubernetes
==
