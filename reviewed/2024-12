
URL reference: https://dev.to/eren_yeager/exploring-kubernetes-what-it-is-key-features-and-how-it-powers-devops-1gn3
DateReviewed: 2024-12-01
Description: This article is an intro to Kubernetes and DevOps. We start with an overview of Kubernetes, where it talks a bit of history and then gets into the nitty gritty of K8s, talking about lifecycles and nodes among other things. It goes through an 8-point list of K8s features, each getting a good sentence of explaination. We then look in DevOps and DevSecOps, explaining what they are, and how they improve the management of resources. They talk about CI/CD, and then IaC as tools to help this. We then touch on prog lans supporting K8s, with a list of the 8 most common. The article mentions parent company, but they mean current owner, and explain how it started as a Google project but now is under the CNCF umbrella. We end up with talk about open-source versions of K8s compared with managed versions like at a cloud provider. Has some insights, but the formatting is a bit odd.
BottomLine: Decent intro to Kubernetes and DevOps in general
==
URL reference: https://thenewstack.io/cloud-native-networking-as-kubernetes-starts-its-second-decade/
DateReviewed: 2024-12-02
Description: This is a prediction post, at the milestone of Kubernetes being 10 years old. There are some strong predictions - that eBPF will play a major role going forward, and that OpenTelemetry will vie for a spot in the monitoring of Kubernetes stuff. There is some introspection about things like Ingress and service meshes. With the new Gateway API emerging, they argue it's time to move on from traditional Ingress. There is a bit of coverage here on AI as it relates to Kubernetes networking; they break it into two parts. They also talk a bit about a new rev to CNI vs possibly evolving to something like Kubernetes network drivers. An interesting piece to read.
BottomLine: Some interesting discussions on the future of Kubernetes now that it has reached ten years
==
URL reference: https://faun.pub/how-kubernetes-health-checks-keep-your-apps-running-159d762a4ea3
DateReviewed: 2024-12-03
Description: This article goes over Kubernetes health checks with probes - to see if your app ecosystem is working. We start with a definition of probe, and then a quick overview of the three main probe types - liveness, readiness, and startup. For each time, we get a purpose, how it works and when to use, and wrapped up with an example. There are even diagrams! We do a basic config runthrough for a probe, and then they do a "demo" to show how this works in real life. They spin up some pods, and disable the liveness probe, which they then trace through to see a restart. Actually a decent treatment.
BottomLine: Goes through different Kubernetes probes, and then shows a demo of them
==
URL reference: https://www.cncf.io/blog/2024/11/08/kubernetes-rbac-improve-the-k8s-security-posture/
DateReviewed: 2024-12-04
Description: The focus of this article is how to improve Kubernetes security by strengthening RBAC. We start with a discussion of K8s, and we get links to arch and workload discussions. They then contrast deploying a monolithic app vs deploying a K8s one, and how being distributed impacts things. Next we have a bit of a thread about how not all K8s users need to be full admins, but rather just access to the resources they are developing or deploying. They mention things like time-based tokens, as well as limiting the impact of say a dev's creds getting leaked, if things are set up right. They talk a bit more about RBAC, and introduce the objects - Roles, RoleBindings, ClusterRole, ClusterRoleBinding and ServiceAccounts. They then walk us through how to set up a user to authenticate with a certificate. Next, we are walked though permissions, specifically creating a role (or cluster role) to allow something, and then using a role binding to attach that role to a user, giving them the permission. They then talk a bit about User and Service accounts, and what the purpose of each is. To wrap up, we go through some of the challenges with K8s RBAC, with a small plug for a package called Devtron which can help with this. Decent coverage of a hard topic.
BottomLine: Decent intro to RBAC for Kubernetes security
==
URL reference: https://thenewstack.io/magic-is-happening-in-kubernetes/
DateReviewed: 2024-12-05
Description: This article will talk about OpenShift, and how Kubernetes supports that software. We start with a bit of author background before diving into OpenShift from Red Hat, and what types of things it enables. They note that it is a variety of tech that it makes work, both UDP and TCP, from all areas and doing lots of things. They do mention AI driving better access to hardware accels like GPUs, and how things like dynamic resource allocation work. They touch on things like LeaderWorkingSet and security stuff lik Zero trust. So, my take - this is a decent topic but not really done well. There is lots of things going on but the coverage is a word or two here. I think it would be better to have a longer piece, or have a short intro which leads to longer pieces.
BottomLine: Maybe too quick a survey of the OpenShift and Kubernetes landscape
==
URL reference: https://hackernoon.com/what-kubernetes-network-plugin-should-you-use-a-side-by-side-comparison
DateReviewed: 2024-12-06
Description: This article is a test of which Kubernetes network plugin you should use. I've read a couple of these, and usually they are fluff -- this one is an actual test with benchmarks. We start with a bit of background and identify the 4 that we'll be testing - Flannel, Cilium, Calico and Canal. They give the hardware setup too, so you can see how things are set up. For each plugin, we get a short blurb, a point-form key features section and then a working principle section, along with a architecture diagram. They put it through 5 different networking tests, and honestly they were all competitive in most of them. Some of them had slight edges in certain tests, but they didn't vary that widely. They then looked at RAM and CPU utilization, and most were close but Cilium used almost double the RAM and CPU. Well done test and article!
BottomLine: Recommended read testing various network plugins for Kubernetes
==
URL reference: https://thenewstack.io/how-to-stop-worrying-and-start-loving-databases-on-kubernetes/
DateReviewed: 2024-12-07
Description: This article tries to address some of the concerns surrounding running databases on Kubernetes. We start the meat of the article by looking at the operator pattern, which we are told is for managing stateful workloads. They point out that there are a number of operators for each DB, so this could mean different teams running the same DB have different implementations, which could cause issues. They do try emphasize that running older operator is an advantage, as they may have better coverage of edge cases. The draw out a number of essentials in a DB - backups, monitoring, disaster recovery, high availability and connection scaling. Each get a para of discussion on what an operator needs to do to address this, and how they tend to do so. Next up, we look at "cloud native" considerations, and these include - disk storage solutions, backups and object storage, ease of use and scalability, and finally upgrades and maint -- and again, a para for each topic. They end with some words about how it is no longer a concern to run DBs on K8s.
BottomLine: Decent intro to running DBs on Kubernetes
==
