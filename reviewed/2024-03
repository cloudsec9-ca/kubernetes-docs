URL reference: https://vahid-r.com/posts/kubernetes-passwords/
DateReviewed: 2024-03-01
Description: Kubernetes is great, but security is blah because of .. hard coded passwords in Helm, is how we start. So we dive in, and they observe that usernames and passwords are encoded in base64, but they are easily decoded. They give a few ways to avoid this, including K8s secrets, external config, Helm values and even encrypted secrets. I think the big takeaway here is not to let your secrets be committed to a repository, and to use the most secure method to hide them you can.
BottomLine: Good discussion of password issues in the context of Kubernetes and Kubernetes tools -- Helm in this case
==
URL reference: https://aws.plainenglish.io/how-to-get-versions-of-all-your-add-ons-in-aws-eks-cluster-15486e1238fd
DateReviewed: 2024-03-02
Description: Here we are going to look at the managed K8s service EKS from AWS - paticularly, the add-on part of it. We dive right in to understand add-ons, which are thing like networking solutions or monitoring tools that build on the base K8s functionality. This is a hands on, so you need an account and the right perms; we start with listing the add ons with the right CLI command. We then dive deeper with another command to grab details. They also show how to query using Helm and ConfigMaps. Actually an interesting topic.
BottomLine: Good intro to AWS EKS and how you might manage versions of add ons you might install
==
URL reference: https://www.linkedin.com/pulse/maximize-kubernetes-security-automate-tls-certificate-management-jatoc/
DateReviewed: 2024-03-03
Description: TLS and SSL are important in securing K8s comms, so we have to worry about how we issue certificates; this article focuses on that, using KIND and cert-manager. We dive right in with short intros to cert-manager then KIND. We then jump to the CLI, and spin up a KIND cluster, and then use CRDs and Helm to prepare for the install cert-manager and the jetstack repo. We do some Helm housekeeping and install cert-manager. We then go through the process of setting up automatic certs via a ClusterIssuer with YAML to cert-manager. We then tour another YAML to generate an actual cert. We then go through the process of setting up ingress and having certs created automatically that way, and thereby allowing external communications to the cluster. Again, more YAML is shown with explainations on how things work. Actually an interesting walk through.
BottomLine: Walk through on automating certs in Kubernetes
==
URL reference: https://rajeshgheware.medium.com/navigating-the-shift-mastering-pod-security-in-kubernetes-0d4df9bf73e1
DateReviewed: 2024-03-04
Description: We start with Kubernetes is rapidly evolving and security remains   a big concern. The article will focus on one aspect of security, namely Pod security admission (PSA), the successor to PSP or Pod Security Policies. We dive in to a quick background of what PSA does, then talk about how it works with its three predefined levels - privileged, baseline and restricted, with a sentence on each. Now onto how to make it work, and a bit of hand on. We travel through a three step process with YAML and CLI commands, activating PSA, defining Namespace labels and finally configuring the level we want to apply to the namespace. They then go through a quick example, with a restricted manifest. They explain the advantages and strategies for adopting PSA before wrapping up. Short but a good exposition and approach.
BottomLine: Good intro and walkthrough of Pod Security admission on Kubernetes
==
URL reference: https://cloud.google.com/kubernetes-engine/docs/deploy-app-cluster
DateReviewed: 2024-03-05
Description: This is a tutorial on how to get a basic app working on Google Kubernetes Engine, or GKE. We dive right in with the pre-reqs, which is setting up a Google account. They then walk through creating a project and enabling API access. Then then show how to set up cloud shell and configure so you can access your project. Next up they spin up a GKE cluster, and then grab the auth details needed to admin it through kubectl. We are now in Kubernetes, so next they create a deployment with a CLI command and explain it. Then they expose the deployment, so you have access from the Internet. We then verify our app is running in a pod and check the deployed service seems okay. Finally we can surf to the target IP. To conclude, they show how to clean up the service in K8s and also how to delete the cluster to not incur charges. The have an optional bit, where they show you the code, in what I think is a way to allow you to see and modify a bit of code that is K8s deployable.
BottomLine: Good to the point walkthrough on setting up a Kubernetes cluster on GKE
==
