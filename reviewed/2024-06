URL reference: https://securityboulevard.com/2024/05/how-old-are-your-kubernetes-nodes/
DateReviewed: 2024-06-01
Description: This is a great article, focused on the age of your Kubernetes nodes. It can be easy to forget that the node OS is important when dealing with containers, as we are usually focused on that level of security. They advance 5 overall reasons for keeping on top of node age - Vulnerabilities, performance degradation, new features, resource optimization and maint and reliability. Each of these get a paragraph, with some getting several describing why you need to keep on top of this around each. They then tackle how to monitor node age, and finally how to plan node upgrades. Overall a good piece.
BottomLine: Higher level piece about why the age of your Kubernetes node OS matters, and strategies for staying on top of this
==
URL reference: https://wetransfer.com/engineering/upgrading-kubernetes-from-1-11-to-1-18-in-a-month/
DateReviewed: 2024-06-02
Description: Older article about the challenges of upgrading several Kubernetes versions up at a time. They start recounting what went on - getting onboard, then getting things worked out, while not doing any K8s updates for a few years. They found themselves on 1.11, where the main ver was 1.18. They then go through their setup of dev/prod and how they are set up in their provider, along with what their devs can do when developing. Finally they cover their CI/CD, which covers infra updates but doesn't yet cover K8s updates. They then outline their plan, with rationale and details of why this was what they chose. They considered changes in API, compatibility, what might be affected and then would do a "rehersal" in a small dev enviornment. They also had to do things like tool configs backups, until they reached a version that did this automatically. For comms, they created a new slack channel and used it to record actions. They then enumerate their plan, which is a dev upgrade followed by a staging upgrade, regression tests and once everything good finally the prod upgrade. They then run through how their initial upgrade went, as they'll have to do some incremental upgrades to get to the latest rev. There were some special settings required for the initial, as things were old and bits needed tweaking, but finally they got the initial upgrade done. They also detail each step after with a paragraph summary, which explains what they did and any wrinkles they encountered. They have a lessons learned for others that might need to do this. Overall a great read.
BottomLine: Walkthrough of upgrading a serious but old version of Kubernetes to a more recent version
==
URL reference: https://medium.com/@tamerbenhassan/why-understanding-ingress-and-network-policies-is-crucial-for-kubernetes-security-906a04debe23
DateReviewed: 2024-06-03
Description: This article is an explainer on the differences between Ingress and Network policies. We start with Ingress, which they explain as "the front door to your Kubernetes cluster". They then show the YAML needed to configure a couple services, with a brief explainer. In contrast, Network policies are security guards inside you K8s cluster. They check which pods can talk to one another, ensuring only needed comms is allowed. Again, we have a YAML file with a short explainer. We even go through a scenario and some usage tips. Great for an intro!
BottomLine: Comparison between Ingress and Network policy on Kubernetes
==
