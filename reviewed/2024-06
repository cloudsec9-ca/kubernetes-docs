URL reference: https://securityboulevard.com/2024/05/how-old-are-your-kubernetes-nodes/
DateReviewed: 2024-06-01
Description: This is a great article, focused on the age of your Kubernetes nodes. It can be easy to forget that the node OS is important when dealing with containers, as we are usually focused on that level of security. They advance 5 overall reasons for keeping on top of node age - Vulnerabilities, performance degradation, new features, resource optimization and maint and reliability. Each of these get a paragraph, with some getting several describing why you need to keep on top of this around each. They then tackle how to monitor node age, and finally how to plan node upgrades. Overall a good piece.
BottomLine: Higher level piece about why the age of your Kubernetes node OS matters, and strategies for staying on top of this
==
URL reference: https://wetransfer.com/engineering/upgrading-kubernetes-from-1-11-to-1-18-in-a-month/
DateReviewed: 2024-06-02
Description: Older article about the challenges of upgrading several Kubernetes versions up at a time. They start recounting what went on - getting onboard, then getting things worked out, while not doing any K8s updates for a few years. They found themselves on 1.11, where the main ver was 1.18. They then go through their setup of dev/prod and how they are set up in their provider, along with what their devs can do when developing. Finally they cover their CI/CD, which covers infra updates but doesn't yet cover K8s updates. They then outline their plan, with rationale and details of why this was what they chose. They considered changes in API, compatibility, what might be affected and then would do a "rehersal" in a small dev enviornment. They also had to do things like tool configs backups, until they reached a version that did this automatically. For comms, they created a new slack channel and used it to record actions. They then enumerate their plan, which is a dev upgrade followed by a staging upgrade, regression tests and once everything good finally the prod upgrade. They then run through how their initial upgrade went, as they'll have to do some incremental upgrades to get to the latest rev. There were some special settings required for the initial, as things were old and bits needed tweaking, but finally they got the initial upgrade done. They also detail each step after with a paragraph summary, which explains what they did and any wrinkles they encountered. They have a lessons learned for others that might need to do this. Overall a great read.
BottomLine: Walkthrough of upgrading a serious but old version of Kubernetes to a more recent version
==
URL reference: https://medium.com/@tamerbenhassan/why-understanding-ingress-and-network-policies-is-crucial-for-kubernetes-security-906a04debe23
DateReviewed: 2024-06-03
Description: This article is an explainer on the differences between Ingress and Network policies. We start with Ingress, which they explain as "the front door to your Kubernetes cluster". They then show the YAML needed to configure a couple services, with a brief explainer. In contrast, Network policies are security guards inside you K8s cluster. They check which pods can talk to one another, ensuring only needed comms is allowed. Again, we have a YAML file with a short explainer. We even go through a scenario and some usage tips. Great for an intro!
BottomLine: Comparison between Ingress and Network policy on Kubernetes
==
URL reference: https://devopsvoyager.hashnode.dev/exploring-kubernetes-api-groups-and-versions
DateReviewed: 2024-06-04
Description: Kubernetes is powerful, but to understand its power, you have to understand the API and the groups and versions that make up it's structure. This article will do that. So, there are two API groups - core and named, and they'll take us through both. They go into a bit of explaination, but basically core are the main K8s functions, and named are the extensions which can be added to the core. So the main K8s resources - like pods, nodes, services and namespaces - are part of the core. Everything else falls into named, and by putting them here can be extended. We then go through some samples, including YAML snips, to see the differences and even the URLs that the various APIs use. So, I thought this might be a fluffy piece at first, but it really helped me to understand a bit more on the K8S APIs.
BottomLine: Solid piece explaining core vs named in the Kubernetes APIs
==
URL reference: https://medium.com/@tamerbenhassan/securing-your-kubernetes-pods-a-beginners-guide-to-security-contexts-94a5924e764e
DateReviewed: 2024-06-05
Description: Running Kubernetes? Then you apparently know how important security is. This article runs through security contexts. We start with quick chats about what security context are and why you want them, and then we are on to scenarios to use them. They cover five scenarios - running as non-root, disabling priv escalation, read-only root filesystem, setting linux capabilities and using Seccomp profiles. For each, we get a one sentence intro, a YAML snip with the context, and a what it does section that explains the YAML. To tie it all together, they present one last YAML snip with all of the contexts we went through before integrated together in a single file. Decent intro to the topic.
BottomLine: Solid beginner piece on security contexts for Kubernetes
==
URL reference: https://www.infoworld.com/article/3715489/how-kubernetes-succeeded.html
DateReviewed: 2024-06-06
Description: On the 10th anniversary of Kubernetes, this is an article on what helped it to become successful. They being with a handwave to the beginings of K8s inside of Google, before talking about some of the alternatives in 2014. It started with a tight focus, mainly being stateless applications, which wasn't the main way most workloads functioned at that time. But K8s evolved, it got things like StatefulSets and Operators which helped to support stateful workloads. There was even a push for databases to run on K8s, with work done by orgs like Data on Kubernetes. Next we talk about the role of Open Source in K8s, and how it helped develop the community. We wrap with more work needed, and the thought that there is more to come.
BottomLine: Decent reflection on the tenth birthday of Kubernetes
==
URL reference: https://dzone.com/articles/key-benefits-of-integrating-password-managers
DateReviewed: 2024-06-07
Description: Kubernetes is great, but managing passwords can be a challenge, so this article argues we should integrate password managers into the mix. They advance that password managers have secure data storage, safe password exchange and MFA -- all good things. They also argue that credentials can be automatically rotated, which is also a good thing. And many systems have audit and other things like GDPR or HIPAA compliance baked in. They argue that it can even be integrated with a SIEM to detect and mitigate weak passwords. So, my main issue with this is that they don't have a practical example at any point. I mean, maybe there is such a manager out there, but I don't know any tools that do automatic rotation at the moment, out of the box.
BottomLine: Good idea of using Password managers with Kubernetes - but doesn't talk about any specific one
==
URL reference: https://medium.com/@Kannan91/linux-namespaces-and-cgroups-43d9b6c0eb72
DateReviewed: 2024-06-08
Description: While not directly Kubernetes related, this article talks about the building blocks for all containers - Linux cgroups and namespaces. They start by explaining how these are used for process management in the Linux kernel, and then dive into the namespace area. They then name some of the various namespace areas, along with a paragraph of description on each. The idea is limits and isolation on each namespace, to better manage a (group) of processes. Next up is cgroups, or control groups, and how child processes generally inherit the cgroup limits of their parents. They talk a bit more about what and how cgroups work. Now that we have the basics, there is a bit of a namespace vs cgroups study, where they draw out how they are different on a number of levels. Namespace is about what a process has visibility to, and cgroups are how to limit processes, at a high level. They go through purpose, functionality, isolation vs management and some use cases. A great intro to the basis for containers!
BottomLine: Examining the building blocks in Linux that containers are formed from - cgroups and namespaces
==
URL reference: https://medium.com/@ostridelabs/kubernetes-and-infrastructure-as-code-iaac-simplified-a-comprehensive-guide-for-deployment-9c1c63879bb2
DateReviewed: 2024-06-09
Description: Kubernetes is the main way to orchestrate containers -- and the way to do it efficiently is with IaC. We start with a long paragraph touting IaC and Kubernetes strengths, but in an abstract way. We move on to a section called K8s - the backbone of container orchestration, but there is a lot of hand waving about what it does without really getting to a unique point. And, this is the theme of the entire article. It promises something, but delivers only the basic info at the highest level. I'd almost say it's a padded AI written piece, but that might even be giving it too much credit. There is a nugget here or there, but it could be 1/3 as long and say the same thing.
BottomLine: Long but way too fluffy piece on IaC with Kubernetes - avoid
==
URL reference: https://lobuhisec.medium.com/daemonsets-the-philosophers-stone-of-lazy-sysadmins-0183bae8a75d
DateReviewed: 2024-06-09
Description: DaemonSets are a way to run things on each node in Kuberenetes, and our article argues there are good and bad uses for this. They first talk a bit about what they are, and then we are shown the issue -- running with privs and not isolated. They say this can be an issue with monitoring agents like those used by Prometheus, which needs access to the underlying host and could expose vulns and opportunities for escalation and lateral movement. Their approach is to run the tools on the host directly, moving them out of the K8s domain entirely. It's an interesting approach, and one worth talking about at least.
BottomLine: Argues DaemonSets with privs can be security risks in Kubernetes
==
URL reference: https://medium.com/@0xAungkon/k3s-the-lightweight-kubernetes-solution-9b544e1e69c1
DateReviewed: 2024-06-10
Description: This article presents a lighter approach to Kubernetes called K3s. We jump in with a paragraph on what K3s is, which is a cut-down version of Kubernetes. We move right on to why, and they sum it up nicely - K3s is simpler, quicker, compatible and resource efficient - and they have a sentence to explain each of these. We're right on to the install, which I think is targeted at Linux as it is a curl piped to a shell. They then run a CLI command to verify things are running right. We next move on to connections with a database, where they show a snip of YAML on how to hook into yours. Next up is a Python snip to interact with your K3s install. We finish up with a walkthrough on getting it running in AWS and some links.
BottomLine: Good premise ok execution of intro to lightweight Kubernetes distro K3s
==
URL reference: https://securityonline.info/evolving-cryptojacking-campaign-targets-misconfigured-kubernetes-clusters/
DateReviewed: 2024-06-11
Description: We start with Kubernetes good, misconfigs allowing cryptojacking bad. We start with a diagram, and those are always good. We are then told the initial access vector is K8s API with anonymous auth enabled -- always a bad thing. Bad configs allow attackers to escalate, and gain control of the cluster. They then deployed cryptomining containers in various namespaces, with legit sounding names to obscure their actual purpose. Interestingly, by hardcoding things it made the miners evade command line detection techniques. After going through all of this, they have a list of mitigation best practices that target these miners, including diabling external cluster access, disabling anonymous cluster access, and regularly monitoring. Actually a decent walkthrough.
BottomLine: Good examination of recent cryptominer attacks against Kubernetes and some mitigations to prevent them
==
URL reference: https://monfardinel.medium.com/lens-is-the-postman-of-kubernetes-ides-a-journey-from-simplicity-to-bloatware-f5d4db018307
DateReviewed: 2024-06-12
Description: This article will talk about the rise and apparent fall of Postman and Lens and how they helped with APIs and Kubernetes management. Postman is an API tester, which helps devs create and document APIs. Lens is an IDE for K8s clusters, helping simplify monitoring and running clusters. The arguement is that they started lean and focused, but as they matured they added new features to broaden appeal. Postman added integration with other tools, making the app heavier and seemingly slower. Similarly, Lens added things like CI/CD integrations and support for multiple K8s distros, and this made it more complex and bloated. So, there is a bit more of this, and a suggestion to offer a "lite" version for users who want more performance. My take is there is a lot of complaints and suggestions, but not many stats or comparisons. I haven't used these tools, so the comments might be on point, but is it 30 seconds slower or has it gone from 3 to 8 seconds on starting up?
BottomLine: Skippable rant about how a couple tools for Kubernetes are getting slower
==
URL reference: https://github.com/kellyjonbrazil/microsim
DateReviewed: 2024-06-13
Description: This is the repo for a Microservice simulator, microsim. The idea is to simulate traffic for loading tests, balancing, WAF, attacks and other security uses. It's got install and example usage, a diagram on a deployment, along with config docs and defaults. Seems like a decent tool for all kinds of testing scenarios.
BottomLine: Traffic simulation tool for testing Kubernetes apps
==
URL reference: https://github.com/DataDog/managed-kubernetes-auditing-toolkit
DateReviewed: 2024-06-14
Description: This is the MKAT repo - Managed Kubernetes auditing toolkit. This is for K8s on AWS, and draws out perms granted by IAM roles to K8s service accounts. It does a bunch of auditing and other checks, and gives you an easy to read text output to understand what the issues might be.
BottomLine: Interesting tool for AWS based Kubernetes clusters
==
URL reference: https://blog.ant0i.net/2024/06/k8s-challengeredguardch.html
DateReviewed: 2024-06-15
Description: This is a blog post that is a walkthrough of a CTF. They connect to a jump-off host, and start with recon, to map out the network. It looks like a K8s cluster with 2 workers and a master. After a bit more digging, the managed to find a remote shell exposed. They then download a payload and execute it. With this, they then start to work on the K8s cluster; first, getting the ENV info to figure out how to connect to the API and then looking for weak perms. They find some login creds. The author tries to break out of the pod to the node, but is not successful.
BottomLine: Interesting walkthrough of a CTF attack on a Kubernetes cluster
==
URL reference: https://www.e-spincorp.com/what-is-container-security-and-issues/
DateReviewed: 2024-06-16
Description: It seems orgs are being turned into IT companies, and to do this they need do use containers. This article is an intro to all things containers. We start with a definition of containers, and then a journey through how they work, with a paragraph on some key topics. Next up we go through why containers help, and each topic gets about a paragraph of chat. We pivot to a discussion of applications, with four broad areas walked through with a large paragraph each. There is then a large section on container security. There are bits that are repetitive, but overall it's got decent info for a very early beginner.
BottomLine: A basic intro to containers basically from scratch at a high level
==
