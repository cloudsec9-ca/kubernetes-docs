URL reference: https://securityboulevard.com/2024/05/how-old-are-your-kubernetes-nodes/
DateReviewed: 2024-06-01
Description: This is a great article, focused on the age of your Kubernetes nodes. It can be easy to forget that the node OS is important when dealing with containers, as we are usually focused on that level of security. They advance 5 overall reasons for keeping on top of node age - Vulnerabilities, performance degradation, new features, resource optimization and maint and reliability. Each of these get a paragraph, with some getting several describing why you need to keep on top of this around each. They then tackle how to monitor node age, and finally how to plan node upgrades. Overall a good piece.
BottomLine: Higher level piece about why the age of your Kubernetes node OS matters, and strategies for staying on top of this
==
URL reference: https://wetransfer.com/engineering/upgrading-kubernetes-from-1-11-to-1-18-in-a-month/
DateReviewed: 2024-06-02
Description: Older article about the challenges of upgrading several Kubernetes versions up at a time. They start recounting what went on - getting onboard, then getting things worked out, while not doing any K8s updates for a few years. They found themselves on 1.11, where the main ver was 1.18. They then go through their setup of dev/prod and how they are set up in their provider, along with what their devs can do when developing. Finally they cover their CI/CD, which covers infra updates but doesn't yet cover K8s updates. They then outline their plan, with rationale and details of why this was what they chose. They considered changes in API, compatibility, what might be affected and then would do a "rehersal" in a small dev enviornment. They also had to do things like tool configs backups, until they reached a version that did this automatically. For comms, they created a new slack channel and used it to record actions. They then enumerate their plan, which is a dev upgrade followed by a staging upgrade, regression tests and once everything good finally the prod upgrade. They then run through how their initial upgrade went, as they'll have to do some incremental upgrades to get to the latest rev. There were some special settings required for the initial, as things were old and bits needed tweaking, but finally they got the initial upgrade done. They also detail each step after with a paragraph summary, which explains what they did and any wrinkles they encountered. They have a lessons learned for others that might need to do this. Overall a great read.
BottomLine: Walkthrough of upgrading a serious but old version of Kubernetes to a more recent version
==
URL reference: https://medium.com/@tamerbenhassan/why-understanding-ingress-and-network-policies-is-crucial-for-kubernetes-security-906a04debe23
DateReviewed: 2024-06-03
Description: This article is an explainer on the differences between Ingress and Network policies. We start with Ingress, which they explain as "the front door to your Kubernetes cluster". They then show the YAML needed to configure a couple services, with a brief explainer. In contrast, Network policies are security guards inside you K8s cluster. They check which pods can talk to one another, ensuring only needed comms is allowed. Again, we have a YAML file with a short explainer. We even go through a scenario and some usage tips. Great for an intro!
BottomLine: Comparison between Ingress and Network policy on Kubernetes
==
URL reference: https://devopsvoyager.hashnode.dev/exploring-kubernetes-api-groups-and-versions
DateReviewed: 2024-06-04
Description: Kubernetes is powerful, but to understand its power, you have to understand the API and the groups and versions that make up it's structure. This article will do that. So, there are two API groups - core and named, and they'll take us through both. They go into a bit of explaination, but basically core are the main K8s functions, and named are the extensions which can be added to the core. So the main K8s resources - like pods, nodes, services and namespaces - are part of the core. Everything else falls into named, and by putting them here can be extended. We then go through some samples, including YAML snips, to see the differences and even the URLs that the various APIs use. So, I thought this might be a fluffy piece at first, but it really helped me to understand a bit more on the K8S APIs.
BottomLine: Solid piece explaining core vs named in the Kubernetes APIs
==
URL reference: https://medium.com/@tamerbenhassan/securing-your-kubernetes-pods-a-beginners-guide-to-security-contexts-94a5924e764e
DateReviewed: 2024-06-05
Description: Running Kubernetes? Then you apparently know how important security is. This article runs through security contexts. We start with quick chats about what security context are and why you want them, and then we are on to scenarios to use them. They cover five scenarios - running as non-root, disabling priv escalation, read-only root filesystem, setting linux capabilities and using Seccomp profiles. For each, we get a one sentence intro, a YAML snip with the context, and a what it does section that explains the YAML. To tie it all together, they present one last YAML snip with all of the contexts we went through before integrated together in a single file. Decent intro to the topic.
BottomLine: Solid beginner piece on security contexts for Kubernetes
==
URL reference: https://www.infoworld.com/article/3715489/how-kubernetes-succeeded.html
DateReviewed: 2024-06-06
Description: On the 10th anniversary of Kubernetes, this is an article on what helped it to become successful. They being with a handwave to the beginings of K8s inside of Google, before talking about some of the alternatives in 2014. It started with a tight focus, mainly being stateless applications, which wasn't the main way most workloads functioned at that time. But K8s evolved, it got things like StatefulSets and Operators which helped to support stateful workloads. There was even a push for databases to run on K8s, with work done by orgs like Data on Kubernetes. Next we talk about the role of Open Source in K8s, and how it helped develop the community. We wrap with more work needed, and the thought that there is more to come.
BottomLine: Decent reflection on the tenth birthday of Kubernetes
==
URL reference: https://dzone.com/articles/key-benefits-of-integrating-password-managers
DateReviewed: 2024-06-07
Description: Kubernetes is great, but managing passwords can be a challenge, so this article argues we should integrate password managers into the mix. They advance that password managers have secure data storage, safe password exchange and MFA -- all good things. They also argue that credentials can be automatically rotated, which is also a good thing. And many systems have audit and other things like GDPR or HIPAA compliance baked in. They argue that it can even be integrated with a SIEM to detect and mitigate weak passwords. So, my main issue with this is that they don't have a practical example at any point. I mean, maybe there is such a manager out there, but I don't know any tools that do automatic rotation at the moment, out of the box.
BottomLine: Good idea of using Password managers with Kubernetes - but doesn't talk about any specific one
==
URL reference: https://medium.com/@Kannan91/linux-namespaces-and-cgroups-43d9b6c0eb72
DateReviewed: 2024-06-08
Description: While not directly Kubernetes related, this article talks about the building blocks for all containers - Linux cgroups and namespaces. They start by explaining how these are used for process management in the Linux kernel, and then dive into the namespace area. They then name some of the various namespace areas, along with a paragraph of description on each. The idea is limits and isolation on each namespace, to better manage a (group) of processes. Next up is cgroups, or control groups, and how child processes generally inherit the cgroup limits of their parents. They talk a bit more about what and how cgroups work. Now that we have the basics, there is a bit of a namespace vs cgroups study, where they draw out how they are different on a number of levels. Namespace is about what a process has visibility to, and cgroups are how to limit processes, at a high level. They go through purpose, functionality, isolation vs management and some use cases. A great intro to the basis for containers!
BottomLine: Examining the building blocks in Linux that containers are formed from - cgroups and namespaces
==
URL reference: https://medium.com/@ostridelabs/kubernetes-and-infrastructure-as-code-iaac-simplified-a-comprehensive-guide-for-deployment-9c1c63879bb2
DateReviewed: 2024-06-09
Description: Kubernetes is the main way to orchestrate containers -- and the way to do it efficiently is with IaC. We start with a long paragraph touting IaC and Kubernetes strengths, but in an abstract way. We move on to a section called K8s - the backbone of container orchestration, but there is a lot of hand waving about what it does without really getting to a unique point. And, this is the theme of the entire article. It promises something, but delivers only the basic info at the highest level. I'd almost say it's a padded AI written piece, but that might even be giving it too much credit. There is a nugget here or there, but it could be 1/3 as long and say the same thing.
BottomLine: Long but way too fluffy piece on IaC with Kubernetes - avoid
==
URL reference: https://lobuhisec.medium.com/daemonsets-the-philosophers-stone-of-lazy-sysadmins-0183bae8a75d
DateReviewed: 2024-06-09
Description: DaemonSets are a way to run things on each node in Kuberenetes, and our article argues there are good and bad uses for this. They first talk a bit about what they are, and then we are shown the issue -- running with privs and not isolated. They say this can be an issue with monitoring agents like those used by Prometheus, which needs access to the underlying host and could expose vulns and opportunities for escalation and lateral movement. Their approach is to run the tools on the host directly, moving them out of the K8s domain entirely. It's an interesting approach, and one worth talking about at least.
BottomLine: Argues DaemonSets with privs can be security risks in Kubernetes
==
URL reference: https://medium.com/@0xAungkon/k3s-the-lightweight-kubernetes-solution-9b544e1e69c1
DateReviewed: 2024-06-10
Description: This article presents a lighter approach to Kubernetes called K3s. We jump in with a paragraph on what K3s is, which is a cut-down version of Kubernetes. We move right on to why, and they sum it up nicely - K3s is simpler, quicker, compatible and resource efficient - and they have a sentence to explain each of these. We're right on to the install, which I think is targeted at Linux as it is a curl piped to a shell. They then run a CLI command to verify things are running right. We next move on to connections with a database, where they show a snip of YAML on how to hook into yours. Next up is a Python snip to interact with your K3s install. We finish up with a walkthrough on getting it running in AWS and some links.
BottomLine: Good premise ok execution of intro to lightweight Kubernetes distro K3s
==
URL reference: https://securityonline.info/evolving-cryptojacking-campaign-targets-misconfigured-kubernetes-clusters/
DateReviewed: 2024-06-11
Description: We start with Kubernetes good, misconfigs allowing cryptojacking bad. We start with a diagram, and those are always good. We are then told the initial access vector is K8s API with anonymous auth enabled -- always a bad thing. Bad configs allow attackers to escalate, and gain control of the cluster. They then deployed cryptomining containers in various namespaces, with legit sounding names to obscure their actual purpose. Interestingly, by hardcoding things it made the miners evade command line detection techniques. After going through all of this, they have a list of mitigation best practices that target these miners, including diabling external cluster access, disabling anonymous cluster access, and regularly monitoring. Actually a decent walkthrough.
BottomLine: Good examination of recent cryptominer attacks against Kubernetes and some mitigations to prevent them
==
URL reference: https://monfardinel.medium.com/lens-is-the-postman-of-kubernetes-ides-a-journey-from-simplicity-to-bloatware-f5d4db018307
DateReviewed: 2024-06-12
Description: This article will talk about the rise and apparent fall of Postman and Lens and how they helped with APIs and Kubernetes management. Postman is an API tester, which helps devs create and document APIs. Lens is an IDE for K8s clusters, helping simplify monitoring and running clusters. The arguement is that they started lean and focused, but as they matured they added new features to broaden appeal. Postman added integration with other tools, making the app heavier and seemingly slower. Similarly, Lens added things like CI/CD integrations and support for multiple K8s distros, and this made it more complex and bloated. So, there is a bit more of this, and a suggestion to offer a "lite" version for users who want more performance. My take is there is a lot of complaints and suggestions, but not many stats or comparisons. I haven't used these tools, so the comments might be on point, but is it 30 seconds slower or has it gone from 3 to 8 seconds on starting up?
BottomLine: Skippable rant about how a couple tools for Kubernetes are getting slower
==
URL reference: https://github.com/kellyjonbrazil/microsim
DateReviewed: 2024-06-13
Description: This is the repo for a Microservice simulator, microsim. The idea is to simulate traffic for loading tests, balancing, WAF, attacks and other security uses. It's got install and example usage, a diagram on a deployment, along with config docs and defaults. Seems like a decent tool for all kinds of testing scenarios.
BottomLine: Traffic simulation tool for testing Kubernetes apps
==
URL reference: https://github.com/DataDog/managed-kubernetes-auditing-toolkit
DateReviewed: 2024-06-14
Description: This is the MKAT repo - Managed Kubernetes auditing toolkit. This is for K8s on AWS, and draws out perms granted by IAM roles to K8s service accounts. It does a bunch of auditing and other checks, and gives you an easy to read text output to understand what the issues might be.
BottomLine: Interesting tool for AWS based Kubernetes clusters
==
URL reference: https://blog.ant0i.net/2024/06/k8s-challengeredguardch.html
DateReviewed: 2024-06-15
Description: This is a blog post that is a walkthrough of a CTF. They connect to a jump-off host, and start with recon, to map out the network. It looks like a K8s cluster with 2 workers and a master. After a bit more digging, the managed to find a remote shell exposed. They then download a payload and execute it. With this, they then start to work on the K8s cluster; first, getting the ENV info to figure out how to connect to the API and then looking for weak perms. They find some login creds. The author tries to break out of the pod to the node, but is not successful.
BottomLine: Interesting walkthrough of a CTF attack on a Kubernetes cluster
==
URL reference: https://www.e-spincorp.com/what-is-container-security-and-issues/
DateReviewed: 2024-06-16
Description: It seems orgs are being turned into IT companies, and to do this they need do use containers. This article is an intro to all things containers. We start with a definition of containers, and then a journey through how they work, with a paragraph on some key topics. Next up we go through why containers help, and each topic gets about a paragraph of chat. We pivot to a discussion of applications, with four broad areas walked through with a large paragraph each. There is then a large section on container security. There are bits that are repetitive, but overall it's got decent info for a very early beginner.
BottomLine: A basic intro to containers basically from scratch at a high level
==
URL reference: https://www.computerweekly.com/feature/Kubernetes-at-10-Persistent-storage-matures-helped-by-operators
DateReviewed: 2024-06-17
Description: Kubernetes is 10, and apparently the most important thing is stateful data storage, which this article is going to tackle. It's actually a bit of an interview with the person who drove K8s storage, so that is interesting. They start by talking about early days, then looking at improving things in the storage stack. He then talks about CSI and how those integrations played an important part, including not feeling things were good until they had quite a number of CSI drivers in the mix. He talks about dynamic provisioning and how that came about, and then also about some of the building blocks -- like PV & PVCs -- to help solidify stateful storage.
BottomLine: Great walkthrough of how stateful storage evolved on Kubernetes
==
URL reference: https://medium.com/@noah_h/an-intro-to-kubernetes-hardening-c8efd7853f27
DateReviewed: 2024-06-18
Description: Kubernetes is well used, but security!! So this article will examine K8s hardening. Good - it has a few diagrams, which can be helpful; mediocre - it has some handwavy YAML snips, but isn't really a hands on. The have a number of high-level sections, with a paragraph dedicated to each subsection. We start with Pod Security, and talk about immutable file systems, security context and image security among 6 topics. Next up is Network security, and they dip into CNI, segmentation and service mesh. We move onto Control plane hardening, talking about things like etcd and the API and even he worker client kubelet part. They also deal with Auth and logging. Overall, a great intro with decent coverage.
BottomLine: Good high level intro to Kubernetes security hardening
==
URL reference: https://www.openpr.com/news/3535473/kubernetes-security-software-market-to-explore-excellent
DateReviewed: 2024-06-19
Description: This is a press release about Kubernetes, but it gets worse. They talk a bit about the K8s software market over the next 5 years, and have a link to a "sample request". Unfortunately the link goes to a 404 page not found.
BottomLine: Supposed market report on Kubernetes - avoid
==
URL reference: https://www.mitigant.io/en/platform/kubernetes-security-posture-management
DateReviewed: 2024-06-20
Description: This is not an article, it's more like a pitch. We start with 3 simple steps, where their tool is deployed, analyzes and provides insights. They then have a short benefits section. Now, I'm not actually against pitches or sponsored content, but at no time does this thing ever talk about posture management at all. And since this stuff is new, I guess instead of helping you understand, you should just delegate it over? Ught.
BottomLine: Just an ad - skip
==
URL reference: https://medium.com/@martin.hodges/my-experience-adding-a-mongodb-no-sql-database-to-my-kubernetes-cluster-f43fe72fa0ba
DateReviewed: 2024-06-21
Description: This article focuses on how to add a NoSQL database to a Kubernetes cluster, and they use a spring boot app to show this. We start with a diagram, so that is good. The author has a few other articles that help support this topic, and refers to them as needed. He even has a repo that helps set up the environment. Next the author talks a bit about why MongoDB, which is because it's the one with the most market share, rather than a tech comparison, which is fine. It goes through how to install, and a bit on how the K8s can manage a specific app like a database. The author then goes through spinning up a 4-node cluster, and includes a YAML and CLI bits to spin the cluster up. We then go on to Helm charts and grab the MongoDB. They then go through a MongoDB database, and then set up the storage and cluster that surrounds it. The author even works through a few issues inline. They then run through doing some operations on the DB to get things set up, and the pivot to getting the app code in place. Finally, they test it to show it is working. They have a good chunk after this talking about building and deploying. Overall, a very solid walkthrough of a NoSQL app.
BottomLine: Great walkthrough of Kubernetes app with NoSQL
==
URL reference: https://medium.com/@farhansayed1116/understanding-security-context-in-docker-and-kubernetes-feb9f380688e
DateReviewed: 2024-06-22
Description: Security good for containers, Docker and Kubernetes flavors. We dive right in on the Docker side, and they talk about first about how Linux namespaces provides process isolation. They mention running the container as non-root, and talks about the limits on it if it is run as root. We pivot to Kubernetes, and our first topic is security contexts. The talk about both pod and container contexts, and what they basically do. The also mention that like Docker (through Linux), K8s can use capabilities to add or remove actions and resources. A good toe dip intro.
BottomLine: Very decent intro to Docker and Kubernetes security features
==
URL reference: https://medium.com/@ridhoadya/unveiling-the-battlefield-attacking-and-defending-kubernetes-clusters-9702cdbe941a
DateReviewed: 2024-06-23
Description: Kubernetes is the defacto standard, but shockingly - security! This will talk about K8s security. We start with a nod to Microsoft and a neat chart with a bunch of techniques divided up into areas. We drop into looking at vulns against a website, hitting the webserver which seems to execute the path part in a shell, fun fun. The author installs some tools and gets a reverse shell, to get interactive access. Up until here, this is all not K8s specific -- it's just a badly configured webserver. We dig through the env and check the filesystems to get hints for our K8s cluster. We find some JSON files with creds and tokens which will allow API access. They do an inspection on a pod and it allows a few things, including all secrets, and the account allows things like pod creation, so we inject a bit of YAML to spin up a pod. So, they've got all the privs on this cluster. Lastly, they have a VERY long laundry list of mitigation to avoid having this happen on your K8s clusters.
BottomLine: Decent intro to how to attack a Kubernetes cluster with mitigations
==
URL reference: https://dev.to/u2633/how-many-ingress-controllers-we-need-in-k8s-12c7
DateReviewed: 2024-06-24
Description: Focus of this article is how many Ingress controllers are needed in a Kubernetes cluster. They start by mentioning that segmenting Ingress by type of test environment or even namespace is the usual approach, but this is about alternatives. They go through the advanateges of the usual approach, and then we move on to alternates. First up is different clusters for each env; while complete isolation is good, they note it is high overhead. Next is a namespace per env, with one single Ingress for all, and they note their can be conflicts for paths in this scenario. They also dip into network policies and service mesh approaches, but each requires careful planning and is complex. Last they explore multi-tennant Ingress, which allows multiple envs handled through a central spot, with additional overhead. They then go through a number of YAML configs to show how they can be deployed. I really like this -- not everyone might be able to use this, but it's something to consider.
BottomLine: Looking at a number of Ingress configs for handling Kubernetes testing approaches
==
URL reference: https://thenewstack.io/add-nodes-to-your-microk8s-kubernetes-cluster/
DateReviewed: 2024-06-25
Description: This article focuses on deploying more nodes to a one-node MicroK8s server. MicroK8s is a great way to set up a single node cluster pretty easily, and this will leverage that basic setup. The author has a tutorial to set up a single node MicroK8s server which he give the link to. We're going to walk through adding 3 more nodes to end up with a 4 node cluster. We start with the network stuff, with entries for the host names and holes in the firewalls so the hosts can communicate. We then run a command to generate the bits that will allow workers to join the cluster, and then actually run that on the various nodes. Next up, we integrate the system kubectl into MicroK8s, so we don't have to preface each kubectl command, and it is done with 4 commands. They even go through the command if you want to remove a worker from the cluster.
BottomLine: Excellent short piece on adding nodes to your MicroK8s Kubernetes cluster
==
URL reference: https://medium.com/@mounikamouni0612/automating-website-deployment-with-ansible-playbook-fa269f3eb073
DateReviewed: 2024-06-26
Description: This article is about automating a Deployment process with Ansible on Kubernetes. There was a previous article this one builds on, which they created the Docker image they wanted to deploy. We start with a text diagram, to get the layout. The then take us through setting up the config files, and give us the content of the Dockerfile, inventory, ansible deploy and Kubernetes YAML files. We then do the command to run the playbook and he includes a screencap of what it looks like. Next are commands to verify the deployment work, and finally to access the end website. While it goes over the steps, it does lack why you need to do things, so not as good for a beginner as it could be.
BottomLine: Walktrhough of using Ansible to deploy an app to Kubernetes
==
URL reference: https://about.gitlab.com/blog/2024/06/20/kubernetes-overview-operate-cluster-data-on-the-frontend/
DateReviewed: 2024-06-27
Description: This article talks about talking to your Kubernetes cluster from GitLab. They first start by explaining what is available and how for their K8s clusters to customers. They then talk about how they are able to understand a Kubernetes cluster's state -- with two components - agentk and KAS, which are agents running in different spots to collect and examine info. The agentk runs in the K8s cluster and KAS is in the GitLab backend. Basically agentk is a proxy to the local Kubernetes API, with requests from KAS going to it and sometime sending info on the cluster state to KAS. They then explain a bit about the config, and clarify what needs to be configured to allow the agentk to pass info back to KAS and have it be visible on the dashboard. They include a diagram for illustration. The then talk about the watch API, how it works and the details of howo the data flows. Another diagram is included for the API flow. They then have a discussion of how the K8s dashboard is populated and how things show up in it. They also touch on possible future features. This is a great overview of the GitLab K8s system, and how it might help to use it.
BottomLine: Decent dive on monitoring your GitLab Kubernetes clusters
==
URL reference: https://thekubeguy.com/understanding-squash-e2323c6f495e
DateReviewed: 2024-06-28
Description: We start with the premise here that managing Kubernetes configs can be hard, which is true for sure. This article looks into the squash flag. We start with what the squash flag is, which is a way to combine multiple layers which make up an image FS into one, ditching artifacts. Next they use a cake mixture example to illustrate what it is and how it functions. They also explain how the layers are built -- when you run various image-building commands, each one is done on a different layer, and all of them make up the final image. To use the flag, typiclly you add "--squash" to your build command line. They point out the
benefits, touching on reduced size, simplified management and better security. We are then run through an example run, with both YAML and CLI to see how it works in practice. We go through the benefits again, with each one broken out in detail. We finally get to the downsides, and there are a number of them. We lose things like layer caching and granularity, as any change in one layer will need the whole image to be done again. They also point out not all versions support it, and that it makes verification and auditing more difficult. Decent article on this.
==
URL reference: https://thenewstack.io/kubernetes-security-report-evolving-landscape-of-devsecops/
DateReviewed: 2024-06-29
Description: This is a survey article, talking about the state and posture of Kubernetes security - we start by dipping toes into the fact that it isn't just architects or admins that are affected by K8s security issues. They then make the good point that it isn't just about OS and library patches, but the actual software inside the containers too that has to be secure. Next up is a bold stat - 2/3rds of surveyed orgs have slowed down a deployment due to a security concern. They also point out over half of those surveyed had delayed something in the last year, and just under half said they had lost money or customers. In diving into the causes, 42% said that companies are not dealing with things sufficiently; and about half of those thought the problem was not addressing containers adequately, while the other half felt it was an investment issue. Interestingly, only 1/3 of companies use their security team to head container security, while almost 50% leave it to the IT team as a whole. We then pivot over to supply chain, where there are worries about component vulnerabilities. They pointed out respondents were concerned about lack of SBOMs and automation. For a survery piece, it feels pretty decent.
BottomLine: Decent survey on Kubernetes security concerns
==
URL reference: https://techcommunity.microsoft.com/t5/microsoft-developer-community/using-keycloak-with-azure-ad-to-integrate-aks-cluster/ba-p/4174238
DateReviewed: 2024-06-30
Description: This is an article/tutorial on using Keycloak with Azure AD to integrate with AKS clustare auth. We start with a general introduction, and then move onto a diagram and some what is on AKS, Azure AD and Keycloak. They let us know Keycloak is an open source identity piece used to enable SSO and other identity elements. We then have a bit of a confused diagram, with a flow which is well documented but components that are not explained. Then then walk through setting up the Azure AD part, then explain how to connect Keycloak to Azure AD, and then how to configure an AKS cluster to auth with Azure AD. For people using MS cloud bits, this might be very interesting.
BottomLine: Walkthrough of using Azure AD for AKS through Keycloak
==
