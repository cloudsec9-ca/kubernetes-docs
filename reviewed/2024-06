URL reference: https://securityboulevard.com/2024/05/how-old-are-your-kubernetes-nodes/
DateReviewed: 2024-06-01
Description: This is a great article, focused on the age of your Kubernetes nodes. It can be easy to forget that the node OS is important when dealing with containers, as we are usually focused on that level of security. They advance 5 overall reasons for keeping on top of node age - Vulnerabilities, performance degradation, new features, resource optimization and maint and reliability. Each of these get a paragraph, with some getting several describing why you need to keep on top of this around each. They then tackle how to monitor node age, and finally how to plan node upgrades. Overall a good piece.
BottomLine: Higher level piece about why the age of your Kubernetes node OS matters, and strategies for staying on top of this
==
URL reference: https://wetransfer.com/engineering/upgrading-kubernetes-from-1-11-to-1-18-in-a-month/
DateReviewed: 2024-06-02
Description: Older article about the challenges of upgrading several Kubernetes versions up at a time. They start recounting what went on - getting onboard, then getting things worked out, while not doing any K8s updates for a few years. They found themselves on 1.11, where the main ver was 1.18. They then go through their setup of dev/prod and how they are set up in their provider, along with what their devs can do when developing. Finally they cover their CI/CD, which covers infra updates but doesn't yet cover K8s updates. They then outline their plan, with rationale and details of why this was what they chose. They considered changes in API, compatibility, what might be affected and then would do a "rehersal" in a small dev enviornment. They also had to do things like tool configs backups, until they reached a version that did this automatically. For comms, they created a new slack channel and used it to record actions. They then enumerate their plan, which is a dev upgrade followed by a staging upgrade, regression tests and once everything good finally the prod upgrade. They then run through how their initial upgrade went, as they'll have to do some incremental upgrades to get to the latest rev. There were some special settings required for the initial, as things were old and bits needed tweaking, but finally they got the initial upgrade done. They also detail each step after with a paragraph summary, which explains what they did and any wrinkles they encountered. They have a lessons learned for others that might need to do this. Overall a great read.
BottomLine: Walkthrough of upgrading a serious but old version of Kubernetes to a more recent version
==
URL reference: https://medium.com/@tamerbenhassan/why-understanding-ingress-and-network-policies-is-crucial-for-kubernetes-security-906a04debe23
DateReviewed: 2024-06-03
Description: This article is an explainer on the differences between Ingress and Network policies. We start with Ingress, which they explain as "the front door to your Kubernetes cluster". They then show the YAML needed to configure a couple services, with a brief explainer. In contrast, Network policies are security guards inside you K8s cluster. They check which pods can talk to one another, ensuring only needed comms is allowed. Again, we have a YAML file with a short explainer. We even go through a scenario and some usage tips. Great for an intro!
BottomLine: Comparison between Ingress and Network policy on Kubernetes
==
URL reference: https://devopsvoyager.hashnode.dev/exploring-kubernetes-api-groups-and-versions
DateReviewed: 2024-06-04
Description: Kubernetes is powerful, but to understand its power, you have to understand the API and the groups and versions that make up it's structure. This article will do that. So, there are two API groups - core and named, and they'll take us through both. They go into a bit of explaination, but basically core are the main K8s functions, and named are the extensions which can be added to the core. So the main K8s resources - like pods, nodes, services and namespaces - are part of the core. Everything else falls into named, and by putting them here can be extended. We then go through some samples, including YAML snips, to see the differences and even the URLs that the various APIs use. So, I thought this might be a fluffy piece at first, but it really helped me to understand a bit more on the K8S APIs.
BottomLine: Solid piece explaining core vs named in the Kubernetes APIs
==
URL reference: https://medium.com/@tamerbenhassan/securing-your-kubernetes-pods-a-beginners-guide-to-security-contexts-94a5924e764e
DateReviewed: 2024-06-05
Description: Running Kubernetes? Then you apparently know how important security is. This article runs through security contexts. We start with quick chats about what security context are and why you want them, and then we are on to scenarios to use them. They cover five scenarios - running as non-root, disabling priv escalation, read-only root filesystem, setting linux capabilities and using Seccomp profiles. For each, we get a one sentence intro, a YAML snip with the context, and a what it does section that explains the YAML. To tie it all together, they present one last YAML snip with all of the contexts we went through before integrated together in a single file. Decent intro to the topic.
BottomLine: Solid beginner piece on security contexts for Kubernetes
==
URL reference: https://www.infoworld.com/article/3715489/how-kubernetes-succeeded.html
DateReviewed: 2024-06-06
Description: On the 10th anniversary of Kubernetes, this is an article on what helped it to become successful. They being with a handwave to the beginings of K8s inside of Google, before talking about some of the alternatives in 2014. It started with a tight focus, mainly being stateless applications, which wasn't the main way most workloads functioned at that time. But K8s evolved, it got things like StatefulSets and Operators which helped to support stateful workloads. There was even a push for databases to run on K8s, with work done by orgs like Data on Kubernetes. Next we talk about the role of Open Source in K8s, and how it helped develop the community. We wrap with more work needed, and the thought that there is more to come.
BottomLine: Decent reflection on the tenth birthday of Kubernetes
==
URL reference: https://dzone.com/articles/key-benefits-of-integrating-password-managers
DateReviewed: 2024-06-07
Description: Kubernetes is great, but managing passwords can be a challenge, so this article argues we should integrate password managers into the mix. They advance that password managers have secure data storage, safe password exchange and MFA -- all good things. They also argue that credentials can be automatically rotated, which is also a good thing. And many systems have audit and other things like GDPR or HIPAA compliance baked in. They argue that it can even be integrated with a SIEM to detect and mitigate weak passwords. So, my main issue with this is that they don't have a practical example at any point. I mean, maybe there is such a manager out there, but I don't know any tools that do automatic rotation at the moment, out of the box.
BottomLine: Good idea of using Password managers with Kubernetes - but doesn't talk about any specific one
==
