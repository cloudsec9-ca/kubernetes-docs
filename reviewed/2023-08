
URL reference: https://medium.com/@kessilerrodrigues/mastering-kubernetes-logs-a-guide-to-understanding-your-pods-129f4de56b2b
DateReviewed: 2023-08-01
Description: In our intro, we learn logs are good -- but how can we access them, especially in crashed or currently running pods? Oh, I like it, our author is going through commands, and he's taking us through from first principles. We are shown how to find a pod of interest, how to see the logs and how to view them in real time, along with all of the above in a namespace. You can use a flag to see a recent run, and how to choose a specific container in a multi-container pod. And that is the walkthrough -- short and sweet, and decently done.
BottomLine: Hands on quick walk through on Kubernetes log commands
==
URL reference: https://itnext.io/innovative-ways-to-use-weighted-canary-deployments-and-multiple-container-runtimes-in-kubernetes-aeeafc1acfa5
DateReviewed: 2023-08-02
Description: For the intro, we're going to leverage K8s features to do something neat. The author is looking at using canaries with weights or possibly route based deployments from ingress to do something a bit different. They share that usually we see either ephemeral containers or copies to find issue -- but their idea is to use a different container runtime for debugging. They are using the Kata runtime for this, instead of the default runc. They even talk about a scenario where Kata can provide isolation if there is a security issue that isn't immediately patchable. And, they have a good diagram showing the two use cases. They then run through the YAML to show how the config would look, and how to set up the canaries to split traffic. Overall, an interesting article.
BottomLine: Innovative look at using canaries for isolation and debugging in Kubernetes
==
URL reference: https://www.hackread.com/cryptojacking-kiss-a-dog-targeting-docker-kubernetes/
DateReviewed: 2023-08-03
Description: Intro explains that a new cryptojacking attack was discovered that targets Kubernetes and docker. We then visit a definition of Cyptojacking, and then dive in to the hack. It uses a Python script to install curl and add a periodic command to the system, and it is named after the control domain, which is a variation of "kiss-a-dog". A number of hiding techniques are used to obfuscate the code, the processes, and the goal -- which is to mine Crypto and send the mined hashes to servers under the control of the jackers. A good walk through.
BottomLine: A high-level walk through of a cryptojacker targeting Kubernetes and Docker
==
URL reference: https://securityboulevard.com/2023/08/the-complete-guide-to-kubernetes-rbac/
DateReviewed: 2023-08-04
Description:  Our into goes regular places - K8s is awesome, but ... security; so they are going to take us through RBAC here. We dive right in, and explain how RBAC basically works in one sentence. They then break this down, explaining each of Authentication, Authorization, and Admission control in a short paragraph or two, and how they work together to form a permission scheme. Next we dive into RBAC rules, including a YAML example. They explain how the API group, the verb (action) and target (resource) form a rule. We then get some examples in YAML with explanations of what is going on. We then touch on 5 best practices, many of which are just good security practices. We then appraoch "day 2" ops, including review of RBAC as deployed. They point out that each K8s cluster is an island perms management wise, and it's not always easy to understand how roles are used.They then enumerate these 4 issues with multi-cluster management. They do pitch Armo as a possible solution, as the article seems sponsored by them.
BottomLine: Good intro to RBAC for Kubernetes
==
URL reference: https://www.huntress.com/blog/one-msp-three-microsoft-365-compromises-72-hours
DateReviewed: 2023-08-04
Description: Intro talks about 3 email related attacks on Microsoft 365, a cloud service many companies use. In this case, the attacker leverages email rules to hide info they don't want the victims to see. It seems that the attacker gains contol over the targeted account by an undisclosed mechanism. They go through how they determine a compromise, show the installed rule, and finally explain how they remediated the issue. The MO seems similar for all 3 attacks, but only the last attack seems to have a specific target -- to allow for invoice manipulation and ultimately allow the attackers to get monies paid to them by the victim company. A weakness is there isn't any suggestion on how to prevent this, only a wave to "buy our product" to detect it.
BottomLine: Good illustration of ways attackers can compromise Cloud services
==
URL reference: https://sysdig.com/blog/top-15-kubectl-plugins-for-security-engineers/
DateReviewed: 2023-08-05
Description: We start with a blurb about how k8s is customizable, and this is mainly done through plugins. Then we do a definition of what a K8s plugin is - an extension to the kubectl command. We are then introduced to a plugin manager of sorts, krew, which helps us to install and manage plugins. We then start going through the plugin tools. They do this with a link, a short blurb on what the plugin does, and some inline snippets to show how to use the plugin. There are a variety of plugins covered, in the network, secrets, and cluster management areas. At the end, they do a quick walkthrough of a shell-based plugin if you want to author one yourself. 
BottomLine: Good intro to Kubernetes security related plugins
==
URL reference: https://romanglushach.medium.com/docker-defense-proven-strategies-for-secure-containerization-335166a843f8
DateReviewed: 2023-08-05
Description: In a familiar intro, Docker is not secure by default, and containers are ephemeral and dynamic. We are then presented with a table with 8 risk categories, along with description, example and mitigation columns. After the chart, we are presented with best practices. After a short blurb, we get another table with the name of the practice and a description for keeping Docker secure at a host and daemon level. Finally, another motivating blurb for the last table to give us best practices for securing Docker images and containers. Now, I appreciate the thought here, but I think that this could have been better strucured. As is, I think pros might get it, but managers will be lost.
BottomLine: Decent high level quick walkthrough of Docker security issues
==
URL reference: https://botkube.io/blog/use-chatgpt-to-troubleshoot-kubernetes-errors-with-botkubes-doctor
DateReviewed: 2023-08-06
Description: Our intro touts both K8s and AI/GPT, and the company our author works for is integrating GPT into K8s. We're treated to a couple more paras of how GPT is awesome helping out with K8s, and then they have some examples. Apparently it's integrated as a GUI button, and allows interactive questions to be asked, like "how to I create a Pod". They call their integration "Doctor", and it leverages another one of their products which surfaces log info, which allows it to give tailored suggestions. Confusingly, while it seems the doctor and do some recommendation-based commands, it can't do simple things like spinning up a pod. No, wait -- it seemingly doesn't do that. Did no one proofread this copy? While this seems like a neat thing to try, the info is very high level and not very helpful. This is a case a video or walkthrough would have helped a lot.
BottomLine: High level GPT product pitch which seems a bit confused.
==
URL reference: https://sysdig.com/blog/top-owasp-kubernetes/
DateReviewed: 2023-08-06
Description: Great short intro - OWASP top 10 helps identify most likely risks. They follow that up with background on the the various lists and how they are ordered. Next they talk about the K8s top 10, and how moving from on-prep to the cloud changes our approach. They include a color-coded diagram, which has all of the top 10 along with where in your K8s cluster they are a concern. They divide the list into three areas - misconfigs, missing visibility and vulnerability management. They then do a dive through each list item, with a diagram to tie it together, on the issue that it can cause and some mitigations. There are also some external refs, if you need background or motivation. It's pretty well done and goes into a decent amount of detail. One nitpick - a donut diagram to enumerate supply chain image issues uses similar cyan colors for 3 categories.
BottomLine: Good high level but detailed walkthrough of an approach to using OWASP K8s top 10 as a tool to secure your cluster
==
URL reference: https://www.youtube.com/watch?v=m34WC-s6gDo
DateReviewed: 2023-08-07
Description: We start this vid with a layout of how the sandbox works -- it is a local version running off another cluster with a special route. Our presenter  then fires up the environment locally which connets to the cluster, and he walks us through the code he's demoing, a lightweight ride sharing app. He then walks us through a YAML file which will connect the local env to the cluster. To get the special routing, he adds a header to the HTTP request. He then shows it work against his local version and then changes something to produce an odd return value. Actually a neat way to do some troubleshooting and debugging.
BottomLine: Walk through on a way to sandbox some code in Kubernetes
==
URL reference: https://zifeo.com/articles/230617-low-cost-k8s
DateReviewed: 2023-08-07
Description: Our intro points out while K8s is popular, it's not as easy as Docker, but using managed providers can cost $50+/mo. They argue at this cost, it's more economical to install it yourself but you have to figure out how to manage it. Their provider of choice is Infomaniak to try this one out, and note that they have an offer for 300CHF in the first 3 months. They walk through the UI to get the basics set up. We then work through a TF file to get Kubernetes up. They then run Terraform to create a management node and a worker node. To finish up, they do a cost comparison so you can see how much your as-deployed self managed cluster will be.
BottomLine: Good hands on walkthrough of a self managed cloud Kubernetes deployment along with cost comparison breakdown with a provider managed alternative
==
URL reference: https://sysdig.com/blog/how-to-secure-helm/
DateReviewed: 2023-08-08
Description: Into talks a tiny bit about Helm, and asks if it can be taken seriously. The author gives us a bit about Helm's origins, and then talks about a big issue -- application lifecycle management. They talk about some tools, but clearly they are looking to use Helm for app lifecycle mgmt. They handwave on Helm working with charts, but do explain there are lots of pre-made charts to use. As with all K8s stuff, Helm is not secure by default. So they have some recommendations, like linting and using a repo and storing them in Git. There are some more recommendations, but until they get to "sign your charts", they are all just good generic recommendations and not security related really. There is a good amount of discussion on how to do this and check it, so that is good. A bit later they recommend not using any old Helm charts, but checking (and verifying) them. Actually a decent discussion to think about k8s Helm chart security.
BottomLine: Good intro to Kubernetes Helm chart security
==
URL reference: https://securitylabs.datadoghq.com/articles/container-security-fundamentals-part-5/
DateReviewed: 2023-08-08
Description: We start with a chat on Mandatory Access Control (MAC), and how it helps with security. They then do a tour of the two main Linux versions, AppArmor and SELinux. For each system, they show the basic output from a monitoring command, then show how containers can be restricted by adding policies to each of them.
BottomLine: A good simple walkthrough on Mandatory controls for containers
==
URL reference: https://www.extnoc.com/learn/security/kubernetes-security
DateReviewed: 2023-08-09
Description: Intro is 4 paragraphs, so on the longer side, and touches on the regular points -- K8s getting popular, security important, without security bad things happen -- so need to be secure. Then we talk a bit about new issues related to Kubernetes, and how to handle those vulnerabilities and risks. They mention a bunch of k8s stuff we need to do, but w/o context. Ah, back to first principles -- we have a few paras on "what is Kubernetes security", followed by more paras of "why is it important". They touch on the 4C's (Cloud, Cluster, Container and Code), and how controls tie in. They motivate this by touching base on how bad actors can exploit open issues. So, on to best practices! This includes using RBAC properly, 3rd party Auth for your API server, protecting etcd w/ TLS, Firewalls and encryption. We also explore isolation of K8s nodes, traffic monitoring, process whitelisting, enabling auditing and keeping K8s up to date. Overall a decent high-level walkthrough of all things Kubernetes security.
BottomLine: Decently thorough high level Kubernetes security walk through
==
URL reference: https://itnext.io/aws-security-a-comparative-analysis-of-instance-metadata-service-v1-vs-ea521ee27d56
DateReviewed: 2023-08-10
Description: Our intro shows us the Instance Metadata Service (IMDS), and talks about using it's versions (1 & 2) from Kubernetes and Docker. They explain the first version was a stict request/response protocol, but which potentially exposes sensitive info to the instance from an unprivleged app, which is risky. To mitigate this, we can either turn off IMDS or move to version 2, which requires a token along with any data requests. They go through some demos, to show the exposure with v1 and how this is closed for v2 and also how to use the token to get a proper response from v2. They also have another bunch of recommendations to harden your worker nodes to minimize or eliminate security risks.
BottomLine: 
==
URL reference: https://blog.aquasec.com/kubernetes-exposed-one-yaml-away-from-disaster
DateReviewed: 2023-08-10
Description: Our intro is the threat of your Kubernetes cluster being hijacked. They back up their intro with an investigation which they found 60% of clusters belonging to over 350 orgs had some signs of malware or breach. They found two principal issues -- anon access and misconfiged kubectl. Their project lasted 3 months, and after an intial scan found 120 hosts, each week they found 20 new hosts exposed. They also point out that in addition to on-cloud secrets, clusters often have secrets related to Git or CI/CD or external services like Docker Hub. They then show some (redacted) demo data, and explain how the access they found allowed them to obtain sensitive information. They then go through the crypto campaigns, and detail how things can be exploited to gain access with some good diagrams. They wrap up by showing some mitigation techniques.
BottomLine: Good hands-on discussion of specific secuity issues with Kubernetes and how to mitigate them
==
URL reference: https://www.youtube.com/watch?v=x_45c58BRZ0
DateReviewed: 2023-08-11
Description: Our vid into is simple - stop using image tags for Docker images. We dive in to answer the question of why image tags are bad. He points out that we don't know which version we are getting, and worse, latest might not even be the most recent, as it's just a name. Now he gets pedantic, and says that image authors CAN update even version tags to point at new images, which is true; but I don't think reputable distros will do this. The solution, our presenter says, is image digests -- which are immutable. Now that we can guarantee our pulled images match, there is still an issue -- we don't really know for sure who created the digested images. So, we reach out to digital signatures. By signing, we know who created the image, and decide if we trust them. I think this is a good conversation starter on what we need in our software supply chain to improve security.
BottomLine: Good conversation starter on things that can improve your software supply chain security with container images
==
URL reference: https://securitycafe.ro/2023/02/27/a-complete-kubernetes-config-review-methodology
DateReviewed: 2023-08-11
Description: Our author feels other treatments fail to cover a complete security review, so they hope this one does. It's actually a pretty beefy document, and while it doesn't deep dive into each tool, it does generally include a snippet and some links to go deeper. Our article has 6 main sections, where he goes through checking and config review, permissions, exposed services and inbound networking, vulnerability scanning and add-ons. I'd say this is a mid-level document -- not a high level overview, but not a low levele deep dive. It's a good process approach to security in a container and Kubernetes orchestration enviroment. Worth a skim to have perspective for sure.
BottomLine: Decent mid-level process approach to penetration testing a Kubernetes cluster
==
URL reference: https://www.itprotoday.com/it-operations-and-management/8-essential-open-source-tools-simplify-kubernetes-workflows-it-pros
DateReviewed: 2023-08-12
Description: Our intro goes to the usual spot that K8s is the place to be, and they want to tell us some tools that help in that journey. Weirdly, they list the tools in a chart and in a bullet point list, but thankfully they then go through them. They include kubectl, but it's built in, but okay. They then go through each tool with about 2 paragraphs per tool. They cover monitoring, tracing, notifications, backups, secrets, costs and multiple clusters. It's a good high level toe dip in each area.
BottomLine: Decent high level overview of helpful Kubernetes open source tools
==
URL reference: https://securityboulevard.com/2023/08/konstellation-a-tool-for-rbacpacking-in-kubernetes/
DateReviewed: 2023-08-12
Description: Our intro starts by explaining how RBAC fits into a Kubernetes cluster. They point out one weakness of RBAC is not having a deny ability, so it isn't always obvious what perms a role has. To address this, the author mentions Konstellation to surface the different permissions a role might have. They explain which roles have risks associated with them, and how to find these permissions and how they can be exploited. They do a good job of explaining the permission, what this grants, how it can be abused, and how it can be detected. After going through a number of such perms, they have some recommendations to close and mitigate the issues. Overall well done.
BottomLine: A pretty thorough examination of RBAC permissions and the security consequences of granting them, as well as ways to find them being used
==
URL reference: https://blog.palark.com/kubernetes-security-best-practices/
DateReviewed: 2023-08-13
Description: Our intro starts with security as something important but not done well all the time; and Kubernetes security getting attention because its an up and comer. Our article then dives into security standards, and start with the CIS benchmark, and the tools that implement that. They mention PCI (payment) standards, and then explain what the standards do, which is break things into the 4C's as layers. The article then advances 5 steps needed to secure - config, image scans, network sec, running app control and audit and event logging. They then do a treatmeant of each step, with either an example or a YAML snippet, and have a good amount of diagrams. The guidance seems solid and its a good mid-level approaach. One thing I like is that in closing, they mention that security is an (iterative) process, showing that you can't just set and forget it.
BottomLine: Good mid-level security walkthrough for a Kubernetes cluster
==
URL reference: https://devopscube.com/setup-prometheus-monitoring-on-kubernetes/
DateReviewed: 2023-08-13
Description: Ok, so this is a hands-on tutorial, so pretty cool. They start off by explaining what Prometheus does and how it works, with a detailed architecture diagram. They then show how to set this up in a diagram for Kubernetes. They start with some housekeeping, namely permissions and a namespace so your monitoring is logically separate from your other workloads. They then use a config map to put the config into the K8s cluster, instead of having it reside in the containers themselves, which allows us to update and simply restart the monitoring pod to pick up config changes. They then walk through the setup of the monitoring deployment, along with 2 methods to access depending on your needs. They then go through a few setups, and explain what you might want to do in prod to have this work. It's actually well written and seems clean.
BottomLine: Prometheus monitoring for Kubernetes setup walkthrough
==
URL reference: https://www.csoonline.com/article/648756/kubernetes-clusters-under-attack-in-hundreds-of-organizations.html
DateReviewed: 2023-08-14
Description: We dive in without much intro to both the Aqua security findings and the Redhat state of K8s reports. They outline the most popular target for compromises is cryptomining. Access by outside actors can be "business ending", which while strictly true seems overly alarmist in this context. And, that is it, so it's a short summary of the article.
BottomLine: Short summary of Aqua report on Kubernetes vulnerabilities
==
URL reference: https://www.infracloud.io/blogs/simplifying-kubernetes-native-testing-testkube/
DateReviewed: 2023-08-14
Description: Here our article is a walkthrough of tools to help you test the apps you deploy to a Kuberneetes cluster. They argue that cloud native apps have unique requirements, such as being built on microservices. Our test tool of choice here is Testkube, which is open source. They outline some features, including integration with CI/CD, test orchestration, and a dashboard to view results. They walk through installing, creating the test pods, creating and running the tests. They show screenshots and do show current vs. recent runs. They show load tests, ability to trigger tests on say a commit, and also how to integrate with CI/CD. Overall a decent walkthrough of the tool.
BottomLine: Walkthrough of an app code testing suite for Kubernetes
==
URL reference: https://www.docker.com/blog/secure-kubernetes-with-kubescape-extension/
DateReviewed: 2023-08-15
Description: Intro lauds k8s adoption and points out that we should "shift left" our security attention. We then dive into Kubescape, which they bill as an all around security platform. It does risk analysis, compliance and misconfig scanning. There are diagrams showing all the interactions, but basically Kubescape is a CLI tool that has a browser output component. Finally we talk about the Docker extension -- they explain using Kubescape in this way allows devs to shift left on security. They show installation and extension setup, registration and deployment. They then walk through the dashboard and show off compliance, scanning and permissions visualization. Overall a nice walkthrough.
BottomLine: Walkthrough of Docker extension to help devs see security issues early on in development
==
URL reference: https://buoyant.io/blog/kubernetes-1-28-revenge-of-the-sidecars
DateReviewed: 2023-08-16
Description: This article starts with a hint of what sidecars are and how they are understood by Kubernetes, and wanting to tell you what is new with the latest version of K8s. We then go through the definition of a pod. They contrast this with containers, and point out there are two types - ordinary and init containers. Init containers runs first, one by one, in a pod, and then K8s runs our ordinary containers once all the init ones are done. Next we go through the definition of a sidecar. The big deal about sidecars is that the code that runs here is in the same pod as the app, so can help or change the app within its context and limits. The biggest use case for sidecars is service mesh, but it can be used for things like log aggregation and metrics as well. We then go through some drawbacks of pods, including preventing termination and updates requiring the restart of the entire pod. Now we get to KEP, or the Kubernetes enhancement proposal, which enters alpha in 1.28. With this, we can move our sidecars from ordinary containers to init ones by adding "RestartPolicy: Always" to them, which signals K8s to keep them running alongside our application. Overall a good walkthrough.
BottomLine: An intro to sidecars in Kubernetes and changes to how they are handled in version 1.28
==
URL reference: https://itnext.io/kubernetes-admission-controllers-a-comprehensive-guide-to-enhancing-security-and-control-3c3fe3134fa7
DateReviewed: 2023-08-16
Description: We start with a statement - K8s admission controllers are crucial for security and control, followed by a bit of talk about how the K8s API works, and how it is dynamic. So Admission controllers help gatekeep this ever-changing envrioment. We're then told how things work a bit behind the scenes, in conjunction with Admission controllers. They explain mutation, which allows you to add or change things (like defaults), and validation, which ensures things follow the rules you lay out. They also point out that some controllers are included with K8s, but can be enabled or disabled as desired. They then go through the process, from scratch, of setting up a simple K8s cluster and adding some admission controllers, and trying a valid and invalid one and showing the results. Overall a decent walkthrough of this topic.
BottomLine: Good hands on walkthrough of Kubernetes admission controllers
==
URL reference: https://securitylabs.datadoghq.com/articles/whats-new-for-security-in-kubernetes-128/
DateReviewed: 2023-08-17
Description: We start with a bit of info on K8s releases and a feature called Validating Admission Policy that will be the focus of this article. The policy is in beta, so they walk through enabling it on your cluster. They then show how to test it is active, and also how to create a policy to use with this feature. We also do a quick stop at authenication items.
BottomLine: A quick touch on some new security features in the Kubernetes 1.28 relase
==
URL reference: https://www.crowdsec.net/blog/monitor-audit-logs-safeguard-kubernetes-infrastructure
DateReviewed: 2023-08-17
Description: Our intro walks us through a bit of Kubernetes audit back story, and how you can ingest logs and surface interesting info, and gives a small laundry list of what they show. They then go through and define what K8s audit logs are, and motivate why you want them. They then show a diagram with what we'll be rolling out, and lay out what we need to get that done. They show how to install the K8s cluster (Kind in this case) and what we need to set up YAML wise to capture the audit logs. They then show how to set up the log ingestion piece, and then install the audit software. They connect a notification piece to slack, and then test to make sure things are working. They then spin up a pod which will trigger an alert,and show the logs to confirm the issue is detected. They also confirm is showed up in slack. Seems simple enough; but I wish they'd show or mention if you can inject your own rules/alerts.
BottomLine: Walkthrough of an interesting Kubernetes audit tool
==
URL reference: https://kubernetes.io/blog/2023/08/16/kubernetes-1-28-non-graceful-node-shutdown-ga/
DateReviewed: 2023-08-18
Description: In addition to a bit of background, our intro explains that this feature allows a stateful workload to be moved if the node it is on has a hardware failure or is unexpectedly shut down. The article then details what a non-graceful shutdown is, and how it contrasts to a graceful shutdown. They also explain why this is not a concern for stateless containers. They go on to explain how you can mark a node so that K8s doesn't attempt to start a pod on it. They do note that this is currently a manual process, but explain they hope to add an automatic detection mechanism in the near future.
BottomLine: Interesting feature to help move Kubernetes pods from nodes that fail for some reason
==
URL reference: https://thenewstack.io/two-ways-incident-responders-can-make-sense-of-kubernetes/
DateReviewed: 2023-08-19
Description: Our intro here says there will be some explosive growth in container workloads, and that this is complex and challenging without the proper tools. To reach this end, there are two items that embody the approach. The first is service ownership, which means the teams building an app help out if there are issues with the app. The idea here is that SMEs are close to the code and can see the impact and interact with issues, hopefully to quickly resolve them. The second is a good diagnostic toolset, which allows surfacing of issue and more direct ability to take actions like restarting a service or clearing some cache. Overall I like the general strategy of this approach, but it's a bit light on implementation.
BottomLine: Decent high-level chat about having devs work closely with ops people on Kubernetes
==
URL reference: https://github.com/stefanprodan/podinfo
DateReviewed: 2023-08-20
Description: Podinfo is a small web app which helps showcase microservice best practices. It has been used in workshops and end to end testing. It literally contains a laundry list of bits that it integrates with. Has a Web GUI and an extensive API. This repo includes serveral ways to install the app, along with a half dozen guides. An interesting looking tool.
BottomLine: Interesting Kubernetes tool for workshops and testing
==
URL reference: https://dev.to/aws-builders/demystifying-eks-authentication-and-authorization-a-guide-to-strengthening-network-security-32eb
DateReviewed: 2023-08-21
Description: Okay, we start with an awkward reference to how EKS relates to AA services in AWS. We then define Authentication and Authorization, the former which validates who you are, and the latter what you can do. In EKS, authentication functions are linked to AWS IAM permissions, which is different than vanilla K8s. They explain that the link is an aws-auth configmap, which links IAM perms to K8s users. They then look at some configs, and do a walk through of adding/changing some info.
BottomLine: A quick overview/walkthrough on EKS permissions for Kubernetes
==
URL reference: https://medium.com/siot-govtech/kubernetes-from-scratch-35add70e8b7f
DateReviewed: 2023-08-21
Description: Our author was an intern who was tasked to set up Kubernetes in a new enviornment. Our Kubernetes newbie starts with MiniKube, and discovers a tool called Kompose which he uses to translate Docker compose files into K8s manifests. For production, he needs something more beefy, and after considering the options goes with K3S. Installation was straightforward, and after a small network issue, his cluster was alive. Finally, he converted his manual setup steps to Vagrant and Ansible, making them repeatable. Finally, he wraps with advice and lessons learned. Overall an interesting approach to a small cluster.
BottomLine: A high level walkthrough of someone without Kubernetes background bringin up a cluster
==
URL reference: https://medium.com/devops-techable/use-pgadmin4-inside-your-aws-eks-cluster-to-manage-your-aws-rds-databases-easily-with-aws-cdk-using-2a3273fcc118
DateReviewed: 2023-08-22
Description: Lots of time you use a Database to store info for your app, especially if you are using a container -- but how do you see that data? The author argues many times there is a jerry-rigged setup, with bastions and forwards and somethinl like pgAdmin which you run locally. So, why not have this run in a sane way in your cluster (esp. if you are using EKS?) The author is going to use AWS CDK, and includes a ref to another article he wrote if you need to set that up. He then gives the chart for doing so in Helm. I like this concept and simple approach.
BottomLine: Interesting approach to leveraging Kubernetes to view a Database
==
URL reference: https://www.openfaas.com/blog/openfaas-dashboard/
DateReviewed: 2023-08-23
Description: We start with a quick bit of background on OpenFaaS, and the UI tooling to utilize it which was built in 2017. So, the project decided to update the UI now from Angular to React with some new ideas. While the old UI will be maintained for the community version, this new UI is aimed more at commercial deployments. They then do a tour of the new features, including a new code editor, ability to see parameters and SSO among others. Overall, it looks like an interesting update.
BottomLine: Announcement of an update for OpenFaaS
==
URL reference: https://www.youtube.com/watch?v=Nqp13sH597s
DateReviewed: 2023-08-24
Description: In this vid, a K8s practitioner is going to take us through his top 5 tips to improve security. We start with Roles, and he does a good job of explaining how most people start, and then demonstrates how you can base a role on other smaller roles to fine-tune what permissions you give a user. He then goes through auditing and scanning, how to set them up and how they work. He then talks about Pod Security Admission and finally Identity and Access management. It's a quick but decent toe dip.
BottomLine: Quick hands on video on 5 practical Kubernetes security tips
==
URL reference: https://www.armosec.io/blog/cve-2023-3676-kubelet-vulnerabilities-on-windows-nodes/
DateReviewed: 2023-08-24
Description: Here's a roundup of a few Windows specific K8s related security issues. This is low level and includes some sample code showing the issue, and another sample showing how to fix the issue. They then explain the root issue here is a lack of input sanitization, or checking on the inputs supplied to K8s. They then go through which versions are vulnerable and how you can check if it affects your cluster. They end with some recommendations right now, and some pearls of wisdom for the future.
BottomLine: Good look at Windows related Kubernetes vulnerabilities and how to detect and mitigate
==
URL reference: https://securityboulevard.com/2023/08/what-not-to-monitor-and-what-not-to-alert-on-in-kubernetes/
DateReviewed: 2023-08-25
Description: Our intro here is great - there are lots of things to monitor in Kubernetes, and watching them all can drive you crazy, so what should you focus on? They start out with three things you shouldn't in general be monitoring, and explain why, giving you some quick wins. Next up is a specific example (container restarts), with some sage advice -- you don't need to page someone for this, but you should be keeping an eye and digging into it during office hours. They look at a couple CPU related metrics, and say to be holistic -- some spikes are fine, but prolonged nailing of the processor is something to dig in to. Even with logging, their message is consistent - does a single log line justify waking someone up? You have to be thoughtful. Overall, a good perspective to consider.
BottomLine: Holistic approach to monitoring and alerting in your Kubernetes cluster
==
URL reference: https://github.com/TrueGoric/k8s-insider
DateReviewed: 2023-08-26
Description: This is a repo, and it seem the idea here is to allow you to have access to a cluster from your local workstation in a zero configuration way. It walks you through the install and setup, which uses wireguard to create the tunnels and rules needed under the hood to do the access.
BottomLine: Interesting way to get access to a Kubernetes cluster remotely
==
URL reference: https://medium.com/@muthanagavamsi/kubernetes-security-dont-forget-these-1eb54259cc28
DateReviewed: 2023-08-27
Description: Okay, so we start with the unsourced stat that the "avg data breach" might cost $5M in 2023, so we should be alert. While I agree with the sentiment, I disagree with using BS numbers to scare people. Next we have an excellent infographic, which covers the "top 5" Kubernetes security topics. After the graphic, there is a short point-form bit of info on each of the five, and the author also reminds us to keep up to date.
BottomLine: Good quick overview of Kubernetes security topics at a high level
==
URL reference: https://gist.github.com/skraga/eae7edeaaba49d13ea0dbeda299db834
DateReviewed: 2023-08-27
Description: Starts by motivating why they are doing this -- a change from the older PSP to the newer Pod Security Standard and the move to using 3rd party admission controllers to make up for less granular control. This is a hands on article, so they then run through getting the env set up. They then show what is protected (and fails to deploy), and then explain a way around this and then shows that it works with an ephemeral container. They go on to discuss why it is a problem, so more scenarios, and at the end explain that this has been patched in a newer revision. But it's an interesting approach and gives food for thought.
BottomLine: Good low level walkthrough of a Kubernetes exploit
==
URL reference: https://medium.com/flat-pack-tech/threat-modeling-as-code-f3555f5d9024
DateReviewed: 2023-08-28
Description: We start by laying out the pre-reqs -- you have to understand a bit about wha threat modeling is. We then visit a definition, and remark that doing threat modeling can be challenging. The author advocates moving away from drawing diagrams of threats to a code approach. So, we're going to do some hands on, so our author explains what we need, tool wise. The "code" he is using is a four level model where we will use UML to describe our model. He then shows a sample bit of UML, and then he breaks down what everything means. We go through more examples, and we see the inclusion of a "risk element" and a risk score, to highlight what the relative risks are. We get a nice diagram with things labelled at the end. I have to say, I like the approach, but the tough part is knowing what risks are where, and this doesn't help in that aspect.
BottomLine: Interesting approach to risk modeling through code
==
URL reference: https://blog.kellybrazil.com/2019/12/05/microservice-security-design-patterns-for-kubernetes-part-1/
DateReviewed: 2023-08-28
Description: Okay, so we're going to go through some microservice design patterns. So, broadly, there are 3 patterns this article will focus on, and we start with a diagram (yay!) to understand what is going on. Our test arch has a public facing web service and internal auth and db services. I actually like their approach, where they take a general tech, show you how it would work, and go through a list of pros and cons, so you can decide which tack to take. We finish up with some recommendations from the author, which they do by size. Overall nice, with lots of refrences and it is part of a series.
BottomLine: Nice practical approach to Kubernetes security implementations
==
URL reference: https://itnext.io/victoriametrics-vmauth-proxy-authentication-and-authorization-44150d9272e
DateReviewed: 2023-08-29
Description: Part of a series, this article is going to talk about muting alerts once you are working on an issue. To allow muting, we have to authenticate, and the author leverages the VMAuth component of their framework. In their walkthrough, we're going to do this in EKS. They then walk through the snippets that we need to create and how to deploy them to get this working. They then walk through different auth methods and types, using passwords and tokens.
BottomLine: Interesting walkthrough of different auth methods through a specific Kubernetes framework
==
URL reference: https://www.freecodecamp.org/news/make-your-kubernetes-environment-secure-efficient-reliable/
DateReviewed: 2023-08-29
Description: It seems we need to improve the operational quality of our Kubernetes cluster, and this article might help? We start with what K8s is, and sets out the basics, including that once a container is set up "right", it can run anywhere. Here we look at the Kubernetes maturity model, which is a 7 phase approach to K8s. We pivot to a specific phase, of operational improvement. Security is important, as are limits for various inbound activities, to prevent overloading. It's also important to be efficient, which includes the right amount of resources. Last but not least, we have to make things reliable. So, this is a decent high level overview into Kubernetes
BottomLine: A high level overview of security, efficiency and reliability for Kubernetes
==
URL reference: https://deploy.equinix.com/developers/guides/choosing-a-cni-for-kubernetes
DateReviewed: 2023-08-30
Description: This article is going to go through some CNIs, or Container Networking Interfaces for Kubernetes. We start with a quick intro to Calico, explaining how it works and what it uses. Then we are presented with Cilium, which uses eBPF as it's magic sauce to enable networking. The argument here is that Cilium allows more granular control over network policies, giving you better control. And there is even a visual editor to help out with crafting policies. They do a quick few snippets on installing and deploying Cilium, along with discussing a few addons you might want. While it's clear that our authors are Cilium fans, I'd like a bit more beef on the Calico side or perhaps another CLI mentioned to motivate the true pros and cons. An interesting discussion none the less.
BottomLine: Good piece on the newer Cilium CNI for Kubernetes
==
URL reference: https://securityboulevard.com/2023/08/how-to-handle-secrets-with-google-cloud-secret-manager/
DateReviewed: 2023-08-31
Description: Apparently the author had done a runthrough of something similar for Azure, which he recommends reading first. We start by comparing how various clouds section things up, to lay the groundwork. We then get a high level intro to Google secrets with descriptions of features and security. Then a few paras on how this compares to Azure. Finally we're onto secrets, and we walk through both console and CLI creeations, as well as usage. Then it goes on a practical tour, showing hands on how to use secrets in a VM, from Python, and from Kubernetes. Next is using secrets in CI pipelines. To finish, they show how to clean up what we created, and include a cheat sheet before finishing up with a summary.
BottomLine: Interesting intro to Google secrets
==
