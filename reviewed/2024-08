URL reference: https://dev.to/jamallmahmoudi/kubernetes-certificate-expiration-x509-1g7d
DateReviewed: 2024-08-01
Description: Seems it's important to understand Cert management for Kubernetes. The motivation they use isn't too strong, just talking about lapsed renewal instead of talking about why you want TLS. We get a laundry list of what certificates are in general, and then what Kubernetes does with them. We then move to the meat of this article -- checking cert validity and expiration. They show CLI commands to display various bits to display the expiry from either openssl or kubeadm. They wisely advise backing the certs up, and then walk through the commands to renew the certs. They also advise to restart the pods and also to do some clean up. Overall a good base, but would have been better with a bit more flow and organisation.
BottomLine: Decent piece on the renewal of TLS certs in Kubernetes
==
URL reference: https://github.com/digitalis-io/vals-operator
DateReviewed: 2024-08-02
Description: This is a repo to keep secrets in sync between an external secret store and Kubernetes secrets so they can be used in various pods. The repo has a video walkthrough, install instructions and examples of how to integrate with various stores, like AWS Secrets Manager and HashiCorp Vault for example. They even mention how to do password rotation as an advanced topic.
BottomLine: Interesting repo allowing you to integrate external secrets seemlessly into Kubernetes
==
URL reference: https://medium.com/@martinko.komorny/grafana-agent-alloy-loki-minio-grafana-in-kubernetes-4fe4894b1341
DateReviewed: 2024-08-03
Description: This article goes through setting up a logging service in Kubernetes. After the motivation, we start with a diagram -- I hope that's a good sign. We also start with great advice - ensure proper logging of your apps. They then talk a bit about the Java logging piece they use and ints config. They include a sample XML file for their logger config. We now move on to some microservices that are logging in JSON format. The LGTM stack uses Minio for storage, which is an S3 like on-prem object store. They give the YAML to get this running. We now move onto managing the stored log files with Loki. There are a few options, and they went with a simple scalable install for Loki. This creates three services - writer, reader and backend. Loki uses labels to write and then read the logs, which it uses for indexing and faster searches. We then get a Helm chart to do the Loki install and setup. Once this is done, we turn to feeding the data into the logging system. In the past we might have used Grafana agent, but this has now been replaced with Alloy which our author opts for. Again we deploy Alloy from a Helm chart. Last but not least, we want to see our logs, so we do the visualizaion through Grafana and deploy this with another Helm chart. It's a good walkthrough.
BottomLine: Walk through setting up logging for Kubernetes
==
URL reference: https://rakowskiii.medium.com/charting-the-waters-exploring-kubernetes-basics-through-a-security-researchers-lens-3c7964ea8d15
DateReviewed: 2024-08-04
Description: So this article will be looking into Kubernetes basics from a security perspective. We start with the usual "what is Kubernetes", and then we move onto the core concepts. (There is a weird unhelpful diagram here). They go through namespaces, pods, nodes, services, and deployments. Each gets a solid paragraph explaining what it is. Now we dive into the architecture, and cover the control plane and node concepts, with sub-concepts covered for each higher level area. We finally get to security, and here we cover network policies, pod security policies, secrets management, and audits. Each has a paragraph on it. So, it's a decent high level overview for someone who has never seen K8s before.
BottomLine: Good high level intro to Kubernetes security for a beginner
==
URL reference: https://securityboulevard.com/2024/07/why-kubernetes-doesnt-manage-users/
DateReviewed: 2024-08-05
Description: This article tackles the question of why Kubernetes doesn't manage users. First, they explain how authentication and authorization happen in Kubernetes - where TLS is used with Certs to figure out what identity should be used and if it is valid, and then RBAC to figure out what an identity should have access to. They point out that this is challenging for larger deployments, so K8s has ability to offload these parts to third party AA providers. They then go through some of the reasons orgs may want to do their own auth, which includes a diverse set of use cases and different security considerations. Next up, we look at ways to hook external connectors for auth up, and these include OIDC, LDAP and Webhooks with custom auth plugins. They then go through each option in turn, with a large secton on how they work, how to config, test, and then configure RBAC to work with them. They tie this up with a motivator on using RBAC properly and suggestions on which 3rd pary auth to use when. Oveall a solid piece.
BottomLine: Good primer and setup walkthrough of user auth on Kubernetes
==
URL reference: https://cloudbelievers.blogspot.com/2024/07/securing-your-kubernetes-kingdom-basics.html
DateReviewed: 2024-08-06
Description: This is supposed to be an article about AKS, but the formatting is bad. On Firefox, the first paragraph is just one long line, which is not great. I'm not usually that worried about this stuff, but makes reading challenging. This is focused on Azure, but it's pretty thin. We get good headings, including network security, identity and access management, container security, secrets management and finally monitoring and logging. Under each heading, we get 2 or usually 3 bullet points on what to do. They then have a section on Best practices which is another 5 bullet points, and finishes with 3 additional consideration points. My honest take is that someone had an idea but not time to write a full article, so did the minimum. The points aren't bad, but everything is super terse and feels like a person new to Azure/AKS would be intimidated by this approach.
BottomLine: Super lean approach to Azure Kubernetes security
==
