URL reference: https://dev.to/jamallmahmoudi/kubernetes-certificate-expiration-x509-1g7d
DateReviewed: 2024-08-01
Description: Seems it's important to understand Cert management for Kubernetes. The motivation they use isn't too strong, just talking about lapsed renewal instead of talking about why you want TLS. We get a laundry list of what certificates are in general, and then what Kubernetes does with them. We then move to the meat of this article -- checking cert validity and expiration. They show CLI commands to display various bits to display the expiry from either openssl or kubeadm. They wisely advise backing the certs up, and then walk through the commands to renew the certs. They also advise to restart the pods and also to do some clean up. Overall a good base, but would have been better with a bit more flow and organisation.
BottomLine: Decent piece on the renewal of TLS certs in Kubernetes
==
URL reference: https://github.com/digitalis-io/vals-operator
DateReviewed: 2024-08-02
Description: This is a repo to keep secrets in sync between an external secret store and Kubernetes secrets so they can be used in various pods. The repo has a video walkthrough, install instructions and examples of how to integrate with various stores, like AWS Secrets Manager and HashiCorp Vault for example. They even mention how to do password rotation as an advanced topic.
BottomLine: Interesting repo allowing you to integrate external secrets seemlessly into Kubernetes
==
URL reference: https://medium.com/@martinko.komorny/grafana-agent-alloy-loki-minio-grafana-in-kubernetes-4fe4894b1341
DateReviewed: 2024-08-03
Description: This article goes through setting up a logging service in Kubernetes. After the motivation, we start with a diagram -- I hope that's a good sign. We also start with great advice - ensure proper logging of your apps. They then talk a bit about the Java logging piece they use and ints config. They include a sample XML file for their logger config. We now move on to some microservices that are logging in JSON format. The LGTM stack uses Minio for storage, which is an S3 like on-prem object store. They give the YAML to get this running. We now move onto managing the stored log files with Loki. There are a few options, and they went with a simple scalable install for Loki. This creates three services - writer, reader and backend. Loki uses labels to write and then read the logs, which it uses for indexing and faster searches. We then get a Helm chart to do the Loki install and setup. Once this is done, we turn to feeding the data into the logging system. In the past we might have used Grafana agent, but this has now been replaced with Alloy which our author opts for. Again we deploy Alloy from a Helm chart. Last but not least, we want to see our logs, so we do the visualizaion through Grafana and deploy this with another Helm chart. It's a good walkthrough.
BottomLine: Walk through setting up logging for Kubernetes
==
