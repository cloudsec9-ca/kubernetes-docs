URL reference: https://dev.to/code42cate/docker-swarm-vs-kubernetes-41m9
DateReviewed: 2025-03-01
Description: Our article today is going to compare Kubernetes to a Docker product called Swarm. We start with an intro paragraph, and jump into What is Kubernetes, with a quick overview and a decent diagram. We have some point form that list the advantages and challenges of Kubernetes. Next up, we have a what is Docker Swarm section, that has an overview and a diagram too, before another point form section with pros and cons of Swarm. We then pivot to a head to head comparison, looking at install and setup, scaling, load balancing, and ecosystem. They are quick compares, but are good comparion points. They even give some broad recommendations!
BottomLine: Good quick comparison of Kubernetes vs Docker Swarm as container engines
==
URL reference: https://www.linkedin.com/pulse/selinux-enforcement-openshift-vs-kubernetes-deep-dive-sondhiya-pd7xc
DateReviewed: 2025-03-02
Description: This article is a contrast between how security is handled in Kubernetes vs how it's handled in OpenShift. We start with the point that OpenShift starts with SELinux in the mix, while vanilla K8s does not need to. They point out that this provides a level of file and process security, and could prevent one K8s exploit in the wild from working. They do acknowledge that SELinux can cause permissions issue, and go through a quick way to resolve that. They then go through a few different use cases, demonstrating the advantage that OpenShift has to various security issues. My take - while the use of SELinux is showcased, ordinary K8s can use it too, so this is more an ad for using enhanced Linux security then an endorsement of OpenShift. 
BottomLine: Good walkthrough of the use of SELinux on Kubernetes to enhance security
==
URL reference: https://www.civo.com/learn/how-to-mitigate-kubernetes-runtime-security-threats
DateReviewed: 2025-03-03
Description: Our aritcle today will dig into mitigating issues with Kubernetes from a security perspective. We start with some stats on usage and where flaws get discovered. They then define run time security, which is protecting your running application and understanding it. They give some examples of exploits that can lead to bad outcomes, like API key compromise. Run time security looks for things like priv escalation and malware injection, and take a more proactive approach. We get a diagram just before the How does it work section. Basically an agent sits on each node and monitors events and logs them. The way this is done is by leveraging eBPF to gain insight into many levels of program execution. It explains how eBPF does its work, both in starting processes and watching network traffic. They introduce a chart with 4 tools that help do this, and do a high level comparison. We then grab Tetragon and do a hands on deeper dive, including things like YAML policies for tracing. Decent coverage.
BottomLine: Good intro to Kubernetes run time security concepts with a dive into one tool as an example
==
URL reference: https://www.crowdsec.net/blog/kubernetes-security-with-crowdsec-waf
DateReviewed: 2025-03-04
Description: This article will talk about using a WAF with Kubernetes to enhance security. They are going to look at the CrowdSec WAF and do it as a tutorial, so let's get going. We start with a bit of background, and then move on to our tutorial goal - protecting a WordPress install. We then get a list of pre-reqs and talk a bit on architecture, noting they are using an older ingress-nginx due to using a lua plugin that isn't supported in the latest. So, they go through the layout, which inlcudes an AppSec pod, an LAPI pod, the ingress-nginx component which forwards requests and blocks ones analyzed malicious, and our application of course. We get a diagram, with flows showing how things work for users and bad actors. They install WordPress and add a vulnerable plugin to it, and confirm the vulnerability with a vuln scanner. They create and explain a Helm chart to install CrowdSec WAF, before effecting the install. There is a bit more config, and then we finally re-test the vuln with the scanner, and are denied! They finish up by showing how to craft a custom rule. Actually a decent walkthrough.
BottomLine: Solid walkthrough of using a WAF in Kubernetes to ramp up security
==
URL reference: https://medium.com/@haroldfinch01/what-is-an-endpoint-in-kubernetes-58bfd4c11a94
DateReviewed: 2025-03-05
Description: This article will take us through what an endpoint is in Kubernetes. They start in with a definition, which is the IP address and port where a service or pod can be accessed. They explain what a service is, and how it relates to an endpoint, and what an Endpoint object is. They also talk about why an endpoint is needed. They walk through viewing what endpoints are available overall, and for a specific service. They even note you can have an endpoint without a service. They go through some use cases, and even talk a bit about a newer tech called EndpointSlices. A very cool look!
BottomLine: Good amount of detail in this exploration of Kubernetes Endpoints
==
URL reference: https://thenewstack.io/why-your-api-strategy-needs-a-rethink/
DateReviewed: 2025-03-06
Description: This article hopes to have us revisit our API strategy. We start with their background - fast moving devs use many 3rd party APIs to get things done through a complex platform. They posit whether this makes sense when looked at overall. As devs do, they add things to provide functionality; in their example, they add and ELK stack to manage logs, which baloons out to ingestion, visualization, tracing and metrics, each with an API and associated overheads. They point out in using a framework, you end up with things you might not be doing explicitly, but rather is done on your behalf by a package or module. Managing dependencies, versions and API keys can be a burden. We then move on to microservices, which has lots of advantages, but suffers from autonomy meaning 3 divergent tools to manage something like logs. They cover Security and CI/CD in the same vein - tooling means API and more complexity. They even touch on cloud services themselves. They postulate a reason someones we lose track of 3rd party APIs is that they are a "temp fix" to a specific problem, which just lives on forever. The solution is to recognize, document and not let things get lost.
BottomLine: Very good thinkpiece about 3rd party APIs in Kubernetes and Cloud Native
==
