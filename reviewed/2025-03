URL reference: https://dev.to/code42cate/docker-swarm-vs-kubernetes-41m9
DateReviewed: 2025-03-01
Description: Our article today is going to compare Kubernetes to a Docker product called Swarm. We start with an intro paragraph, and jump into What is Kubernetes, with a quick overview and a decent diagram. We have some point form that list the advantages and challenges of Kubernetes. Next up, we have a what is Docker Swarm section, that has an overview and a diagram too, before another point form section with pros and cons of Swarm. We then pivot to a head to head comparison, looking at install and setup, scaling, load balancing, and ecosystem. They are quick compares, but are good comparion points. They even give some broad recommendations!
BottomLine: Good quick comparison of Kubernetes vs Docker Swarm as container engines
==
URL reference: https://www.linkedin.com/pulse/selinux-enforcement-openshift-vs-kubernetes-deep-dive-sondhiya-pd7xc
DateReviewed: 2025-03-02
Description: This article is a contrast between how security is handled in Kubernetes vs how it's handled in OpenShift. We start with the point that OpenShift starts with SELinux in the mix, while vanilla K8s does not need to. They point out that this provides a level of file and process security, and could prevent one K8s exploit in the wild from working. They do acknowledge that SELinux can cause permissions issue, and go through a quick way to resolve that. They then go through a few different use cases, demonstrating the advantage that OpenShift has to various security issues. My take - while the use of SELinux is showcased, ordinary K8s can use it too, so this is more an ad for using enhanced Linux security then an endorsement of OpenShift. 
BottomLine: Good walkthrough of the use of SELinux on Kubernetes to enhance security
==
URL reference: https://www.civo.com/learn/how-to-mitigate-kubernetes-runtime-security-threats
DateReviewed: 2025-03-03
Description: Our aritcle today will dig into mitigating issues with Kubernetes from a security perspective. We start with some stats on usage and where flaws get discovered. They then define run time security, which is protecting your running application and understanding it. They give some examples of exploits that can lead to bad outcomes, like API key compromise. Run time security looks for things like priv escalation and malware injection, and take a more proactive approach. We get a diagram just before the How does it work section. Basically an agent sits on each node and monitors events and logs them. The way this is done is by leveraging eBPF to gain insight into many levels of program execution. It explains how eBPF does its work, both in starting processes and watching network traffic. They introduce a chart with 4 tools that help do this, and do a high level comparison. We then grab Tetragon and do a hands on deeper dive, including things like YAML policies for tracing. Decent coverage.
BottomLine: Good intro to Kubernetes run time security concepts with a dive into one tool as an example
==
URL reference: https://www.crowdsec.net/blog/kubernetes-security-with-crowdsec-waf
DateReviewed: 2025-03-04
Description: This article will talk about using a WAF with Kubernetes to enhance security. They are going to look at the CrowdSec WAF and do it as a tutorial, so let's get going. We start with a bit of background, and then move on to our tutorial goal - protecting a WordPress install. We then get a list of pre-reqs and talk a bit on architecture, noting they are using an older ingress-nginx due to using a lua plugin that isn't supported in the latest. So, they go through the layout, which inlcudes an AppSec pod, an LAPI pod, the ingress-nginx component which forwards requests and blocks ones analyzed malicious, and our application of course. We get a diagram, with flows showing how things work for users and bad actors. They install WordPress and add a vulnerable plugin to it, and confirm the vulnerability with a vuln scanner. They create and explain a Helm chart to install CrowdSec WAF, before effecting the install. There is a bit more config, and then we finally re-test the vuln with the scanner, and are denied! They finish up by showing how to craft a custom rule. Actually a decent walkthrough.
BottomLine: Solid walkthrough of using a WAF in Kubernetes to ramp up security
==
URL reference: https://medium.com/@haroldfinch01/what-is-an-endpoint-in-kubernetes-58bfd4c11a94
DateReviewed: 2025-03-05
Description: This article will take us through what an endpoint is in Kubernetes. They start in with a definition, which is the IP address and port where a service or pod can be accessed. They explain what a service is, and how it relates to an endpoint, and what an Endpoint object is. They also talk about why an endpoint is needed. They walk through viewing what endpoints are available overall, and for a specific service. They even note you can have an endpoint without a service. They go through some use cases, and even talk a bit about a newer tech called EndpointSlices. A very cool look!
BottomLine: Good amount of detail in this exploration of Kubernetes Endpoints
==
URL reference: https://thenewstack.io/why-your-api-strategy-needs-a-rethink/
DateReviewed: 2025-03-06
Description: This article hopes to have us revisit our API strategy. We start with their background - fast moving devs use many 3rd party APIs to get things done through a complex platform. They posit whether this makes sense when looked at overall. As devs do, they add things to provide functionality; in their example, they add and ELK stack to manage logs, which baloons out to ingestion, visualization, tracing and metrics, each with an API and associated overheads. They point out in using a framework, you end up with things you might not be doing explicitly, but rather is done on your behalf by a package or module. Managing dependencies, versions and API keys can be a burden. We then move on to microservices, which has lots of advantages, but suffers from autonomy meaning 3 divergent tools to manage something like logs. They cover Security and CI/CD in the same vein - tooling means API and more complexity. They even touch on cloud services themselves. They postulate a reason someones we lose track of 3rd party APIs is that they are a "temp fix" to a specific problem, which just lives on forever. The solution is to recognize, document and not let things get lost.
BottomLine: Very good thinkpiece about 3rd party APIs in Kubernetes and Cloud Native
==
URL reference: https://www.zippyops.com/kubernetes-ephemeral-containers-enhancing-security-and-strea
DateReviewed: 2025-03-07
Description: This article is going to talk a bit about Kubernetes ephemeral pods. We start with a bit about why we'd want them in the first place - inspection and debugging. Next, we do a deeper dive into what Ephemeral containers are, which boils down to not running the primary app, but sharing other resources like namespace and volumes. After we are done, we can just remove the pod. The argue they are a security enhancement, as troubleshooters won't get long-lived access to an application workload. They have a few sections where they go over features and use cases. To use them, you have to be at Kubernetes 1.23 or later, ensure your kubectl version is equal or greater than the backend, and that you have kubectl debug permission. We're then treated to a walk through, with commentary, of setting up, running, using, and removing an ephemeral pod. The even have a best practices for using them; Great article.
BottomLine: Awesome article with walkthrough of Kubernetes epehemeral pods
==
URL reference: https://carlos.mendible.com/2025/02/02/installing-azure-service-operator-on-aks-with-terraform/
DateReviewed: 2025-03-08
Description: Our article is going to walk through installing an Azure Service Operator. We start with a bit of an outline, and then jump into a Terraform config that will do the spin up of services. We then go through variables, resource groups, virtual networks, AKS cluster and finally the Service Operator itself. Now on to Deploying the cluster, grabbing the cluster creds and finally rolling out the operator. I wish there was a bit more verbiage, but it's fairly simple but well laid out.
BottomLine: Decent walkthrough of deploying an Azure system operator on AKS
==
URL reference: https://medium.com/@josephsims1/how-i-supercharged-my-local-kubernetes-setup-f3b260b5f793
DateReviewed: 2025-03-09
Description: This article talks about getting the most out of your local Kubernetes. They are going to use a distro called Kind, Kubernetes in Docker, to show what is possible. We start with some background, and a link to another person who has done this. He's going to roll out something a bit simpler by omitting some packages, but also adding a few things he wanted. He mentions he even tried out Podman, but had issues getting the network to be accessible. He then used Docker and let's us know his setup, and then he installs MetalLB from Helm. Next up is Istio with a custom domain, before verifying the setup. So the goals were to not use localhost and have no cert warnings, and he did that. He has a list of things to add/improve on, and it's got some decent ideas. Overall a good piece.
BottomLine: Article talks about using local Kubernetes for bigger tests and wider development
==
URL reference: https://medium.com/beyond-devsecops/a-pragmatic-look-at-the-kubernetes-threat-matrix-d58504e926b5
DateReviewed: 2025-03-10
Description: This article attempts to tackle the Kubernetes threat matrix -- explaining that K8s is a synthesis of a number of complex technologies, which when run and administered can be complex itself. They start by talking about priorities, which is important because there may be thousands of potential issues but you can't deal with them all at the same time. They have a list of questions to go through to determine priority, and then point to having a process to deal with them. They then show us an example of an acutal matrix from a generic cluster, so we know what we're looking at. They then use this matrix to build a roadmap, to help discover, triage and remediate different threats which are assessed at different threat levels. We get another diagram as they talk about process, scope of K8s security, and how to proceed. They talk about Secrets, CI/CD, and Ingress. To see how this works in a specific instance, they work through how secrets might work in Kubernetes. We get two diagrams - a basic arch diagram for K8s, and a backup flow diagram for ETCD. They talk a bit about how secrets flow and are managed, but also how if you back up your control plane ETCD, you could be exposing your secrets if you aren't careful. Good piece with lots of great points.
BottomLine: Excellent discussion piece on tackling Kubernetes threats
==
URL reference: https://levelup.gitconnected.com/moving-to-bottlerocket-os-for-enhanced-security-performance-547b7fb5d564
DateReviewed: 2025-03-11
Description: This article is going to be a tutorial on migrating over to Bottlerocket OS. We start with a quick overview and intro of the dev writing, before jumping into a "what is Bottlerocket OS" section. They explain it's container focused, with emphasis on security, minimalism and automated updates. They then go through the benefits in more details, like read only root filesystem, SELinux, automatic updates among others. Prereq is an EKS cluster, but they do note they use Karpenter to manage it. They note the current config, which is an EC2 instance with an 80GB disk; in the Bottlerocket OS scenario, they set aside 20GB for the boot/OS disk, and 80GB for the working disk, which is where container images and whatnot are stored. Then they get into some practical things - Bottlerocket does not have SSH access, so to get access, you have to enable the disabled by default admin container and SSH into it. They also show how to use kubectl debug node, which some use for troubleshooting or debugging. They also mention you can use SSM to access the boxes if need be. The author goes through some issues they had when migrating, which might give insight into approaches. It's a decent starting point and a good read.
BottomLine: Solid tutorial article on using Bottlerocket OS for your containers
==
URL reference: https://medium.com/@chamathupeka/managing-kubernetes-stateful-workloads-a-complete-guide-55ee4b843370
DateReviewed: 2025-03-12
Description: Our article today seeks to explain how to use Stateful workload in Kubernetes. We start with kudos for Kubernetes as a container manager, but are told we need a bit more info to properly manage things like DBs where state needs to be kept. We start with a very high level overview in point form, letting us know what we'll cover. They cover a bit of background and then go through the differences between stateful and stateless apps. They note what stateful apps need, including data persistance and consistency, stable network identities, and other considerations like backup/recovery and scaling considerations. We now start digging in, and tackle the K8s resouce called StatefulSets which will help us to build a stateful app. The note that persistent volumes, coupled with the sets, are what are key. They mention things like Headless service and Pod identity as things we have to be aware of. One thing they do mention is ordered Pod creation and deletion, which might be critical when one service depends on another service to be up and running before starting. They do some deep dives on storage management, and even have a Q/A section. Decent article.
BottomLine: Solid article on using Kubernete stateful services.
==
