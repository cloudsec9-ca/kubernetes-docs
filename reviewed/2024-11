URL reference: https://medium.com/@josielol/unleashing-the-t-rex-how-containers-sometimes-fail-to-contain-1710b6cc7990
DateReviewed: 2024-11-01
Description: Our article here is going to touch on how containers sometimes fail to contain - and they start with an analogy to Jurrasic Park, and how the dinos were not contained. We dive in starting with container basics, going though how it's a single bundle running on an OS, which is mostly isolated. They point out that at a low level, a container is just a child on the host system. We get a neat diagram illustrating containers/namespaces and the Linux features that help out. The container runtime are the gates, allowing containers to start, do things, and stop. But they say, gates sometimes fail. We get another diagram, with arrows and a label of container escapes, so let's see what we're going to delve into. They talke about permission issues with mounts, allowing unintended file access; or a buffer overflow, allowing access to shared memory. Misconfigs can even allow CLI commands on the host from the container, and lastly, priv escalation that results in root access, allowing the attacker carte blanche. Next up they are going to do a demo with eBPF. They say that clever code can get around the verifier and JIT compiler, allowing execution of unsafe bytecode. They go into a bit of detail on how the verifier works, ensuring there are no unreachable instructions and simulating each control branch. They point to a few actual instances of CVEs involving the verifier, and are going to focus on a recent one. The walkthrough is quite simple - we build a user container, include the nasty code in the image, then run the binary and are root when done. Pretty cool. They go into mitigations with supply chains and SBOMs, but basically you have to be vigilant. Excellent article.
BottomLine: Awesome article showing a straightforward container escape in Kubernetes
==
URL reference: https://achievers.engineering/load-testing-kubernetes-resolving-bottlenecks-and-improving-performance-part-2-c4f08102f105
DateReviewed: 2024-11-01
Description: This article is a followup on a previous case where they did some performance tuning. They take that as a baseline and attempt to get even more throughput here. We start by looking at metrics like throughput, errors, latency and scalability. They assign goals, like doubling the baseline throughput, as where they want to go. They mention that as Kubernetes scales the cluster, that current strategy doesn't take full advantage, as already connected clients stay with the same pods, impeding proper load balancing. They show this in a graph. They say using Istio solves this, as it has proxies to help loadshare better, and so they move to this. They show the YAML needed, and an after graph, showing a much more even usage among the clients. They talk a bit about errors and latency, and it's important to note these are config only changes -- none of this needs any code change so far. Next they show how by doing tiny tweaks you can get some exta performance out of the system. They go through a few more esoteric tweaks, before circling back and noting they had achived all of the goals they had put out. Interesing but highly technical piece.
BottomLine: Low level performance tweaks to get more out of your Kubernets cluster
==
URL reference: https://aws.plainenglish.io/kubernetes-networking-in-the-simplest-way-d84e3b7ed940
DateReviewed: 2024-11-02
Description: This article aims to introduce Kubernetes networking in a simple way. We start with a diagram, so that is good. We dive in basically right away, covering basics, like each pod getting an IP and not needing to link or map things internally for K8s. They also explain that each pod can talk to any other pod without NAT, and programs on a node can talk to all pods on that node by default. Next we cover four concerns - now containers in a pod talk, how cluster networking allows comms between pods; how services allow apps to be reached from outside the cluster, and that services can be used inside the cluster. To finish up, we get some YAML files and CLI commands to demonstrate. Overall, it's decent but seems not well formed and flowing, so I'd say an okay toe dip.
BottomLine: Ok intro to Kubernetes networking and related concepts
==
URL reference: https://www.cncf.io/blog/2024/10/17/keep-up-with-cloud-native-and-kubernetes-security-with-the-updated-cks-certification/
DateReviewed: 2024-11-02
Description: This article talks about updates to the CNCF exam. First, they start by highlighting the growth of the Kubernetes community and CNCF in the past few years, including the number of people certified. They then explain that as things evolve and change, so must the skills that people have and also the exams. The exam was updated on October 15th, and while things like cluster stup and hardening will remain, some things will be phased out while others will be added, and some of the weights may change. My take -- I wish they'd talked a bit more about the broad areas of change, like what new topics would be included and what will be phased out.
BottomLine: News about changes to the CNCF certification exam but no details
==
URL reference: https://medium.com/@simardeep.oberoi/cilium-advanced-network-policies-and-observability-in-kubernetes-fbb4fdd747ba
DateReviewed: 2024-11-03
Description: We start with Kubernets being great, but it only able to manage layer 3 and 4 traffic - implying we're missing some observability. To our rescue comes Cilium, which they point out can do Layer 7 traffic control and all kinds of other bells and whistles including observability. They also point out that while K8s uses IP based traffic models, Cilium uses pod labels to ensure even if IPs change due to K8s dynamic nature, policies are applied correctly. We then do a bit of CLI and YAML exploring, to get some hands on. Further, they point out we can filter not just on destination, but on things like the URL path and request method, giving much finer grained control. We do some more hands on, and then talk a bit about high-performance considerations. Overall a good article.
BottomLine: Solid article on using Cilium to enforce network policies in Kubernetes
==
URL reference: https://learnk8s.io/kubernetes-services-and-load-balancing
DateReviewed: 2024-11-03
Description: Our article will walk us through things like services and load balancing with a 2-tier application. They give us a small setup and then right into things - YAML to deploy the backend pods. We do some CLI to spin them up and check they are running. We now go through the process of setting up a service, so the frontend pods can talk to the backend, and we start with a YAML file. We then do some CLI magic, finally confirming the service is up on an IP:port combo. To simplify things, we look at using coreDNS to map the IP, so our frontend doesn't need to know the IP directly. We walk through setting up and using DNS, and verify our service resolves. Now we do a bit of deep diving, going through the weeds of how services work behind the scenes. It also explains the role kube-proxy plays in getting the traffic to the right spot. It explains how K8s leverages iptables to do the re-routing of packets to the right pod(IP) for a service. They have a few good diagrams here, which are great. They then follow a packet through, so you get a sense of how the flow actually works. After all of this, we finally need to deploy the frontend pods, and we start with the YAML for that. This time we deploy three replicas, in contrast to the one we did for the backend. We follow the CLI commands to spin them up and verify they are running. We then expose them, so traffic from outside the cluster can reach the pods. They also explain how Load Balancing works. There are some other things I won't cover, but each part has diagrams and really good explainations -- this is one of the best explainers on this stuff that I've come across.
BottomLine: Excellent explainer of Kubernetes services and how they work
==
URL reference: https://securityboulevard.com/2024/10/policy-as-code-in-kubernetes-security-with-seccomp-and-network-policies/
DateReviewed: 2024-11-04
Description: Kubernetes is ever evolving, and as such players have to understand the impacts of things like Policy as Code have, and this article will attempt to do that. There are two main was to achieve this - one is seccomp profiles, and the other is network policies. They relate PaC to things like IaC for infrastructure. They have similar goals as IaC, which is to reduce human error, ensuring consistency and accelerating development velocity. They explain what seccomp is, how it works and gives a sample of the config bits. They then cover some best practices. We move on to network policies, where they explain the why and how, and explain the approach. They tie in some guardrails to run this and finally explain how to run this togther. A bit in the weeds in spots, but decent overall.
BottomLine: Decent article on how to do policy as code in Kubernetes
==
URL reference: https://medium.com/@dmosyan/reliability-and-security-for-azure-kubernetes-service-545edf7e626d
DateReviewed: 2024-11-04
Description: Okay, so this is a bit weird. There is no motivation or intro to this piece, and we start with a diagram, which I'm usually happy about. But our first text is a "design checklist" done in point form, and that is how this whole piece is constructed. The tips are good, and since this is all AKS the insights can be helpful. Next up are recommendations, and they also seem solid, and have explainations where appropriate. Moving on we get to security, with some guidelines and recommendations. But other than this general approach info, the piece doesn't go anywhere else. While I'd say AKS users might get something out of it, it's a bit hard to read for flow reasons.
BottomLine: Interesting recommendations for AKS Kubernetes but laid out in a difficult flow
==
URL reference: https://medium.com/@noah_h/on-kubernetes-network-security-exploring-cilium-and-istio-implementations-ba687b685d26
DateReviewed: 2024-11-05
Description: This piece explores ways to utilize Cilium and Istio to improve network security. We start with a video link that inspired the piece. The way this is laid out is to introduce a term, explain it, and include a diagram which shows the place in the system. We start with CNI, then cover service mesh, and then a short para about how they are related. They take similar approaches with Istio and Cilium, explaining what they are, how they work, and what is going on under the hood. Overall very good.
BottomLine: Good piece on Istio and Cilium and how they work on Kubernetes
==
URL reference: https://www.helpnetsecurity.com/2024/10/24/f5-big-ip-next-for-kubernetes/
DateReviewed: 2024-11-05
Description: This article talks about F5's BIG IP product in relation to Kubernetes. It feels like an ad more than a tech document, as we talk a lot about AI but not so much about how this helps in Kubernetes. Lots of buzzwords and name dropping, but not a lot of explaination of what it does or how it does it. How does it help AI? It implies it makes it faster, but I'm not sure how? It also "protects" the AI landscape, but again, how? We end with a bunch of quotes, none of which helps on what it does.
BottomLine: More of a product pitch then a tech document - skip
==
URL reference: https://medium.com/@RocketMeUpCybersecurity/container-security-how-to-defend-docker-and-kubernetes-environments-b1d9aa215e60
DateReviewed: 2024-11-06
Description: We start with container being good, but there are security issues. We start with an overview of containers, so assume almost no knowledge here. We then cover the issue from security issues - breaches, downtime and compliance issues. Next we move to various actual issues, where they take us through the risk, and example and finally a solution. They cover image issues, breakouts, configuration problems, and API config issues. They then tackle each of these with mitigations and hardening. They then talk about things like RBAC and various policies that help enforce limits and security. Overall a decent approach.
BottomLine: Good overall approach to most aspects of Kubernetes security
==
URL reference: https://itnext.io/how-your-confidential-containers-can-securely-retrieve-secrets-93d6f55b7b42
DateReviewed: 2024-11-06
Description: This article tries to explain how confidential computing works regarding secrets. So, I'll say there is a diagram and a bunch of flow charts, which is awesome for an article usually. It is also technical, which I also usually think is good -- but not in this case. While it gets into the weeds of data flow and explains that fairly well, it doesn't really explain the what and the why in a good way. Like I can understand how things flow, but I don't understand why this pod/node combo should get a key and the other one shouldn't. What problem does this guard against, and how does it achieve that? It's a bit fuzzy.
BottomLine: Okay job of describing the mechanism of confidential computing but not the why
==
URL reference: https://thenewstack.io/kubernetes-advances-cloud-native-data-protection-share-feedback/
DateReviewed: 2024-11-07
Description: Our article tries to compare native VM capabilities compared with Kubernetes resources. They do mention that since K8s is more ephemeral, different approaches are needed for things like DR. They focus on something called Changed Block Tracking (CBT), which they mention allows efficient incremental backup. While popular on VMs and other systems, they were missing on K8s until now. To help build this, K8s introducted StatefulSets and then the Container Storage Ingerface (CSI), which allowed containers to use true persistent storage. To support these changes, VolumeSnapShot was rolled out in 2020, which then allows CBT to be an option. They have some more details an a small diagram to close things up. My take is while this gets into the weeds, they do a lot of upfront work to explain things and it's a good piece.
BottomLine: Very solid into to CBT on Kubernetes and how it enables incremental storage backups
==
URL reference: https://medium.com/@alibalbars/how-to-deploy-a-node-application-with-kubernetes-f0d70a7a7b7f
DateReviewed: 2024-11-07
Description: This is actually a decent walkthrough on how to containerize a Node app. The assumption is you know a bit of Node, but you've never seen Docker or Kubernetes. He drops the JS dependencies and the bit of code to create a basic app, and we're off to the races. He takes us through building a Docker image with a Dockerfile, and then how to install minikube on MacOS. We then start minikube and load in the image we just created, before creating the deployment YAML and spinning up the deployment. They even explain the YAML line by line. To make it useful, they also go through creating a Service with the YAML and deployment to allow non-cluster computers to talk to it. Finally, they walk us through minikube tunnel, which allows us to connect to the service from our computer. A very good walkthorugh!
BottomLine: Great walkthrough of taking a Node app and turning it into an image and deploying it to Kubernetes
==
URL reference: https://thenewstack.io/how-to-run-databases-on-kubernetes-an-8-step-guide/
DateReviewed: 2024-11-08
Description: Our article points out that while Kubernetes built its foundation on stateless application, today you can run a DB on Kubernetes. Now, our author claims stateless apps do not keep data between requests, whereas stateful persists info between them. To help achieve this, any database pod needs a persistent volume or PV in K8s parlayance. They point out for scaling, we can use leader/follower arch where the primary database handles all writes and reads are sent to replicas. They talk about StatefulSets, where data is retained even if a pod is restarted, and some identifies are stable. Now they venture into a tutorial to set up a Database on K8s. They use MySQL, and go through all the steps and YAML needed to create the infra and db itself, and how to snag the logs. They also touch on doing backups and creating alerts. Overall a good piece.
BottomLine: Background and tutorial on setting up a Database in Kubernetes
==
URL reference: https://itnext.io/exposing-kubernetes-apps-to-the-internet-with-cloudflare-tunnel-ingress-controller-and-e30307c0fcb0
DateReviewed: 2024-11-08
Description: This article will go through setting up a Cloudflare tunnel to point to a local Kubernetes cluster, ideal for devel or home uses. We start with a diagram, always a good spot to start. They explain why it's good to have your own domain, and then dive into what a Cloudflare tunnel is. The idea is your local box connects outbound to Cloudflare, allowing a connection to be made from CF back into your local app. They argue while you can connect the tunnel to a specific service, they prefer to hook it up to Ingress, so you can then adjust it as your local situation changes. We now go through the pre-reqs and outline how this will be done - the author is using KinD and a domain. He then goes through creating the cluster and installing Ingress, then creating the namespaces for external-dns and cloudflared, the bit that connects outbound. He then shows how to create a CF token and save it in the config through secrets. There is some setup on  the CF side theat he goes through, and then sets up TLS. Finally we create the Ingress to connect to a blog app as a demo. They test and show we can connect to the blog. Interesting little article.
BottomLine: Neat article on using Cloudflare tunnel to connect to a home Kubernees install
==
URL reference: https://dzone.com/articles/right-sizing-gpu-and-cpu-resources-using-kubernetes
DateReviewed: 2024-11-09
Description: While Kubernetes is a good way to approach AI workloads, this article argues that we need to pay attention to things like cost and availability of GPUs when running these apps. We start with a diagram and a bit of explaination, talking about model training and inferencing and how each workload works. They tease out a way to target a specific GPU class and type, and bind to it with either a high or medium priority, depending on the nature of the workload. They do mention there is more to it, but they are trying to cover broad strokes here. They then show how to mark the nodes and pods in YAML to get the desired effect. We are then shown how to manage GPU resources, including an open source script that surfaces GPU utilization. Overall, an interesting discussion.
BottomLine: Interesting article on managing GPU resources with Kubernetes
==
URL reference: https://itnext.io/the-challenge-presented-by-secrets-in-declarative-configuration-193a4d12b08e
DateReviewed: 2024-11-09
Description: This article talks about secrets in Kubernetes, and starts off by talking about what types of things we might consider a secret. Mainly used for things that allow access, like passwords, API keys and other credentials. We often don't want them stored or logged, and want them protected. They talk about other considerations, like rotation and opacity. They do suggest short-lived tokens where possible, but this isn't always feasible. Our author explains that K8s secrets were solving having hardcoded values in an image, or even checked into the source code control system. They do mention other systems, and touch on the challenge is how to get the secret into the pod that needs it securely and easily. They also point out that some vendor solutions aren't portable, and make sharing secrets harder in development or alternate deployments, as opposed to K8s secrets. I like this discussion, even if this article is just a starting point.
BottomLine: Interesting topic of how to store secrets in Kubernetes
==
URL reference: https://www.helpnetsecurity.com/2024/10/28/emily-long-edera-kubernetes-clusters-security/
DateReviewed: 2024-11-10
Description: This piece is an interview with an industry person about Kubernetes security. Unlike most K8s sec pieces, this article says that things have gotten better security wise, but focus here is on managed K8s at a provider. But self-managed are still problematic it seems. One thing they mention is keeping up to date, but the other thing they talk about are isolation technologies. They do touch on all of the usual K8s security bits, but talk a bit about treating containers like a VM, which fully insulates each pod from every other. It's a neat approach, but they don't explain the implications too much.
BottomLine: Introduces but doesn't explain using isolation to secure Kubernetes containers
==
URL reference: https://www.techtarget.com/searchitoperations/tutorial/Step-by-step-guide-Get-started-with-Weave-for-Kubernetes
DateReviewed: 2024-11-10
Description: This article is a product pitch for a CNI called Weave, but it's actually a GOOD one. They explain what it does, give a link to K8s networking video, and contrasts it with competitors, before explaining how to set it up. No marketing babble, no testimonials, tech info and here is how you get it going. Refreshing.
BottomLine: Neat article on Weave - a CNI for Kubernetes
==
URL reference: https://nodeflix.com/the-future-of-cloud-devops-emerging-trends-and-technologies-to-watch/
DateReviewed: 2024-11-11
Description: This article is a toe dip into new DevOps tech that might be interesting. As a toe dip, they don't really dive into anything; it's more calling out a tech and then talking a little bit about what it is. They cover serverless computing, Kubernetes and containers, AI and ML, DevOps for edge compting and finally enhanced security practices. I'd like to have seen them dig a bit deeper, maybe an intro and then a para or two on where things are going and interesting topics in the area, but this is a survey and they went light. Decent for what it is.
BottomLine: Decent toe-dip into five important technologies in the DevOps space
==
URL reference: https://dev.to/cicube/sidecar-containers-in-kubernetes-2kj0
DateReviewed: 2024-11-11
Description: This article will dive into Sidecar containers. We start with a defintion, which is that we use sidecars to do support work, like logging, freeing the main container to only worry about running the main app. They also point out sidecars can be used in networking approaches like meshes. Next up we get practical, and they show us a YAML config for a sidecar, and then they break down the config line by line. We then move onto how Sidecars interact with Pod lifecycles, including explaining that generally sidecars are started first and left running after the main app, in case their duties require that. They also contrast jobs with Sidecars and explain the roles of Containers in a pod. They venture into things like resource limits and constraints.
BottomLine: Good walkthrough of Sidecars on Kubernetes
==
URL reference: https://8grams.medium.com/talos-linux-the-linux-distro-that-brings-you-kubernetes-on-bare-metal-efbde55f190a
DateReviewed: 2024-11-12
Description: This article talks about using Talos Linux as your Kubernetes OS of choice. We start by talking a bit about Talos, which is a Kubernetes focuse OS. It tries to be more secure, by excluding things like SSH; it reduces included packages and is "API driven" in management. At it's core, it is immutable, a good fit for K8s philosophy of deploying new copies rather than changing on the fly. We get a diagram, and they talk a bit about the API, about how Kubelet is integrated into the OS and how the Networking stack is closely aligned with K8s. They then talk a bit about K8s on VMs vs K8s on bare metal, and the advantages and disadvantages of that. They talk about some other managed K8s, like GKE, Rancher and Openshift and how Talos has advantages. They then go through some benefits and challeges, and even a use case for Talos. A decent high level tour!
BottomLine: Decent high-level tour of Talos, a bare metal OS for Kubernetes
==
URL reference: https://medium.com/@muhammadhuzaifa02134182093/practical-implementation-of-rbac-in-kubernetes-fa1f1a79db78
DateReviewed: 2024-11-12
Description: This article is about Kubernetes RBAC, or role based access control. They start by trying to explain real-life roles and how they relate to what people do, before transitioning to talking about K8s and how roles are used in it. Honestly I thought this was going to be a bad article, but after a not great intro they have a pretty thorough hands on part. They start from certs and client stuff, set up and verify that, then go through the steps (role, rolebinding) to grant permissions to the user and finally verify it works.
BottomLine: Good hands on walkthrough of Kubernetes RBAC
==
URL reference: https://blogs.oracle.com/cloud-infrastructure/post/full-stack-dr-for-oke-la-release?source=:so:ch:or:awr::::Cloud&SC=:so:ch:or:awr::::Cloud&pcode=
DateReviewed: 2024-11-13
Description: This is a blurb on a disaster recovery solution in the Oracle Cloud. We start talking about the Oracle Kubernetes Engine, and how you can do a "full stack DR" with it. Apparently you need to join a limited availability program, which okay, but what it doesn't cover is what disasters are being mitigated against. They tout a "one button" way to create the DR plans. It does mention there is some control over how you want it to behave, but if most of your K8s resources are immutable, wouldn't you have that if you simply had your YAML replicated? I mean maybe there is value in this for non-K8s workloads, so fair -- but it's not entirely clear what is going on here.
BottomLine: An odd product announcement on DR for Oracle cloud
==
URL reference: https://www.baeldung.com/ops/k9s-kubernetes-cluster-management
DateReviewed: 2024-11-13
Description: This is a walk-through of K9s, a Kubernetes CLI tool. They call it a "TUI", or terminal user interface. They start with install, config then launch of the program. They do go through some arguements to the initial launch before pivoting to the interface. They break down what is where, and do a bit of explaination. Next we cover navigation which is keyboard based, and they cover help, filtering, and command mode, where we can get things done. They then show how we can look at resources, look into namespaces and switch contexts, all normal K8s things. They explore pulse and x-ray views, which allow you to see your cluster from a new perspective. We then look into normal things you might want to do, such as scaling, deleting a resource, triggering a cron job or looking at the logs. Overall a good and well rounded walkthrough.
BottomLine: Very good walkthrough of the TUI tool K9s for managing Kubernetes
==
URL reference: https://madhavkrishangoswami.hashnode.dev/kubernetes-security-best-practices-you-need-to-know
DateReviewed: 2024-11-14
Description: So Kubernetes is the new hotness, but that pesky security stuff - so this article dives into best practices. At first I thought it was going to be a rehash, but actually it's good -- It's got 10 points, where they explain the point and go through some related best practices. They start with image scanning and runnin as non-root, which is pretty solid. They also touch on encryption, securing secrets, RBAC and a few others. It feels like a practical approach, and they even have a practical example at the end. Recommended.
BottomLine: Recommended walkthrough of various Kubernetes security best practices
==
URL reference: https://thenewstack.io/interconnect-security-risks-for-robust-prevention-and-mitigation/
DateReviewed: 2024-11-14
Description: This is a holistic approach to Kubernetes security, and in paticular how impactful a breach can be. They look at risks of services, understanding service interconnects and what the blast radius is if there is an impact. They dig into a few real-world issues, like Log4j, Kinsing malware and misconfigs that lead to data exposure. They then go through 5 policies meant to limit the blast if you do have a breach. I'd consider this an advanced topic but it is well done.
BottomLine: Good treatment of advanced security for Kubernetes
==
URL reference: https://thenewstack.io/deploy-kubernetes-behind-firewalls-using-these-techniques/
DateReviewed: 2024-11-15
Description: This article tackles the real case where Kubernetes is deployed behind Firewalls. They take a step by step approach, posing an issue and suggesting a solution or approach that can be taken. They look at things like image distro and management, control plane access, external DNS and dependencies, patches and updates and Ingress. Each of these is a unique challenge, and they thoughtfully tackle each one. To sum, they do mention that network design is also important, so being thoughtful in approach can simplify things.
BottomLine: Interesting topic of Kubernetes behind firewalls done pretty well
==
URL reference: https://madhavkrishangoswami.hashnode.dev/kubernetes-workloads-daemonsets-cronjobs-and-jobs
DateReviewed: 2024-11-15
Description: This article looks into three specific types of Kubernetes workloads - DaemonSets, CronJobs and Jobs. The article is set up with a "when to use" section and a real-world scenario for each type. DaemonSets are for longer lived apps, and they mention things like log collection and cluster monitoring. Next up is Jobs, which is for one and done tasks, like DB initializing or batch processing of a large dataset. Last up is CronJob, which is a periodic task like cleanups, reports or backups which need to be done monthly/weekly/daily or hourly. They give us some best practices and a summary. Good short intro, well done.
BottomLine: Good short walkthrough of DaemonSets, CronJob and Jobs types of Kubernetes tasks
==
URL reference: https://www.rcrwireless.com/20241024/telco-cloud/deploying-and-managing-containerized-network-functions-on-cloud-platforms-to-ensure-they-run-smoothly-and-efficiently
DateReviewed: 2024-11-16
Description: This article is aimed at those in the mobile telco space, but talks about Kubernetes related things. The focus is on network testing tools, and how they can be run in containers. They talk about something called HAKS, which is a hybrid Azure in cloud and on-premise combo. They go through some configs and some general recommendations to help get the most out of it. They have a couple diagrams and go through a bit of stuff on how to run apps smoothly and efficiently. They finish up with a pitch for their product. Actually interesting although in a niche.
BottomLine: Not bad for a niche topic - network testing in mobile from Kubernetes containers
==
URL reference: https://nachoaprendeit.com/2024/10/31/updating-kubernetes-cluster-k8s-for-napp-deployment/
DateReviewed: 2024-11-16
Description: This article is about preparing a Kubernetes cluster for NAPP. Helpfully they start with a "what is NAPP" section, where they explain that this is the NSX Application Platform and allows NSX enabled microservices to be deployed. Bascially it seems this is a way to standardize the deployment of containers or app code under a VMWare VM situation. From what I understand, this is an upgrade to the current toolset, and hence the reason for needing to prepare and upgrade to the newer technology. They go through a lab and walk through the upgrade, and honestly do so in a pretty thorough way. My take here is that for someone outside the ecosystem like me, it's hard to follow. Also, VMWare hasn't been doing nice things in the community, so if you had to update I'd think it might be an opportunity to jump ship.
BottomLine: Good hands on of prep and upgrading to a NAPP enabled Kubernetes cluster
==
URL reference: https://medium.com/@ksaquib/the-kubernetes-introduction-i-wish-i-had-when-i-started-a-complete-guide-f5127f6b5a9f
DateReviewed: 2024-11-17
Description: I assumed this was going to be a simple primer, but it is so much more than that. It starts with the buzzwords and "what is Kubernetes", but then it becomes a journey though all things container. We cover history of K8s, and a bit about how applicataion dev has evolved. We go through K8s arch, and even a bit on cluster theory. It goes through various resources, explaining each piece fairly well. It's not a hands on guide, but it gives you all the info you'd need to go from no knowledge to the place where you could be ready to deploy a cluster. Recommended.
BottomLine: Thorough intro to Kubernetes and all concepts - very well done
==
URL reference: https://linuxhandbook.com/kubernetes-pod-resource-usage/
DateReviewed: 2024-11-17
Description: In this article, we're going to see how we can monitor Kubernetes pods. They give some background on why we might need this, and then they tease us with the command for a single namespace - kubectl top pods. They do note you need the metric server installed for this to be helpful. In our walkthrough they are going to fire up two new pods in a new namespace to test. They explain the pre-reqs, which includes a running K8s cluster, and then give us the CLI line to install the Metrics server. Once installed, we verify it's running and we're ready for the next step. They give us the YAML and the CLI command to deploy them, and then we can start monitoring, after enough data has come in -- generally a few seconds. Decent walkthrough.
BottomLine: Fair walkthrough showing basic utilization on your Kubernetes pods
==
URL reference: https://pinoyfreecoder.com/articles/deploying-microservices-on-kubernetes-guide
DateReviewed: 2024-11-18
Description: While the title for this one overpromises, this is actually a good compact approach to getting Kubernetes microservices going. We start with a "why K8s for microservices", then next we're into a hands-on for Minikube and kubectl. We then talk about building a microservice, and we get a Dockerfile example here. Next up is the YAML that will let us run the previous image in K8s, and then how to set up services and load balancers. Finally, we touch on autoscaling to respond to loads. Not lots of explaination (and therefore not super comprehensive), but decent approach and concise.
BottomLine: Decent express walkthrough of getting microservices running on Kubernetes
==
URL reference: https://kubernetes.io/blog/2024/10/28/k8s-upstream-training-japan-spotlight/
DateReviewed: 2024-11-18
Description: I thought originally this was some kind of package, but it's actually about fostering the Kubernetes community in Japan, in an attempt to smooth entry for newcomers. They hold the sessions one or two times a year, and do an intro, an overview of the codebase, how to do a PR, how to set up the dev enviornment and hands-on sessions. They even do a couple of participant interviews! Neat approach to community engagement.
BottomLine: Interesting story about Kubernetes newcomer engagement in Japan
==
URL reference: https://thenewstack.io/kubeedge-extends-cloud-native-beyond-the-data-center/
DateReviewed: 2024-11-19
Description: This article talks about KubeEdge, a project to bring Kubernetes features to a variety of computing environments. The idea is that HTTP or MQTT apps can be run on either an edge network or IoT device; they include examples like satellites and highway toll stations. The way things work is that an app runs on an edge or IoT device in the K8s system, and can talk to a cloud server for various functions, like storage or commands. They include a helpful diagram to help understand this arch. They point out that there is some local storage, which allows the edge/IoT device to work even if the network is unavailable sometimes, to be synced when it is. It's an interesting into to newer edge type tech.
BottomLine: Interesting high level intro to KubeEdge which brings Kubernetes to edge devices
==
URL reference: https://medium.com/@j.aslanov94/implementing-topology-aware-routing-in-kubernetes-237abacd70ed
DateReviewed: 2024-11-19
Description: This article is going to dive into topology aware routing in Kubernetes, and we start with an intro that talks about AWS Availability zones. They explain that having things in multiple AZs is important for resilience, but there is an increased cost, paticularly with cross AZ traffic. They claim that topology aware routing is a way to reduce these costs by keeping traffic closer to it's origin. What goes unsaid is that K8s tends to be chatty, and without more info it can route to a distant node/pod, causing a lot of cross AZ traffic. They list a bunch of benefits, like better latency and network efficiency, but we have to know how it works. They mention that TAR won't work unless there are enough endpoints, if topology info is missing or if zone hints are absent among other things, meaning a bit of config is needed to support it. They get into the details a bit, and it all seems AWS specific, but they do a decent job explaining. They look at a deployment of TAR (not hands on), and then give some cons and considerations. Seems like it COULD be useful, but depends on the use case.
BottomLine: Intro and explaination of using topology aware routing in Kubernetes
==
URL reference: https://thenewstack.io/flatcar-container-linux-hitches-a-ride-with-the-cncf/
DateReviewed: 2024-11-20
Description: This article will talk about a Container oriented OS. First we talk about lineage, which started from CoreOS and through a few acquisitions ended up with IBM/Redhat. Called Flatcar, it's container centric and only includes needed packages. Configuration is done through a YAML file and creates an immutable system. They talk a bit about the close ties the OS has to K8s through integration of Cluser API. They drop a few neames, before talking about it becoming an incubated project and what is next. A thing to check out, for sure.
BottomLine: Announcement of Flatcar OS becoming a CNCF incubated project
==
URL reference: https://dev.to/lloydrivers/cka-full-course-2024-day-1340-static-pods-manual-scheduling-labels-and-selectors-in-kubernetes-29jb
DateReviewed: 2024-11-20
Description: Part of a bigger course, this lesson/walkthrough shows how to do manual scheduling in Kubernetes. They start with a task and some pre-reqs, and just dive into the lesson/walkthrough. They give you the commands, but also a bit of color when needed to know what is going on. They also give expected output, so you can gauge if your working correctly.
BottomLine: Decent walkthrough covering manual scheduling of pods in Kubernetes
==
