URL reference: https://medium.com/@josielol/unleashing-the-t-rex-how-containers-sometimes-fail-to-contain-1710b6cc7990
DateReviewed: 2024-11-01
Description: Our article here is going to touch on how containers sometimes fail to contain - and they start with an analogy to Jurrasic Park, and how the dinos were not contained. We dive in starting with container basics, going though how it's a single bundle running on an OS, which is mostly isolated. They point out that at a low level, a container is just a child on the host system. We get a neat diagram illustrating containers/namespaces and the Linux features that help out. The container runtime are the gates, allowing containers to start, do things, and stop. But they say, gates sometimes fail. We get another diagram, with arrows and a label of container escapes, so let's see what we're going to delve into. They talke about permission issues with mounts, allowing unintended file access; or a buffer overflow, allowing access to shared memory. Misconfigs can even allow CLI commands on the host from the container, and lastly, priv escalation that results in root access, allowing the attacker carte blanche. Next up they are going to do a demo with eBPF. They say that clever code can get around the verifier and JIT compiler, allowing execution of unsafe bytecode. They go into a bit of detail on how the verifier works, ensuring there are no unreachable instructions and simulating each control branch. They point to a few actual instances of CVEs involving the verifier, and are going to focus on a recent one. The walkthrough is quite simple - we build a user container, include the nasty code in the image, then run the binary and are root when done. Pretty cool. They go into mitigations with supply chains and SBOMs, but basically you have to be vigilant. Excellent article.
BottomLine: Awesome article showing a straightforward container escape in Kubernetes
==
URL reference: https://achievers.engineering/load-testing-kubernetes-resolving-bottlenecks-and-improving-performance-part-2-c4f08102f105
DateReviewed: 2024-11-01
Description: This article is a followup on a previous case where they did some performance tuning. They take that as a baseline and attempt to get even more throughput here. We start by looking at metrics like throughput, errors, latency and scalability. They assign goals, like doubling the baseline throughput, as where they want to go. They mention that as Kubernetes scales the cluster, that current strategy doesn't take full advantage, as already connected clients stay with the same pods, impeding proper load balancing. They show this in a graph. They say using Istio solves this, as it has proxies to help loadshare better, and so they move to this. They show the YAML needed, and an after graph, showing a much more even usage among the clients. They talk a bit about errors and latency, and it's important to note these are config only changes -- none of this needs any code change so far. Next they show how by doing tiny tweaks you can get some exta performance out of the system. They go through a few more esoteric tweaks, before circling back and noting they had achived all of the goals they had put out. Interesing but highly technical piece.
BottomLine: Low level performance tweaks to get more out of your Kubernets cluster
==
URL reference: https://aws.plainenglish.io/kubernetes-networking-in-the-simplest-way-d84e3b7ed940
DateReviewed: 2024-11-02
Description: This article aims to introduce Kubernetes networking in a simple way. We start with a diagram, so that is good. We dive in basically right away, covering basics, like each pod getting an IP and not needing to link or map things internally for K8s. They also explain that each pod can talk to any other pod without NAT, and programs on a node can talk to all pods on that node by default. Next we cover four concerns - now containers in a pod talk, how cluster networking allows comms between pods; how services allow apps to be reached from outside the cluster, and that services can be used inside the cluster. To finish up, we get some YAML files and CLI commands to demonstrate. Overall, it's decent but seems not well formed and flowing, so I'd say an okay toe dip.
BottomLine: Ok intro to Kubernetes networking and related concepts
==
URL reference: https://www.cncf.io/blog/2024/10/17/keep-up-with-cloud-native-and-kubernetes-security-with-the-updated-cks-certification/
DateReviewed: 2024-11-02
Description: This article talks about updates to the CNCF exam. First, they start by highlighting the growth of the Kubernetes community and CNCF in the past few years, including the number of people certified. They then explain that as things evolve and change, so must the skills that people have and also the exams. The exam was updated on October 15th, and while things like cluster stup and hardening will remain, some things will be phased out while others will be added, and some of the weights may change. My take -- I wish they'd talked a bit more about the broad areas of change, like what new topics would be included and what will be phased out.
BottomLine: News about changes to the CNCF certification exam but no details
==
URL reference: https://medium.com/@simardeep.oberoi/cilium-advanced-network-policies-and-observability-in-kubernetes-fbb4fdd747ba
DateReviewed: 2024-11-03
Description: We start with Kubernets being great, but it only able to manage layer 3 and 4 traffic - implying we're missing some observability. To our rescue comes Cilium, which they point out can do Layer 7 traffic control and all kinds of other bells and whistles including observability. They also point out that while K8s uses IP based traffic models, Cilium uses pod labels to ensure even if IPs change due to K8s dynamic nature, policies are applied correctly. We then do a bit of CLI and YAML exploring, to get some hands on. Further, they point out we can filter not just on destination, but on things like the URL path and request method, giving much finer grained control. We do some more hands on, and then talk a bit about high-performance considerations. Overall a good article.
BottomLine: Solid article on using Cilium to enforce network policies in Kubernetes
==
URL reference: https://learnk8s.io/kubernetes-services-and-load-balancing
DateReviewed: 2024-11-03
Description: Our article will walk us through things like services and load balancing with a 2-tier application. They give us a small setup and then right into things - YAML to deploy the backend pods. We do some CLI to spin them up and check they are running. We now go through the process of setting up a service, so the frontend pods can talk to the backend, and we start with a YAML file. We then do some CLI magic, finally confirming the service is up on an IP:port combo. To simplify things, we look at using coreDNS to map the IP, so our frontend doesn't need to know the IP directly. We walk through setting up and using DNS, and verify our service resolves. Now we do a bit of deep diving, going through the weeds of how services work behind the scenes. It also explains the role kube-proxy plays in getting the traffic to the right spot. It explains how K8s leverages iptables to do the re-routing of packets to the right pod(IP) for a service. They have a few good diagrams here, which are great. They then follow a packet through, so you get a sense of how the flow actually works. After all of this, we finally need to deploy the frontend pods, and we start with the YAML for that. This time we deploy three replicas, in contrast to the one we did for the backend. We follow the CLI commands to spin them up and verify they are running. We then expose them, so traffic from outside the cluster can reach the pods. They also explain how Load Balancing works. There are some other things I won't cover, but each part has diagrams and really good explainations -- this is one of the best explainers on this stuff that I've come across.
BottomLine: Excellent explainer of Kubernetes services and how they work
==
URL reference: https://securityboulevard.com/2024/10/policy-as-code-in-kubernetes-security-with-seccomp-and-network-policies/
DateReviewed: 2024-11-04
Description: Kubernetes is ever evolving, and as such players have to understand the impacts of things like Policy as Code have, and this article will attempt to do that. There are two main was to achieve this - one is seccomp profiles, and the other is network policies. They relate PaC to things like IaC for infrastructure. They have similar goals as IaC, which is to reduce human error, ensuring consistency and accelerating development velocity. They explain what seccomp is, how it works and gives a sample of the config bits. They then cover some best practices. We move on to network policies, where they explain the why and how, and explain the approach. They tie in some guardrails to run this and finally explain how to run this togther. A bit in the weeds in spots, but decent overall.
BottomLine: Decent article on how to do policy as code in Kubernetes
==
URL reference: https://medium.com/@dmosyan/reliability-and-security-for-azure-kubernetes-service-545edf7e626d
DateReviewed: 2024-11-04
Description: Okay, so this is a bit weird. There is no motivation or intro to this piece, and we start with a diagram, which I'm usually happy about. But our first text is a "design checklist" done in point form, and that is how this whole piece is constructed. The tips are good, and since this is all AKS the insights can be helpful. Next up are recommendations, and they also seem solid, and have explainations where appropriate. Moving on we get to security, with some guidelines and recommendations. But other than this general approach info, the piece doesn't go anywhere else. While I'd say AKS users might get something out of it, it's a bit hard to read for flow reasons.
BottomLine: Interesting recommendations for AKS Kubernetes but laid out in a difficult flow
==
URL reference: https://medium.com/@noah_h/on-kubernetes-network-security-exploring-cilium-and-istio-implementations-ba687b685d26
DateReviewed: 2024-11-05
Description: This piece explores ways to utilize Cilium and Istio to improve network security. We start with a video link that inspired the piece. The way this is laid out is to introduce a term, explain it, and include a diagram which shows the place in the system. We start with CNI, then cover service mesh, and then a short para about how they are related. They take similar approaches with Istio and Cilium, explaining what they are, how they work, and what is going on under the hood. Overall very good.
BottomLine: Good piece on Istio and Cilium and how they work on Kubernetes
==
URL reference: https://www.helpnetsecurity.com/2024/10/24/f5-big-ip-next-for-kubernetes/
DateReviewed: 2024-11-05
Description: This article talks about F5's BIG IP product in relation to Kubernetes. It feels like an ad more than a tech document, as we talk a lot about AI but not so much about how this helps in Kubernetes. Lots of buzzwords and name dropping, but not a lot of explaination of what it does or how it does it. How does it help AI? It implies it makes it faster, but I'm not sure how? It also "protects" the AI landscape, but again, how? We end with a bunch of quotes, none of which helps on what it does.
BottomLine: More of a product pitch then a tech document - skip
==
URL reference: https://medium.com/@RocketMeUpCybersecurity/container-security-how-to-defend-docker-and-kubernetes-environments-b1d9aa215e60
DateReviewed: 2024-11-06
Description: We start with container being good, but there are security issues. We start with an overview of containers, so assume almost no knowledge here. We then cover the issue from security issues - breaches, downtime and compliance issues. Next we move to various actual issues, where they take us through the risk, and example and finally a solution. They cover image issues, breakouts, configuration problems, and API config issues. They then tackle each of these with mitigations and hardening. They then talk about things like RBAC and various policies that help enforce limits and security. Overall a decent approach.
BottomLine: Good overall approach to most aspects of Kubernetes security
==
URL reference: https://itnext.io/how-your-confidential-containers-can-securely-retrieve-secrets-93d6f55b7b42
DateReviewed: 2024-11-06
Description: This article tries to explain how confidential computing works regarding secrets. So, I'll say there is a diagram and a bunch of flow charts, which is awesome for an article usually. It is also technical, which I also usually think is good -- but not in this case. While it gets into the weeds of data flow and explains that fairly well, it doesn't really explain the what and the why in a good way. Like I can understand how things flow, but I don't understand why this pod/node combo should get a key and the other one shouldn't. What problem does this guard against, and how does it achieve that? It's a bit fuzzy.
BottomLine: Okay job of describing the mechanism of confidential computing but not the why
==
URL reference: https://thenewstack.io/kubernetes-advances-cloud-native-data-protection-share-feedback/
DateReviewed: 2024-11-07
Description: Our article tries to compare native VM capabilities compared with Kubernetes resources. They do mention that since K8s is more ephemeral, different approaches are needed for things like DR. They focus on something called Changed Block Tracking (CBT), which they mention allows efficient incremental backup. While popular on VMs and other systems, they were missing on K8s until now. To help build this, K8s introducted StatefulSets and then the Container Storage Ingerface (CSI), which allowed containers to use true persistent storage. To support these changes, VolumeSnapShot was rolled out in 2020, which then allows CBT to be an option. They have some more details an a small diagram to close things up. My take is while this gets into the weeds, they do a lot of upfront work to explain things and it's a good piece.
BottomLine: Very solid into to CBT on Kubernetes and how it enables incremental storage backups
==
URL reference: https://medium.com/@alibalbars/how-to-deploy-a-node-application-with-kubernetes-f0d70a7a7b7f
DateReviewed: 2024-11-07
Description: This is actually a decent walkthrough on how to containerize a Node app. The assumption is you know a bit of Node, but you've never seen Docker or Kubernetes. He drops the JS dependencies and the bit of code to create a basic app, and we're off to the races. He takes us through building a Docker image with a Dockerfile, and then how to install minikube on MacOS. We then start minikube and load in the image we just created, before creating the deployment YAML and spinning up the deployment. They even explain the YAML line by line. To make it useful, they also go through creating a Service with the YAML and deployment to allow non-cluster computers to talk to it. Finally, they walk us through minikube tunnel, which allows us to connect to the service from our computer. A very good walkthorugh!
BottomLine: Great walkthrough of taking a Node app and turning it into an image and deploying it to Kubernetes
==
