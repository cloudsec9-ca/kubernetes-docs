
URL reference: https://www.admin-magazine.com/Archive/2024/81/Securing-the-container-environment
DateReviewed: 2024-10-01
Description: Our article tackles Kubernetes security, but it does it from a more offensive approach - how do attackers gain access? After a bit of background, we jump into a section called main entry points, and they dedicate some space to attacks that target K8s. We start with app vulns and follow up with server-side request forgery, which gets a good walking through. They cover RBAC and misconfigs, as well as insecure APIs before finishing up with container breakouts. They cover each with at least one para, but some of the more interesting they go 3 or more into. Next up is a section called escaping to the host, where you gain access to the container host from inside the container. They have a laundry list of Docker to Linux capabilities, some of which can enable breakouts. They do go through how to get a reverse shell, with listings and some CLI commands. I think this is interesting myself, and I think the article demonstrates how attackers think and where you might need to think differently.
BottomLine: Decent attack-based approach to Kubernetes security.
==
URL reference: https://medium.com/@andreacere/kubernetes-security-best-practices-for-protecting-your-containerized-applications-e74c8937c693
DateReviewed: 2024-10-01
Description: We start with Kubernetes awesome, except security. This article has a laundry list approach, and they dive right in. They start with figuring out what issues K8s has, which they enumerate. The rest of their list is in order - RBAC, harden API server, harden cluster nodes, use PSP, use network fabric, log and monitor, supply chain (secure images), backup and finally stay aware of what is going on. Each list entry gets a one sentence definition, then a number of best practices in point form. Not a groundbreaker, but a decent intro to K8s security.
BottomLine: Decent intro to Kubernetes security
==
URL reference: https://www.cncf.io/blog/2024/08/29/kubernetes-v1-31-elli-an-insider-view/
DateReviewed: 2024-10-02
Description: This is an account of how Kubernetes is readied for new versions. We start with a bit of background, and how he got into the K8s distro pipeline. He then talks about shadowing, and what he was actually doing in this. He was a comms shadow, which he thought aligned with his DevRel role. He explains it is about a 14 week process, with 35-40 volunteers working with dev teams to get a release rolled out. He explains how things are organized into SIGs, and how they guide the process from teams and through building until it is officially released. They mention some highlights from this release, as well as what is coming up in the next release. They also go through a short checklist of the things that need to be done before the release, so things are ready once the code is all good. They have a few notes on things like talks and interviews that are either coming up or recently done. Overall an interesting piece.
BottomLine: Kubernetes release team participant talks about what they do
==
URL reference: https://www.meshiq.com/kafka-on-kubernetes-integration-strategies-and-best-practices/
DateReviewed: 2024-10-03
Description: This article dives into running Kafka on Kubernetes. We dive in and they note that Kafka, which is distributed and needs scaling flexibility, is a good match for K8s. We then talk about specific configs, like StatefulSets for Kafka brokers and using PV and PVCs to manage storare. They also talk about deploying with Helm to simplify stuff. Next up are best practices, where they touch on resource management, logging, network config and security. They advise to test failover and to optimize for stability. Overall decent coverage of an interesting topic.
BottomLine: Good intro to using Kafka deployed on a Kubernetes cluster
==
URL reference: https://thenewstack.io/enterprises-to-double-cloud-native-use-by-2029/
DateReviewed: 2024-10-04
Description: We start with Kubernetes being the gold standard on it's 10th birthday, before noting that large orgs say most of their future development will be Cloud native. Next we dive into a survey where over half of the respondents said they have 4 or more years using K8s, which speaks to it's adoption. They also note that 80% say they will build cloud ready versions in the next 5 yrs, as opposed to about 40% today. They then talk a bit about hybrid cloud, and how many are using this. They also have a short section on container data management. My take is it's interesting, but as forecasts go it is vague and waffly.
BottomLine: A take on the five year future of Kubernetes and Cloud native apps
==
URL reference: https://thenewstack.io/remocal-development-the-future-of-efficient-kubernetes-workflows/
DateReviewed: 2024-10-05
Description: This article tackles so-called Remocal development, a hybrid of remote and local dev. After a bit of setup, we get into what is a Kubernetes development environment (KDE), and types of, like local and remote. Local is standard development, where you have everything you need on your machine. Remote is wher e you are running a cluster not on the dev box, maybe in the cloud. One key benefit is it can more closely mirror the prod env, as you can have the bits that are required. Drawbacks are it is slower and has a longer feedback loop. We then have a section called what is Remocal dev, which doesn't really tell us what it is. A bit further they talk abour mirrord, which allows the state of the remote cluster to be mirrored locally, to allow for things like debugging and code inspection, and doing things like API lookups. It's an interesting wrinkle in the K8s dev ecosystem.
BottomLine: Article introduces Remocal development for Kubernetes, to enhance coding for Kubernetes
==
URL reference: https://dev.to/labex/mastering-kubernetes-proxy-command-2j4d
DateReviewed: 2024-10-06
Description: This is a lab where we will learn to use the Kubernetes proxy from the command line. We start with a bit about what the proxy is, and then we dive into setting up a basic proxy. This involves the command "kubectl proxy", which allows access to the K8s API. Accessing the machine on port 8001 from a browser, you can get status of the cluster. They show how to do this with curl for completeness. And, that is it. So, it's not really much of a lab, and while it's part of a series that might be more fullsome, I think they could have covered more uses in this short primer.
BottomLine: Lab that is really a single command to show you how Kubernetes proxy works - skip
==
URL reference: https://medium.com/@shashwattripathi11/host-an-application-on-eks-using-aws-load-balancer-controller-025100ec8899
DateReviewed: 2024-10-07
Description: The article is a walk through of setting up a load balancer with EKS. They include prereqs and the policy we have to use at the start. We then are directed on how to set up some permissions for our app, notably the web identity perm that we need to get traffic to the cluster. There are a few steps for this, and then we create a bit of YAML to tie our K8s cluster into the identity stuff. We then install Helm and the LB controller, and verify that it is installed and that the service name is correct. We then have to set up the EBS CSI driver, which is noted as needed if we have a 3-tier architecture. Once all of the bits are rolled out, we can hit the LB and get the Robot Shop store. I feel like some of the bits are more hand-wavy, as someone who knows Dev and some K8s and some AWS, I wasn't always sure what they were doing or why.
BottomLine: Okay walkthrough of using a Load Balancer with AWS Kubernetes EKS
==
