
URL reference: https://www.admin-magazine.com/Archive/2024/81/Securing-the-container-environment
DateReviewed: 2024-10-01
Description: Our article tackles Kubernetes security, but it does it from a more offensive approach - how do attackers gain access? After a bit of background, we jump into a section called main entry points, and they dedicate some space to attacks that target K8s. We start with app vulns and follow up with server-side request forgery, which gets a good walking through. They cover RBAC and misconfigs, as well as insecure APIs before finishing up with container breakouts. They cover each with at least one para, but some of the more interesting they go 3 or more into. Next up is a section called escaping to the host, where you gain access to the container host from inside the container. They have a laundry list of Docker to Linux capabilities, some of which can enable breakouts. They do go through how to get a reverse shell, with listings and some CLI commands. I think this is interesting myself, and I think the article demonstrates how attackers think and where you might need to think differently.
BottomLine: Decent attack-based approach to Kubernetes security.
==
URL reference: https://medium.com/@andreacere/kubernetes-security-best-practices-for-protecting-your-containerized-applications-e74c8937c693
DateReviewed: 2024-10-01
Description: We start with Kubernetes awesome, except security. This article has a laundry list approach, and they dive right in. They start with figuring out what issues K8s has, which they enumerate. The rest of their list is in order - RBAC, harden API server, harden cluster nodes, use PSP, use network fabric, log and monitor, supply chain (secure images), backup and finally stay aware of what is going on. Each list entry gets a one sentence definition, then a number of best practices in point form. Not a groundbreaker, but a decent intro to K8s security.
BottomLine: Decent intro to Kubernetes security
==
URL reference: https://www.cncf.io/blog/2024/08/29/kubernetes-v1-31-elli-an-insider-view/
DateReviewed: 2024-10-02
Description: This is an account of how Kubernetes is readied for new versions. We start with a bit of background, and how he got into the K8s distro pipeline. He then talks about shadowing, and what he was actually doing in this. He was a comms shadow, which he thought aligned with his DevRel role. He explains it is about a 14 week process, with 35-40 volunteers working with dev teams to get a release rolled out. He explains how things are organized into SIGs, and how they guide the process from teams and through building until it is officially released. They mention some highlights from this release, as well as what is coming up in the next release. They also go through a short checklist of the things that need to be done before the release, so things are ready once the code is all good. They have a few notes on things like talks and interviews that are either coming up or recently done. Overall an interesting piece.
BottomLine: Kubernetes release team participant talks about what they do
==
URL reference: https://www.meshiq.com/kafka-on-kubernetes-integration-strategies-and-best-practices/
DateReviewed: 2024-10-03
Description: This article dives into running Kafka on Kubernetes. We dive in and they note that Kafka, which is distributed and needs scaling flexibility, is a good match for K8s. We then talk about specific configs, like StatefulSets for Kafka brokers and using PV and PVCs to manage storare. They also talk about deploying with Helm to simplify stuff. Next up are best practices, where they touch on resource management, logging, network config and security. They advise to test failover and to optimize for stability. Overall decent coverage of an interesting topic.
BottomLine: Good intro to using Kafka deployed on a Kubernetes cluster
==
URL reference: https://thenewstack.io/enterprises-to-double-cloud-native-use-by-2029/
DateReviewed: 2024-10-04
Description: We start with Kubernetes being the gold standard on it's 10th birthday, before noting that large orgs say most of their future development will be Cloud native. Next we dive into a survey where over half of the respondents said they have 4 or more years using K8s, which speaks to it's adoption. They also note that 80% say they will build cloud ready versions in the next 5 yrs, as opposed to about 40% today. They then talk a bit about hybrid cloud, and how many are using this. They also have a short section on container data management. My take is it's interesting, but as forecasts go it is vague and waffly.
BottomLine: A take on the five year future of Kubernetes and Cloud native apps
==
URL reference: https://thenewstack.io/remocal-development-the-future-of-efficient-kubernetes-workflows/
DateReviewed: 2024-10-05
Description: This article tackles so-called Remocal development, a hybrid of remote and local dev. After a bit of setup, we get into what is a Kubernetes development environment (KDE), and types of, like local and remote. Local is standard development, where you have everything you need on your machine. Remote is wher e you are running a cluster not on the dev box, maybe in the cloud. One key benefit is it can more closely mirror the prod env, as you can have the bits that are required. Drawbacks are it is slower and has a longer feedback loop. We then have a section called what is Remocal dev, which doesn't really tell us what it is. A bit further they talk abour mirrord, which allows the state of the remote cluster to be mirrored locally, to allow for things like debugging and code inspection, and doing things like API lookups. It's an interesting wrinkle in the K8s dev ecosystem.
BottomLine: Article introduces Remocal development for Kubernetes, to enhance coding for Kubernetes
==
URL reference: https://dev.to/labex/mastering-kubernetes-proxy-command-2j4d
DateReviewed: 2024-10-06
Description: This is a lab where we will learn to use the Kubernetes proxy from the command line. We start with a bit about what the proxy is, and then we dive into setting up a basic proxy. This involves the command "kubectl proxy", which allows access to the K8s API. Accessing the machine on port 8001 from a browser, you can get status of the cluster. They show how to do this with curl for completeness. And, that is it. So, it's not really much of a lab, and while it's part of a series that might be more fullsome, I think they could have covered more uses in this short primer.
BottomLine: Lab that is really a single command to show you how Kubernetes proxy works - skip
==
URL reference: https://medium.com/@shashwattripathi11/host-an-application-on-eks-using-aws-load-balancer-controller-025100ec8899
DateReviewed: 2024-10-07
Description: The article is a walk through of setting up a load balancer with EKS. They include prereqs and the policy we have to use at the start. We then are directed on how to set up some permissions for our app, notably the web identity perm that we need to get traffic to the cluster. There are a few steps for this, and then we create a bit of YAML to tie our K8s cluster into the identity stuff. We then install Helm and the LB controller, and verify that it is installed and that the service name is correct. We then have to set up the EBS CSI driver, which is noted as needed if we have a 3-tier architecture. Once all of the bits are rolled out, we can hit the LB and get the Robot Shop store. I feel like some of the bits are more hand-wavy, as someone who knows Dev and some K8s and some AWS, I wasn't always sure what they were doing or why.
BottomLine: Okay walkthrough of using a Load Balancer with AWS Kubernetes EKS
==
URL reference: https://blog.scottlowe.org/2024/08/30/preloading-extra-images-with-kubernetes-image-builder/
DateReviewed: 2024-10-07
Description: Image builder is a set of tools to build various images, like VMs or AMIs, and has been extended to help build Kubernetes images. It works on Ansible and Packer, using them to do the work behind the scenes. They then show how to alter a current build to support images -- simply make 3 small changes to a JSON file, and voila, you are container ready. As an example, the author builds an Ubuntu AMI, with the simple CLI "make build-ami-ubuntu2024". Very interesting walkthrough, bound to make some things much easier.
BottomLine: Interesting toolset to help build images of all types, including for Kubernetes
==
URL reference: https://itnext.io/what-is-the-kubernetes-claim-model-1572d7cf39a8
DateReviewed: 2024-10-08
Description: This article talks about the claim model, and how this differs between the desired and observed state. We start with a couple diagrams, and then dive into what is the claim model. They explain a claim is the minimum required resource, and might only encompass a part of the full desired state requested. It's also a future goal, not an immediate commitment. They do a bit of legwork to help us understand internal state in the Node/Pod and control plane. They do a more intersting examination of this in the storage arena, where an infra admin designates PersistentVolumes, a platform admin might create a Storage Class and developers ask for PersistentVolumeClaims. What's interesting is that on the dev side, they don't have to know anything about the storage, except how much they need. They emphasize how K8s is very decoupled, which allows resources to be allocated and consumed by different parts of the system without regards to one another. They argue that claims make resource provisioning more flexible, as resources aren't tied to fixed existing resources, and can be dynamically tied in where needed. It's an interesting approach to K8s.
BottomLine: Intro to the claims model in Kubernetes
==
URL reference: https://www.igmguru.com/blog/what-is-kubernetes
DateReviewed: 2024-10-08
Description: This is a good, recently published comprehensive intro to Kubernetes. If you don't know anything, this covers most of it at 30 thousand feet. It starts with some general talk, then a what is Kubernetes section. Next a history piece, and a few paragraphs one what a K8s cluster is. We then dive into what it is used for, which is really more of a features walk through. They then have a short section on Kubernetes vs. Docker, before a section titled what does K8s do, where it talks about abstraction, config management, deployments and IaC. They go through Benefits and some Use cases, before a quick tie up. If you have no idea what Kubernetes is, this is a great place to start.
BottomLine: Great piece walking you through an introduction to Kubernetes
==
URL reference: https://itnext.io/can-private-llm-help-you-solve-kubernetes-problems-on-the-first-try-346f185eb954
DateReviewed: 2024-10-09
Description: This article tries to answer the question of whether ChatGPT can help us solve Kubernetes issues on our cluster. They start with a diagram, which is always good, and then dive right in. They'll use a stack called HolmesGPT as the integration point to a ChatGPT backend. They explain that Holmes solves problems "like a human", looking and issues and fetching missing data until the problem is solved. It uses servers that support function calling which allows it to retrieve precise info. It uses toolsets and runbooks; toolsets provide commands the LLM can execute, and runbooks provide step by step instructions. We then walk through an imaginary issue, where Holmes goes through a number of checks to figure things out. To better understand, we're going to walk through an actual problem - "why is my application not running?". Holmes takes the question and feeds it to the LLM, and see if it has enough data to answer; if not, it figures out what additional data is needed, and gathers it using tools like kubectl. The LLM is then asked if it has enough data now. We then look under the hood, and there is a tools definition YAML, a management Python file and a tool calling Python file which interact to get answers. They now do a walkthrough of the tool, starting with MacOS install instructions. To use the tool, you need a paid OpenAI API key. You provide the key in an ENV variable, and we are ready to go. They first ask a simple question, and tie that to the YAML file. They then ask about alerts being fired, and show what the response is. Next up, we hook in a private LLM, presumably to use a model which is more trained on our type of data. After lauding the features of one, we now connect Holmes to it, by changing some ENV variables. They run through some questions, getting similar outputs. Okay, so my take is that AI doesn't know if it "has enough data", it usually has some kind of "confidence" in the answer it produces, but that isn't surfaced here. And while I like the idea of a "private" LLM, it's just a different provider and not your own hosted model in this circumstance. It's an interesting approach though.
BottomLine: Interesting walkthrough of integrating AI into Kubernetes problem solving
==
URL reference: https://www.youtube.com/watch?v=sh2nwXJLDkE
DateReviewed: 2024-10-09
Description: This is a short vid on the Sidecar pattern. Starts stong with a simple graphic illustration of a motorcycle sidecar, where the pattern gets its name from. The sidecar is a helper component, generally for logs/monitoring, service discovery or traffic routing. The idea is to seperate concerns, so your core app is only doing the business logic and the sidecar does the extra work. The sidecar is agnostic of language, so doesn't need to match the core logic's programming language. They go through many examples, including of mesh and scalability. They work through a number of scenarios, including using sidecar as proxies so that your app only talks to its sidecar, and the sidecar takes care of all the network related bits. They also contrast sidecars to the ambassador pattern, pointing out sidecars co-locate a process with your main service while ambassador creates a gateway or proxy in front of the service. To tie things up, we go through downsides, like extra resource usage, extra complexity and added latency in some requests. Overall, a great intro though.
BottomLine: Strong quick intro to Kubernetes sidecars and comparison to the Ambassador pattern
==
URL reference: https://medium.com/technology-nineleaps/what-are-pods-in-kubernetes-449eec089847
DateReviewed: 2024-10-10
Description: This article will explain what a Pod is in the Kubernetes sense. They explain that a Pod is the smallest unit of deployment, but that it is possible to deploy multiple containers to a single pod. Any pod members share IP address, network namespeace and storage volumes, and it enables them to communicate easily. We then enumerate through the various bits of a pod, including containers, storage, networking, labels and selectors and resource limits, each getting a paragraph. We then work through why pods are important, and they touch on deployments and rollback, scalability and consistency. We dip a toe into pod lifecycle, touching on the status a pod can be in, with a 1-2 sentence summary of each - pending, running, succeded, failed and unknown. To wrap things up, we touch on advanced features, like init containers, sidecars and pod disruption budgets. Actually a good quick intro.
BottomLine: Decent concise intro to what Pods are in Kubernetes
==
URL reference: https://medium.com/@btech-engineering/enhancing-kubernetes-observability-with-pixie-80cac8902418
DateReviewed: 2024-10-10
Description: We're going to do a bit of a walktrhough with Pixie, an open source observability tool. We start with a quick what is Pixie section, where they outline that Pixie can do everything from overviews to detailed insights. They go through some of the components, with a short description - Edge module, the agent that works with eBPF to collect data; Vizier, which manages the edge modules; then others, like Cloud, CLI and client API. They have a chart for comparing to other monitoring tools. Now, we're into hardware and software prereqs. We then get into a step-by-step walkthrough on how to install. At step 9, for instance, we have the basic setup with a plethora of pods up and running. They then set up the client and go through a bunch of the visualizations that it shows. To me, the setup is cool but while the visuals are nice, I don't get a good sense of what I'm looking at, and I think that could be improved.
BottomLine: Okay walkthrough and background for Pixie observability for Kubernetes
==
URL reference: https://www.youtube.com/clip/UgkxyXUlDAtWEOczyhq14w9MxbBwmrd0eWt8
DateReviewed: 2024-10-11
Description: Quick video which explains an issue in Azure Kubernetes which might allow command execution privilege. With that priv, they can download the cluster init info which allows a TLS bootstrap attack that exposes all the secrets on in the cluster.
BottomLine: Good concise explaination of an Azure Kubernetes vulnerability
==
URL reference: https://dev.to/hkhelil/enhancing-container-security-the-complete-guide-to-secure-and-clean-kubernetes-clusters-1ida
DateReviewed: 2024-10-11
Description: This piece is going to talk about securing and cleaning Kubernetes clusters, primarily with Notary and AKS image cleaner. We start with a blurb about why we should always pull images, rather than only pulling images if we don't have them in our local cache. Then we move on to an explaination of Notary, which is a tool that verifies an image wasn't altered from when it was built. They include a way to add a signature and YAML to verify it. Next we look at the image cleaner, which simply figure out if an image is no longer used and deletes it. For Azure, it's as simple as adding it when we create the cluster; they also show how to verify it's active. They then tie this up to conclude. For me, I'm wondering what you do for existing clusters -- can this be added on the fly? Also, curious about avoiding the cache if you have a Notary signed image? While some flaws, it's an interesting perspective.
BottomLine: Decent coverage of two tools to secure and clean your Azure Kubernetes cluster
==
URL reference: https://www.darkreading.com/application-security/platform-engineering-is-security-engineering
DateReviewed: 2024-10-12
Description: The authors here claim that a good platform engineering effort should contain solid app security practices. They dive in with least privilege, which is how anything should operate. They also advocate for just in time permissions, where elevation only occurs as needed and is reliquished afterwords. Next up is secure defualts in the configuration, so that things are properly set up. This is because bad configs do cause a lot of security mishaps. We then look at CI/CD pipelines, where they advise to fail fast and fail safe. This means that security checks are done early and find issues before things are too far into the rollout. Finally, they advise to use GitOps for versioning and control, to automate and streamline as many processes as possible. My take is that I like their ideas, the truth is security is often rushed or ignored in development in the name of productivity, with no real concrete steps here to address that.
BottomLine: Good high-level discussion of how Platform engineering can be done in a security aware way to improve both
==
URL reference: https://medium.com/@shivshashyam/understanding-rbac-in-kubernetes-b0e7881efe58
DateReviewed: 2024-10-12
Description: This article talks about RBAC, and does it from a perspective that a dev cluster might have loose roles, but a prod one should have tighter security. We're going to have some hands on, so Minikube running is a prereq. After a quick primer on AA, they tell us about ABAC, RBAC and Node auth. We get a chart showing some roles, and what access is connected to those various roles. They mention that Pods don't have traditional users, but our Minikube uses a config file, and they show us the contents. They explain that based on a TLS certificate, K8s maps us to a user, as long as our cert is valid. They then walk through the process of making a cert - generate a key, do a signing request, generate a signed cert from the request, and then they verify the cert works. They do a bit more naviagation and verification to set things up, before switching to granting access to the created user. They show us the YAML file that has the perms, and then the YAML file that attaches perms to roles. After doing this, we test the actual roles. We are then shown the difference between namespaced roles and cluster roles. They then move on to service accounts, used for Java or Python apps. They then explain why we need them, and set up an account, and then verify they work. Actually a good little walk through.
BottomLine: Great short little walkthrough of RBAC for Kubernetes
==
URL reference: https://www.netmaker.io/resources/kubernetes-security-posture-management-kspm
DateReviewed: 2024-10-13
Description: This article dives into what KSPM is, security posture mgmt. They say that while Kubernetes is a robust platfrom, there are still sec risks. We start out with misconfigs, with some paragraphs of examples and illustrations. Next we look at unauth access, like a role with too much permissions. They advocate for using the principle of least privilege, which is solid. They also advocate for changing defaults and removing permissive access. They touch on kubelet, networking and public exposed services. Next is vuln container images, where one of your dependencies in the supply chain has an issue. They talk about risks with using popular images or setting tags to "latest". Finally, there are network threats, and this is all just motivation for KSPM. Tools and techniques they advocat for are using RBAC correctly, implementing good Network Policies and utilizing MFA, multi factor auth. My take is that there is lots of worry and not enough managing of posture. Their suggestions are fine, but not super holistic and not much more than standard practices would suggest.
BottomLine: Okay piece giving motivation and some tools to do KSPM on Kubernetes
==
URL reference: https://www.techzine.eu/news/security/124199/cast-ai-introduces-kspm-for-detecting-kubernetes-security-threats/
DateReviewed: 2024-10-13
Description: This piece feels more like a press release than an article. It talks about CAST AI without any context, but I'm guessing it is a Kubernetes automation software. This article talks about the new KSPM add on, which allows it to integrate with the existing tool to provide some extra security. There is no detail, and a full paragraph is spend on quotes from someone in the company.
BottomLine: Pretty straight skip unless you use CAST AI already
==
URL reference: https://cloudnativenow.com/topics/cloudnativedevelopment/kubernetes/virtual-kubernetes-clusters-the-key-to-a-modern-idp/
DateReviewed: 2024-10-14
Description: Increasing complexity of software systems implies having to improve the internal developer platform apparently, and this article will take us through that. We start off with stats, and of course the solution is to have a Virtual Kubernetes cluster. Now, the concept is awesome, but they do little in the first few paragraphs to explain how this works -- is it fancy namespace, some kind of proxy, maybe a new CLI? Nope, the whole article touts the benefits and good stuff, without any explaination of HOW to do this. So, pretty much worth skipping.
BottomLine: Interesting idea, awful article which leaves out any of the how
==
URL reference: https://www.baeldung.com/ops/kubernetes-pull-images-private-registry
DateReviewed: 2024-10-14
Description: This is a short article about pulling from a private image repo. It's acutally well done, with steps and prereqs and a full walk through, from adding a secret and perms throught to verifying deployment. Recommended.
BottomLine: Good walkthrough on how to grab from a private Kubernetes images server
==
URL reference: https://medium.com/@achanandhi.m/manage-kubernetes-the-soft-way-448c7a3b69a8
DateReviewed: 2024-10-15
Description: Our author postulates that if your running a dev env, you can use a lightweight Kubernetes distro, and if you are a an enterprise you can pay someone to help, but if your a prod team you are stuck - but there is a distro they adance that can help, Rancher. This project was started in 2014 and acquired by SUSE in 2020, and is open source. But it seems other than introducing it, this article isn't going to show anything concrete -- just that Rancher can do everything you might need, and there will be more to come.
BottomLine: Article which makes you aware of Rancher for Kubernetes without any real details
==
