URL reference: https://securityboulevard.com/2025/06/linuxfest-northwest-chaos-testing-of-a-postgres-cluster-on-kubernetes/
DateReviewed: 2025-08-01
Description: The article is really a stub around a presentation at a conference of Chaos testing PostgreSQL on Kubernetes. So the outline is running dbs in prod, why run dbs on K8s, running PG on K8s, observability - what's going on, an finally breaking things on purpose. They talk a bit about strategy for DBs, then a bit about DBaaS ... pros and cons, and posture that K8s allows you to change the approach to DBs. It makes things lighter and easier to do. They show a diagram about building a PG cluster, which is easier to do with pods and K8s. They go through a replica failure, and what an "app" sees in comparison. They also look at things if K8s is in the mix.
BottomLine: Interesting discussion of how to use Postgres on Kubernetes
==
URL reference: https://www.nivelepsilon.com/2024/02/25/simplifying-kubernetes-how-distroless-images-change-the-game/
DateReviewed: 2025-08-02
Description: Our article today focuses on distroless images and how they help to simplify Kubernetes. We jump in with a discussion of containers and their backing images, explaining where we started and what this represents. We then dig into the benefits, which include better security, less overhead and size, and simpler maintenance. They have a good formula for using the new images - figure out what your dependencies are, select a base image that works with that, adjust your Dockerfile, and finally test the resulting images. They show us how this works with a multi-stage Dockerfile that sets everything out. They then go through, explaining some of the bits of the file in the main text. One thing they do say is that this approach may not work in all cases -- so see if it fits your use case. Good approach.
BottomLine: Interesting short paper on actually using Distroless for Kubernetes
==
URL reference: https://dev.to/shashankpalakurthi/getting-started-with-kyverno-kubernetes-policy-made-simple-4f89
DateReviewed: 2025-08-03
Description: Today we'll be digging into Kubernetes policy with Kyverno. We start with a paragraph on what is Kyverno, which is a policy admission controller. Next they dip into why do we need it, explaining that it helps build guardrails around what is allowed or not. We then get into the how, which is through K8s CRDs - custom resource definitions. We also dig a bit into how to config Kyverno, where they tell us about things like policy types, rules, and policy modes. There is a reporting mode called Audit, and Enforce mode which strictly enacts policies. They also touch on policyException, which is a way to avoid a policy for a certain reason. Lastly, they take us through PolicyReport -- which they point out is only helpful for Audit mode, because it lists non-compliant resources, where in enforcing mode the resources would never be created. Good read.
BottomLine: Good intro to Kyverno and security policies in Kubernetes
==
URL reference: https://www.portainer.io/blog/practical-no-nonsense-answers-to-reddits-top-docker-and-kubernetes-questions
DateReviewed: 2025-08-04
Description: This article is going to try and answer the top Docker and Kubernetes questions, so let's get started. We start with a bit of bookkeeping on where the questions were sourced from, and then dive right in. The format is that they state the question, and then respond in 2 or 3 paragraphs. First Q is about K8s complexity, and they urge an incremental approach. Q2 is a good one, on limits for CPU and memory; disappointingly, they only talk about how Portainer is a magic approach to this. This sadly echoes through the remaining questions, where the "answer" to everything is "Portainer does this with magic". I can respect explaining the challenge and traditional soln, and showing Portainer does it better, but that is not this. It's a miss from both the authors and the service to the community.
BottomLine: Good idea executed poorly - Kubernetes questions are all solved by Portainer - skip
==
URL reference: https://linuxsecurity.com/news/server-security/linux-patch-management
DateReviewed: 2025-08-05
Description: Our article today is on Linux Patch management. We start with a bit of general background on patching, then dive into the crux - what is linux patch management? They say it's a network security strategy, which I think is an odd framing, but do say it's about staying up to date. Next, they talk about the benefits, things like reducting cyberattack risk, improving performance and adding new functionality. They also tackle the downsides, with things like service disruption, compatibility issues and resource limitations. Once all done, they go through what you have to do to start, and give a good checklist of how to get started and what to do.
BottomLine: Good discussion on how patch mgmt can improve your security
==
URL reference: https://www.youtube.com/shorts/g-3MikhtaRU
DateReviewed: 2025-08-06
Description: This video is about Kubernetes in 60 seconds. They start by talking about containers and how all the parts get pulled together. They point out that the complexities are hidden, making devs lives easier. They talk a bit about how multiple containers are run through Kubernetes, and does nod to things like autoscaling.
BottomLine: Decent quick overview of Kubernetes in 60 seconds
==
URL reference: https://msdemo8.lll-ll.com/?i=4423448&li=27767012
DateReviewed: 2025-08-07
Description: Our article today talks about bringing your standard VM to a Kubernetes env. The solution is to use OpenShift according to our article, where they use a bit of the container approach along with a bit of the more traditional VM approach; the issue is that this is a bit of Fermat's last theorem, where they talk a bit about it in a short piece and don't give much more detail. Definately an interesting concept.
BottomLine: Short piece about integrating VMs and Containers with Kubernetes
==
URL reference: https://blueteamsec.net/2025/06/15/effective-incident-response-in-kubernetes-environments/
DateReviewed: 2025-08-08
Description: The article we'll be looking at today is about Kubernetes but from the perspective of a security responder -- we're looking at incident response. We start with a diagram of interactions, and I love diagrams. They do a bit of general background, then a short history on Kubernetes. They basically speedrun a glossary, giving you the names and short explainations of where they fit. We also get a chart of various namespaces. They then explain the workings, and we go through the various APIs/configs/pieces that do the backend work. Finally we get to the CLI, and they do a short runthrough on that. They then get into the part of doing an incident response - they go step by step, showing along the way what exactly to do. While not intended this way, this is a great intro to K8s in the beginning and then an awesome guide to troubleshooting. Recommended.
BottomLine: Very decent guide for a beginner on Kubernetes with an emphasis on security
==
URL reference: https://medium.com/@tfmv/declarative-ducklakes-on-kubernetes-6044736cf9a9
DateReviewed: 2025-08-09
Description: Our article today is a different take on Kubernetes - from a data perspective, in managing data - with a tool called Featherman. We start with a bit of background, and then talk about Featherman being a K8s operator that works on DuckDB. To get data flowing, they point out you can need up to 7 layers of software, each doing a specialized thing. They turn this on it's head, and explains how Featherman leverages K8s to do a data lake. We then dive into a series of YAML files which help put things together, and then go through a seven step process to get it running. They talk a bit about warm pool as well, and address security. I'd have like a little more chat about how this works, but it's a good piece.
BottomLine: Solid piece on using Featherman do deploy Kubernetes as a data lake
==
URL reference: https://www.csis.org/analysis/defense-priorities-open-source-ai-debate
DateReviewed: 2025-08-10
Description: Today's article looks at how open AI can be from a defense industry perspective. We start with a background, to understand the terms and how it might affect the military in general. They look at what they call "foundational models", basically the pieces that allow generative AI to do its thing. They talk a bit about civil society's approach to AI openness and AI safety, and explain the difference between open and closed systems. They talk about caution and also the need to innovate, and the fact that no one knows the impacts fully at the present time. They do explain that many military uses leverage current Linux systems, for smartphones, warships and missle warning systems. They also mention that F16s use Kubernetes to help manage their systems. They talk about the ambiguity of what "open models" mean, as there is some variety in what is being exposed as awll. They ask insteresting questions - are things like nuclear weapons export bans applicable, or is it more like public-key cryptography restrictions, now repealed? The piece goes on, but gets more policy wonk and less techincal as it goes; I'd recommend a read of the first part at least.
BottomLine: Good toe dip into military type issues around AI and open models
==
URL reference: https://linuxsecurity.com/features/talos-linux-redefining-kubernetes-security
DateReviewed: 2025-08-11
Description: This article is an intro to using Talos with Kubernetes along with why you might want to. We do a short para of background before diving into what Talos is all about. It's an API driven OS, which means no SSH access and not systemd to contend with. They claim that things like storing credentials and varied configs are eliminated with Talos, enhancing security. They also point out it's immutable by design, with a read-only filesystem - and things like configs and logs are managed externally. We then talk a bit about machineD, the alternative to systemd - it's a lightweight process manager. Lastly, they talk about how the kernel is secured - by something called ephemeral kernel mod signing. The idea here is that all kernel mods have to be signed and validated, preventing one vector of attack for those trying to gain access. To finish up, they do point out that while Talos is targeted at K8s, it doesn't have to be run there, as well as talking a bit about the limits of something like Talos to typical Linux admins. Good piece.
BottomLine: Solid piece talking about how Talos compliments Kubernetes as a container platform
==
URL reference: https://www.nivelepsilon.com/2023/10/11/understanding-kubernetes-crds-resource-definitions-and-operators/
DateReviewed: 2025-08-12
Description: Our piece today is a short but good one, on CRDs - Custom Resource Definitions. We start as often we do with a small bit of background, then a "what are CRDs" to get us going, along with "basic K8s functionality without CRDs". They lay out what K8s does natively, but then explain in the next section about the "need to extend K8s" -- basically having a way to add functionality without having a new server or API. They explain how CRDs interact with Controllers, which do the heavy lifting of creating or enacting the definitions of the CRDs. They then go through an example, YAML and all, of a CRD and it's controller. They do a second example of using an operator to manage a DB cluster, again with the YAML. A good walk through.
BottomLine: Solid walkthrough of what CRDs are and how they work
==
URL reference: https://nirmata.com/2025/04/28/level-up-your-kubernetes-security-automation-with-policy-as-code/
DateReviewed: 2025-08-13
Description: We start with a bit of background on Kubernetes and policy as code, and then pivot to some discussions at a recent KubeCon on the topic. They talk about how policy enforcement has evolved over time. They talk about how webhooks evolved into CEL, which is able to be written as YAML. They talk a bit about policy management with OPA Gatekeeper, before moving on to talking about using Kyverno to manage K8s policy stuff. Good discussion.
BottomLine: Interesting exploration of Policy as Code for Kubernetes
==
URL reference: https://idroot.us/install-kubectl-fedora-42/
DateReviewed: 2025-08-14
Description: We have an article with a bunch of ways to get Kubectl going on Fedora. We start as we often do with a bit of background, before looking at what Kubectl does inside Kubernetes. We then go through the pre-reqs required, like disk space and admin privs, and checking we're up to date security wise. They detail three methods - binary install, DNF package manager, and alternative package managers. To get configured, they detail setting up autocompletion, which helps you to reduce typing and typos when using K8s. We also look at common install issues and things like security considerations, best practices, the Fedora ecosystem and keeping Kubectl updated. Good read.
BottomLine: Decent hands on to installing Kubernetes kubectl on Fedora
==
URL reference: https://engineering.omio.com/we-saved-30-on-kubernetes-using-70-more-expensive-vms-8aeea555f8b0
DateReviewed: 2025-08-15
Description: This is an interesting case study on using various vendor features to reduce the amount of spend on Kubernetes. They give a bit of background on the company, and then dive in -- one thing they talk about is using Spot VMs for Nodes. They tell the good and the bad -- big discounts but also unpredictable interruptions. They tell their story through a series of observations, they talk about where they found sweet spots and how K8s reacts under various conditions. For instance, they identify 16 core w 1:4 cpu:mem ratio as the best price/performance trade off for themselves. They do an interesting experiment at the end as well. Well done.
BottomLine: Decent dive into various strategies around Kubernetes cost savings
==
URL reference: https://malik-hassan-qayyum.medium.com/how-kubernetes-works-a-city-analogy-for-container-orchestration-e5d7a477ee70
DateReviewed: 2025-08-16
Description: We dip into an article which explains Kubernetes by analogy to a city - I thought it might be silly at first, but for non-tech people it might be a good approach. We start with a bit of background, and then jump into the first components - The control plane. In our city analogy, they are the Mayor and City Council, and that is fairly apt, and then we map kube apiserver to City Hall. There is a diagram here (sadly NOT of city hall), and we continue with etcd mapped to the City Records office. I'll note they do talk a bit tech, explaining what the actual K8s part does at a high level. The next two are the scheduler and controller manager, and they map these to Job Assignments and City Inspectors. They go on like this, mapping out Node components, and then dipping into K8s addons like DNS and Dashboards, always mapping back. Good piece, not too long, great framing.
BottomLine: Awesome introduction to the Kubernetes ecosystem
==
URL reference: https://www.kubermatic.com/blog/kkp-2-28-more-security-and-control-with-kyverno-integration/
DateReviewed: 2025-08-17
Description: This turns out to be less of an article and more of a product announcement, but let's see what we can get out of it. It's for something called Kubematic Kubernetes Platform (KKP), and the newest version is 2.28. So they use Kyverno, and mention that now you can use policies directly in user clusters, and also do org-wide policies as well. I guess they've also improved the defaults, and allowed everything to be visible in the dashboard. They also mention that a new feature is the Global viewer role, which allows things to be shown read-only. While it's verbose, it doesn't explain why any of these features are better or how they are different then what existed already, making this whole thing opaque to those who aren't very aware of the product already.
BottomLine: Product announcement which falls a bit short on explainations
==
URL reference: https://thenewstack.io/how-to-run-kubernetes-commands-in-go-steps-and-best-practices/
DateReviewed: 2025-08-18
Description: Our article today is a guide for how to interact with Kubernetes from the very language it was written in, which is Go. We start with a bit of background, talking about how you might have to invoke a shell to manage K8s. They then talk about why Go is a good choice to use for K8s automation, with 7 points to make. For pre-reqs, you need things like Go toolchain and support modules. They mention K8s config and using security through RBAC to know what you can do. They walk through installing and setting up, talking about needing the client-go library. They walk through that, and getting support modules you might need. For the setting up, they show how to load a kubeconfig file, and use it to run a K8s client to do commands. They walk us through doing a listing of pods in a specific namespace programmatically. They then do a walkthrough of how to create a deployment, as a template for K8s resources, and then show how to delete a resource. They even show how to run a "raw" K8s command from the shell, along with how to get the output and send input to it. They actually go into a lot more stuff, but this is a solid intro to both Go and using K8s with Go.
BottomLine: Solid article showing how to use Go to interact with Kubernetes
==
URL reference: https://www.itprotoday.com/cloud-computing/how-to-ssh-into-a-kubernetes-pod
DateReviewed: 2025-08-19
Description: This article talks about SSHing into a Kubernetes pod. As is almost always the case, we start with a bit of background here, before we address what SSH is and why we might want to use it. They explain that SSH is usually used to log into machines, but we can also configure Pods to allow it. They go through some of the benefits of using SSH, which include speed and full session encryption. They talk a bit about kubectl exec as an alternative, but you have to have access to a CLI session to start, and you are dropped in as root on the container -- which complicates things. Finally, we walk through the steps to get things going. First is installing SSH into your pod, and then configuring it to allow login in your dockerfile, and then build that image. You also need to set up port forwarding for things to work smoothly, and finally test things by SSHing into your pod.
BottomLine: Good motivation and walkthrough on why and how to use SSH to access your Kubernetes pods
==
URL reference: https://securitylabs.datadoghq.com/articles/kubernetes-security-fundamentals-part-7/
DateReviewed: 2025-08-20
Description: Our article today digs into PKI, the cryptography that underlies much of Kubernetes auth and secure transport. We start with an overview of the implementation, along with a diagram (yay). We then dig into CAs and certificates, which are important for K8s functions so that various entities and resources can obtain certs. They talk about keeping they secure and general distribution of certs. Very interesting.
BottomLine: Good discussion about Cryptography and Cert management on Kubernetes
==
URL reference: https://tanmaybatham.medium.com/snowflake-and-kubernetes-a-perfect-match-for-modern-data-architecture-4fa82a6f1eea
DateReviewed: 2025-08-21
Description: This article talks about how Snowflake and Kubernetes can work together to give solutions for data and apps. We start with an intro, which gives us the big picture - Snowflake helps provide data warehousing, while Kubernetes does the orchestration pieces. Then we dive in, where they talk a bit more about how Snowflake does its thing, with warehousing, data lakes and analytics; multi-cloud, secure data sharing, seperatation of compute and storage, automatic optimization, built in security and zero copy cloning. They then go through the features of K8s, to get us up to speed. Then we look at integration between them, starting with data processing with K8s, and running through some apps to prep data for Snowflake. Next we look at APIs and Microservices for Snowflake, like serverless or gRPC or REST APIs. Next is CI/CD for data pipelines, using GitOps workflows, ensuring data integrity and using K8s native tools. They go through a couple more, each time explaining and then showing the YAML for each integration. They then go through some real life use cases -- real time fraud detection for finanacial services, personalized shopping recommendations and AI powered medical imaging analysis. They then go through a bit more before wrapping up. 
BottomLine: Good examples of using Snowflake with Kubernetes in various applications
==
URL reference: https://hawkstack.com/
DateReviewed: 2025-08-22
Description: I thought this was a discussion of the future of Kubernetes, but it turns out this is more of a pitch to use a specific company, so we'll critique that. We start with a throwaway statement, and move on to interesting sounding statements and a lot of handwaving. The website is slick, but there is no actual meat there. They don't have testimonials, they don't mention any projects they've done, there is no product. They have two quotes at the end, which seem to pan to new ones, but it's just those two again and again. 
BottomLine: Good example of an interesting website that says nothing.
==
URL reference: https://nonmonotonic.dev/posts/halp-mcp/
DateReviewed: 2025-08-23
Description: This article is an exploration of doing weird things with various computing bits, with a utility called Halp. The idea is to send messages by blinking your CapsLock light in Morse code. We start with a brief background and talk about the groups he's trying to help with this type of project. He enlists the use of AI throught the Claude project for the code, and hooks in an MCP server to help with the invocation of the CLI tool that does the flashing. He shows and does some overview of the code, and then talks about how to make things even more fun. Actually a pretty cool project.
BottomLine: Describes using Claude AI and MCP to blink a LED for a fun but practical project
==
URL reference: https://www.cncf.io/blog/2025/07/16/securing-kubernetes-1-33-pods-the-impact-of-user-namespace-isolation/
DateReviewed: 2025-08-24
Description: Today's blog entry talks a about user namespace isolation in Kubernetes. Basically this allows containers to get their own UID/GID mappings, meaning that when the processes run on the actual host they aren't in the priv space; and moreso, they don't share with each other, meaning if there is some way to spill between containers it doesn't give you any privs. The pods run unpriv'ed, and "root" on the pod is unique along with all other IDs. They explain how to enable it, along with what the prereas are. They also go through how filesystems support it.
BottomLine: New security feature of user namespace isolation is explained for Kubernetes
==
URL reference: https://itnext.io/kubrix-your-out-of-the-box-internal-developer-platform-idp-for-kubernetes-ba4c2671e6d1
DateReviewed: 2025-08-25
Description: This article focuses on a tool called kubriX, an internal developer platform ready it claims "out of the box". There is a bit of setup, a big diagram, and then the motivation - people asking if there is an IDP that the author recommends "out of the box". We get another diagram, this time showing IDPs and their segment divided by how they work, and talks a bit about where they are positioned. He talks a bit about the fact that the offerings are toolsets, and not fully backed solutions. He also points out a lot is already going on, but says one key gap is service provisioning, which allows Devs to deploy a service with templates. He then outlines what he feels are the must haves for an IDP, with explaination and diagram. He then tries to source these from the CNCF landscape, and shows how overwhelming the choices can be. He now "simplifies" into 8 areas, while identifying contenders for each area. They are CI, CD, app templates and scaffolding, scheduling & orchestration with ability to multi-tenant, service proxies/ingress, DBs, security and compliance and observability. He touches on "building our own IDP", before doing a deep dive on what kubriX offers and why it's a solid choice. There is a bit of a walkthrough on getting things set up too, with YAML and instructions too. 
BottomLine: Good piece on IDP kubriX, and why it might be a good fit for your Dev env
==
URL reference: https://secconf.org/harsha-koushik
DateReviewed: 2025-08-26
Description: Our piece today isn't an article but rather a short abstract on the deceptive shield of allowprivescalation: false flag. They talk about the flag in general, what it does affect, and a bit about the limits and misconceptions that can be dangerous about the flag.
BottomLine: Good quick overview on a Kubernetes security flag that is often misunderstood
==
