URL reference: https://securityboulevard.com/2025/06/linuxfest-northwest-chaos-testing-of-a-postgres-cluster-on-kubernetes/
DateReviewed: 2025-08-01
Description: The article is really a stub around a presentation at a conference of Chaos testing PostgreSQL on Kubernetes. So the outline is running dbs in prod, why run dbs on K8s, running PG on K8s, observability - what's going on, an finally breaking things on purpose. They talk a bit about strategy for DBs, then a bit about DBaaS ... pros and cons, and posture that K8s allows you to change the approach to DBs. It makes things lighter and easier to do. They show a diagram about building a PG cluster, which is easier to do with pods and K8s. They go through a replica failure, and what an "app" sees in comparison. They also look at things if K8s is in the mix.
BottomLine: Interesting discussion of how to use Postgres on Kubernetes
==
URL reference: https://www.nivelepsilon.com/2024/02/25/simplifying-kubernetes-how-distroless-images-change-the-game/
DateReviewed: 2025-08-02
Description: Our article today focuses on distroless images and how they help to simplify Kubernetes. We jump in with a discussion of containers and their backing images, explaining where we started and what this represents. We then dig into the benefits, which include better security, less overhead and size, and simpler maintenance. They have a good formula for using the new images - figure out what your dependencies are, select a base image that works with that, adjust your Dockerfile, and finally test the resulting images. They show us how this works with a multi-stage Dockerfile that sets everything out. They then go through, explaining some of the bits of the file in the main text. One thing they do say is that this approach may not work in all cases -- so see if it fits your use case. Good approach.
BottomLine: Interesting short paper on actually using Distroless for Kubernetes
==
URL reference: https://dev.to/shashankpalakurthi/getting-started-with-kyverno-kubernetes-policy-made-simple-4f89
DateReviewed: 2025-08-03
Description: Today we'll be digging into Kubernetes policy with Kyverno. We start with a paragraph on what is Kyverno, which is a policy admission controller. Next they dip into why do we need it, explaining that it helps build guardrails around what is allowed or not. We then get into the how, which is through K8s CRDs - custom resource definitions. We also dig a bit into how to config Kyverno, where they tell us about things like policy types, rules, and policy modes. There is a reporting mode called Audit, and Enforce mode which strictly enacts policies. They also touch on policyException, which is a way to avoid a policy for a certain reason. Lastly, they take us through PolicyReport -- which they point out is only helpful for Audit mode, because it lists non-compliant resources, where in enforcing mode the resources would never be created. Good read.
BottomLine: Good intro to Kyverno and security policies in Kubernetes
==
URL reference: https://www.portainer.io/blog/practical-no-nonsense-answers-to-reddits-top-docker-and-kubernetes-questions
DateReviewed: 2025-08-04
Description: This article is going to try and answer the top Docker and Kubernetes questions, so let's get started. We start with a bit of bookkeeping on where the questions were sourced from, and then dive right in. The format is that they state the question, and then respond in 2 or 3 paragraphs. First Q is about K8s complexity, and they urge an incremental approach. Q2 is a good one, on limits for CPU and memory; disappointingly, they only talk about how Portainer is a magic approach to this. This sadly echoes through the remaining questions, where the "answer" to everything is "Portainer does this with magic". I can respect explaining the challenge and traditional soln, and showing Portainer does it better, but that is not this. It's a miss from both the authors and the service to the community.
BottomLine: Good idea executed poorly - Kubernetes questions are all solved by Portainer - skip
==
URL reference: https://linuxsecurity.com/news/server-security/linux-patch-management
DateReviewed: 2025-08-05
Description: Our article today is on Linux Patch management. We start with a bit of general background on patching, then dive into the crux - what is linux patch management? They say it's a network security strategy, which I think is an odd framing, but do say it's about staying up to date. Next, they talk about the benefits, things like reducting cyberattack risk, improving performance and adding new functionality. They also tackle the downsides, with things like service disruption, compatibility issues and resource limitations. Once all done, they go through what you have to do to start, and give a good checklist of how to get started and what to do.
BottomLine: Good discussion on how patch mgmt can improve your security
==
URL reference: https://www.youtube.com/shorts/g-3MikhtaRU
DateReviewed: 2025-08-06
Description: This video is about Kubernetes in 60 seconds. They start by talking about containers and how all the parts get pulled together. They point out that the complexities are hidden, making devs lives easier. They talk a bit about how multiple containers are run through Kubernetes, and does nod to things like autoscaling.
BottomLine: Decent quick overview of Kubernetes in 60 seconds
==
URL reference: https://msdemo8.lll-ll.com/?i=4423448&li=27767012
DateReviewed: 2025-08-07
Description: Our article today talks about bringing your standard VM to a Kubernetes env. The solution is to use OpenShift according to our article, where they use a bit of the container approach along with a bit of the more traditional VM approach; the issue is that this is a bit of Fermat's last theorem, where they talk a bit about it in a short piece and don't give much more detail. Definately an interesting concept.
BottomLine: Short piece about integrating VMs and Containers with Kubernetes
==
URL reference: https://blueteamsec.net/2025/06/15/effective-incident-response-in-kubernetes-environments/
DateReviewed: 2025-08-08
Description: The article we'll be looking at today is about Kubernetes but from the perspective of a security responder -- we're looking at incident response. We start with a diagram of interactions, and I love diagrams. They do a bit of general background, then a short history on Kubernetes. They basically speedrun a glossary, giving you the names and short explainations of where they fit. We also get a chart of various namespaces. They then explain the workings, and we go through the various APIs/configs/pieces that do the backend work. Finally we get to the CLI, and they do a short runthrough on that. They then get into the part of doing an incident response - they go step by step, showing along the way what exactly to do. While not intended this way, this is a great intro to K8s in the beginning and then an awesome guide to troubleshooting. Recommended.
BottomLine: Very decent guide for a beginner on Kubernetes with an emphasis on security
==
URL reference: https://medium.com/@tfmv/declarative-ducklakes-on-kubernetes-6044736cf9a9
DateReviewed: 2025-08-09
Description: Our article today is a different take on Kubernetes - from a data perspective, in managing data - with a tool called Featherman. We start with a bit of background, and then talk about Featherman being a K8s operator that works on DuckDB. To get data flowing, they point out you can need up to 7 layers of software, each doing a specialized thing. They turn this on it's head, and explains how Featherman leverages K8s to do a data lake. We then dive into a series of YAML files which help put things together, and then go through a seven step process to get it running. They talk a bit about warm pool as well, and address security. I'd have like a little more chat about how this works, but it's a good piece.
BottomLine: Solid piece on using Featherman do deploy Kubernetes as a data lake
==
URL reference: https://www.csis.org/analysis/defense-priorities-open-source-ai-debate
DateReviewed: 2025-08-10
Description: Today's article looks at how open AI can be from a defense industry perspective. We start with a background, to understand the terms and how it might affect the military in general. They look at what they call "foundational models", basically the pieces that allow generative AI to do its thing. They talk a bit about civil society's approach to AI openness and AI safety, and explain the difference between open and closed systems. They talk about caution and also the need to innovate, and the fact that no one knows the impacts fully at the present time. They do explain that many military uses leverage current Linux systems, for smartphones, warships and missle warning systems. They also mention that F16s use Kubernetes to help manage their systems. They talk about the ambiguity of what "open models" mean, as there is some variety in what is being exposed as awll. They ask insteresting questions - are things like nuclear weapons export bans applicable, or is it more like public-key cryptography restrictions, now repealed? The piece goes on, but gets more policy wonk and less techincal as it goes; I'd recommend a read of the first part at least.
BottomLine: Good toe dip into military type issues around AI and open models
==
URL reference: https://linuxsecurity.com/features/talos-linux-redefining-kubernetes-security
DateReviewed: 2025-08-11
Description: This article is an intro to using Talos with Kubernetes along with why you might want to. We do a short para of background before diving into what Talos is all about. It's an API driven OS, which means no SSH access and not systemd to contend with. They claim that things like storing credentials and varied configs are eliminated with Talos, enhancing security. They also point out it's immutable by design, with a read-only filesystem - and things like configs and logs are managed externally. We then talk a bit about machineD, the alternative to systemd - it's a lightweight process manager. Lastly, they talk about how the kernel is secured - by something called ephemeral kernel mod signing. The idea here is that all kernel mods have to be signed and validated, preventing one vector of attack for those trying to gain access. To finish up, they do point out that while Talos is targeted at K8s, it doesn't have to be run there, as well as talking a bit about the limits of something like Talos to typical Linux admins. Good piece.
BottomLine: Solid piece talking about how Talos compliments Kubernetes as a container platform
==
URL reference: https://www.nivelepsilon.com/2023/10/11/understanding-kubernetes-crds-resource-definitions-and-operators/
DateReviewed: 2025-08-12
Description: Our piece today is a short but good one, on CRDs - Custom Resource Definitions. We start as often we do with a small bit of background, then a "what are CRDs" to get us going, along with "basic K8s functionality without CRDs". They lay out what K8s does natively, but then explain in the next section about the "need to extend K8s" -- basically having a way to add functionality without having a new server or API. They explain how CRDs interact with Controllers, which do the heavy lifting of creating or enacting the definitions of the CRDs. They then go through an example, YAML and all, of a CRD and it's controller. They do a second example of using an operator to manage a DB cluster, again with the YAML. A good walk through.
BottomLine: Solid walkthrough of what CRDs are and how they work
==
URL reference: https://nirmata.com/2025/04/28/level-up-your-kubernetes-security-automation-with-policy-as-code/
DateReviewed: 2025-08-13
Description: We start with a bit of background on Kubernetes and policy as code, and then pivot to some discussions at a recent KubeCon on the topic. They talk about how policy enforcement has evolved over time. They talk about how webhooks evolved into CEL, which is able to be written as YAML. They talk a bit about policy management with OPA Gatekeeper, before moving on to talking about using Kyverno to manage K8s policy stuff. Good discussion.
BottomLine: Interesting exploration of Policy as Code for Kubernetes
==
URL reference: https://idroot.us/install-kubectl-fedora-42/
DateReviewed: 2025-08-14
Description: We have an article with a bunch of ways to get Kubectl going on Fedora. We start as we often do with a bit of background, before looking at what Kubectl does inside Kubernetes. We then go through the pre-reqs required, like disk space and admin privs, and checking we're up to date security wise. They detail three methods - binary install, DNF package manager, and alternative package managers. To get configured, they detail setting up autocompletion, which helps you to reduce typing and typos when using K8s. We also look at common install issues and things like security considerations, best practices, the Fedora ecosystem and keeping Kubectl updated. Good read.
BottomLine: Decent hands on to installing Kubernetes kubectl on Fedora
==
