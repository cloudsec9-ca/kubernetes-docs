
URL reference: https://thenewstack.io/ambient-mesh-sidestepping-the-sidecar/
DateReviewed: 2023-03-02
Description: The apparent focus of this article is how using an ambient mesh allows you to not use sidecars, or so the title says. Sidecars have issues, but they never really explain that, or tell us how mesh handles this really, other than handwaving that sidecars require "high skill". Now I personally know just a bit about sidecars, and I understand the concept of mesh, but none of that was enhanced by reading this article. I get that sidecars require another container that you save if you don't use them, and they talk a bit about that. We then go on a journey through the marketing tent talking about "friction" and "zero trust", with no examples or concrete tie to mesh. Oh, and before the end, we are told there is a place sometimes for sidecars. There is also an example, where they mention that deploying needs careful planning with sidecars, because they are coupled closely to the application? Now, there IS a short video, but I get the feeling that an editor cut something out, because a bunch of the connections are not there.
BottomLine: Buzzword compliant without much meat
===
URL reference: https://shivanshu1333.medium.com/structured-logging-in-kubernetes-58cf35e6d60d
DateReviewed: 2023-03-03
Description: I'll admit I was expecting a bit more when the upfront graphic was a fully drawn out Kubernetes cluster, and I thought this would be a deep dive. But this is actually an announcement and a bit of tech trivia, and for that it is simple, clear, and to the point. Apparently before Kubernetes v1.19, logs went to flat string, but as of .19, you can now output JSON formatted logs. I'm not sure this changes things for human viewers, but it allows parsing tools a chance to pull bits out for observability and alerting, so that is good.
BottomLine: Good new feature announcement
===
URL reference: https://www.infoworld.com/article/3663734/kubernetes-users-struggle-with-security-red-hat-survey-says.html
DateReviewed: 2023-03-05
Description: Another article that starts strong and ends with a whimper. Starting with a solid premise that something that is complex to set up can be a challenge to secure, it backs up some statements with numbers. But, other times it btings gems like "sometimes leading to the loss [of money]". Now the article is based on a RedHat survey, but it feels like the take here is more about "containers bad and scary". It does talk about building security into the process and mentions devsecops, and ends with some RedHat recommendations.
BottomLine: Handwavy overview, ok as a quick first glance
===
URL reference: https://grahamcluley.com/feed-sponsor-sysdig-2/
DateReviewed: 2023-03-06
Description: Okay, I really liked the premise of this article, and had hopes -- there isn't a lot about cost or budgeting for Kubernetes. And, if you don't know what you are using, you might be overspending -- fair point. But a few paragraphs in, we are shocked to learn that only 38% of developers can predict cloud spend within 10%. So wait, devs have to write good code, fast, and do so securely, AND be able to forecast usage to be able to predict spend? I can't say I'm onboard with that bit. I think there is a lot of opportunity to talk about tuning K8s, and getting a better fit for workloads -- but this artticle handwaves at that, and pitches - a commercial product. Now, I'm not against including paid products in the mix, but it's curious that the report that is used for much of the article AND the sponsor just happen to be the same as the product pitched? The report might be worth a look, but this article is a bust.
BottomLine: Just a thinly-veiled product pitch
==
URL reference: https://medium.com/@blgreco72/debugging-kubernetes-services-locally-8cb14bf8745a
DateReviewed: 2023-03-08
Description: This article is a pretty decent tutorial into doing local debugging. The idea isn't just to do your development locally, but to actual run and be able to debug in a local debugger the microservice code. The tutorial goes through what you need to set up, disable, and configure to get your remote Kubernetes cluster to talk to your local host for the service, and how to use that in your debugger. I love this idea, and while I haven't yet tried this myself, I'm goint to circle back to try this for sure.
BottomLine: A good walkthrough on using local debuggers with remote Kubernetes clusters
==
URL reference: https://www.globalsign.com/en/blog/why-mtls-should-be-everywhere-kubernetes
DateReviewed: 2023-03-10
Description: Another article I like the premise/title of, so that is a decent start. It then talks about the uptake in Kubernetes, and the corresponding uptick in attacks. And then it mentions ransomware -- which might be a threat, sure -- but only that in relation to Kubernetes, which seems odd. We then talk about what mTLS is, and why it's good, yay. And then we dive into -- phishing attacks, brute force, and malicious API requests, which are protected supposedly by mTLS? So, while mTLS can help limit blast radius, it doesn't focus on these attacks. The article then talks about man-in-the-middle attacks, which in fact mTLS _does_ help address; but I guess having one good thing isn't enough? The article then dives into issues with cert management. Now, while I overall think mTLS is a good thing, this article doesn't make the case very well.
BottomLine: Good premise, poor evidence and examples in the body
==
URL reference: https://devops.com/optimizing-cloud-costs-for-devops-with-ai-assisted-kubernetes/
DateReviewed: 2023-03-11
Description: This article starts by outlining why you want to control costs, and the common approaches, and why there isn't a perfect fit today. Then, alluding to a specific tool, we journey through what is needed, which includes ease of use, support for everything, HA, easy to start, and secure. Magic! And, that's all we get, because while we do get platitudes about how great the tool is, there is no actual examples or walkthroughs. Oh, and AI too!! Except, not a whisker of information on how AI is used or makes any of this better. This tool might be awesome, but there is ZERO reason advanced in this article.
BottomLine: Where's the beef is an understatement - skip
==
URL reference: https://itnext.io/how-to-use-linkerd-to-restrict-access-to-certain-services-a0122b35dede
DateReviewed: 2023-03-16
Description: This is a decent hands on tutorial, explaining how to allow and disallow various pods or namespaces from communicating. It starts strong with the prerequisites, then goes through things step by step, and it seems like a decent approach. Minor issues: it says it's a 4 minute read, but it'll take longer than that to do the walk through; and there is a mix of imparative and declarative approaches, where I wish it would be consistent. I haven't used Linkerd but this tutorial motivates me to give it a whirl!
BottomLine: Decent approach to allow & disallow at a pod/namespace level using Linkerd
==
URL reference: https://www.tigera.io/blog/waf-is-woefully-insufficient-in-todays-container-based-applications-heres-why/
DateReviewed: 2023-03-17
Description: I don't really agree with the premise of this article, but let's see what type of argument it makes. It starts strong by explaining WAFs, and highlighting strengths and weaknesses. And then, it goes a bit downhill. It rails against using WAFs only, and later on has to honk the "zero-trust" horn; but there isn't an enumeration of zero trust, and good security is about layers, not a single technology or control. And at the end, the article admits that we just have to modify how we use WAFs, not abandon them completely.
BottomLine: Title very clickbaity, and article light on evidence and illustration of its points
==
URL reference: https://itnext.io/using-cosign-keyless-signature-with-github-actions-de675a1e18a2
DateReviewed: 2023-03-18
Description: I like an article that starts strong with prerequisites and background, and this one is all good - it explains what code signing is, and why you need it, and then explains a bit about what "keyless" code signing is. It then explains how he workflow works, and has an example config with how it is invoked. It has links to a few things including another example, and some of the definitions and background. Now, the article doesn't purport to be a tutorial, but says it's a "step by step" guide while only waving at the steps. They do mention that to be useful, you have to add verification on the image consumption side, so there is that. But one miss is explaining that it's "keyless" because it uses ephemeral keys, and the verification you get is one of being untampered, but no assurance of the source of the image -- so you'll have to trust your Image repository to do that for you.
BottomLine: Interesting concept, but wish it would have been a fuller tutorial
==
URL reference: https://github.com/aws/aws-node-termination-handler
DateReviewed: 2023-03-20
Description: This is an AWS built little gem for using within any Kubernetes cluster inside of AWS, managed or not. It seems quite featureful, with two different flavours to choose from and good high level docs. A surprise for me was a testing mockup which simulates things like spot interruption, which is a nice find. It's pretty well laid out, and since it's written in Go I haven't a clue on code quality, but it's got lots of tests and docs, and being well organized bodes well.
BottomLine: Neat little find to help with Kubernetes graceful shutdowns on AWS
==
URL reference: https://www.cncf.io/blog/2022/05/24/kubernetes-ephemeral-container-security/
DateReviewed: 2023-03-23
Description: This article starts strong and just keeps on going; it knows what it it is, and has focus and drive. It's focused on something called Ephemeral containers, which allow you to do things that your typical best-practice immutable containers can't do -- contain extra tools, writeable file spaces, etc. And it approaches this from a security perspective -- how do you enable them if you need them, and just as important, how can you deny them if you don't want them? It's got some technical bits including config examples, so bravo.
BottomLine: Recommended if you need or have exposure to Ephemeral containers.
==
