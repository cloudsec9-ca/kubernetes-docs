
URL reference: https://magnintel.com.au/cloud-security-best-practices/
DateReviewed: 2024-02-01
Description: This piece positions itself as a Cloud sec best practices for small biz; I have some thoughts on this, but let's dig into the article first. They say they want to dive into risks, and give that all of one sentence. So on to best practices! They have 10 best practices, and use a formula of "what it is, how it helps, implementation tips" on all practices. Covered includes Data encryption, access controls & identity mgmt, security audits, MFA, Incident response planning, data backups, vendor security assessment, employee training, secure config and finally legal and compliance regulations. They then list 5 ways using best practices saves money. Now, the covered topics are decent and fine intros, and the saving money is nice. My problem with the piece is that it is aimed at small biz, and where would small biz have money for audits and incident response? This feels more aimed at mid-sized biz, or maybe in AU small biz is bigger?
BottomLine: Okay intro but weirdly aimed at small biz for Cloud security
==
URL reference: https://medium.com/@vishy.nitj/understanding-mutual-ssl-authentication-85efb2b050f4
DateReviewed: 2024-02-02
Description: So here, we're looking into mutual auth for SSL, or mTLS. Now, the setup is a bit weird, as it refers to a certain website, but okay. They then go on to show you the OpenSSL commands, without really explaining what OpenSSL is or what they do (they create keys, then a cert request, then sign the certs). They then use the certs to create Kubernetes secrets. We then get YAML to deploy the certs, which is cool, and to access them. Finally we do a test with Curl to validate the keys. While this is scriptable, I did just review a mTLS setup that does the Cert process for you. But this is a good local test alternative.
BottomLine: Shows you how to set up mTLS for Kubernetes on the CLI
==
URL reference: https://medium.com/@angelomarchaidez/docker-flask-kubernetes-building-a-lottery-application-with-python-8d38af40a3d4
DateReviewed: 2024-02-03
Description: This is about building a lotto app with Flask, and a way to work with containers. It's a simple lotto guesser app, that shows you the likelyhood of your numbers winning. They go through the UI, and explain how things will work. Then, they give the Python code which will run the backend, and then explain what it does. They then show us the html templates for data entry and results, which Python will use on the web side. Now that it works, we're going to Dockerize it so we can create a container out of it. We grab a Python base image, make some tweaks and build an image of the Flask app. We then go through the process to push to Docker hub. Now they go through the process of using this image, in this case by a YAML file to create a Kubernetes deployment, and then goes through the K8s CLI command to get it running.
BottomLine: A good basic walk through of deploying a Python app to a container
==
URL reference: https://medium.com/@SaiDevaPro/exploring-advanced-concepts-in-kubernetes-unlocking-its-deepest-potential-d92b79094594
DateReviewed: 2024-02-04
Description: Apparently, we're going to wield K8s to it's fullest potential, so let's go. We start with CRDs and Operators, and they explain for a para each what they are. Moving on we look at Advanced networking like service mesh, which K8s enables but they don't actually explain. Next up is Persistent storage, where they talk about various mechanisms. There are three more topics covered, but each of them is about a paragraph long. They include Resource mgmt and autoscaling, Observability and monitoring, and Security and compliance. All are great topics, but I'd say this piece fails to live up to it's potential, with a scratching the surface coverage of all topics.
BottomLine: Good topic list but poor in-depth coverage, this piece disappoints
==
URL reference: https://medium.com/@seifeddinerajhi/most-common-mistakes-to-avoid-when-using-kubernetes-anti-patterns-%EF%B8%8F-f4d37586528d
DateReviewed: 2024-02-05
Description: We start with Kubernetes is powerful, but it's easy to make a config mistake. So this article will work to help you avoid them! So, there are ELEVEN areas of concern they tackle, and all of them are fairly good. And they even come with a bunch of paragraphs going through each topic, with diagrams where approporiate. Just a few of the areas they cover include resource limits, health ckechs, privs of containers. and overuse of LoadBalancer. Overall, a well done piece.
BottomLine: Very good piece detailing common config mistakes in Kubernetes and how to avoid them
==
URL reference: https://securityboulevard.com/2024/02/kubernetes-security-best-practices-definitive-guide-for-security-professionals/
DateReviewed: 2024-02-06
Description: Kubernetes uptake increase, it's security becomes more critical, so in this article we'll look at K8s security practices. We start with a short overview of K8s, and then get to what is Kubernetes security. So, K8s security isn't only the cluster, but also the infrastructure that it is deployed on. They argue that one bad container can be equal to an entire compromise of the cluster, which is a bit of scare mongering in my opinion. We then jump into a chat about the four C's, which is decent, and then they go into detail, explaining what thing are and how they relate to each other. While still high level, they do dig down into concepts and try to build understanding. There is one new concept to these best practices pieces -- the idea of shifting left, or doing security earlier in the dev process. It's a long and actually good intro, despite a bit of fear mongering early on. I'd say it's a good intro look at Kubernetes security.
BottomLine: Solid high-level Kuberentes security intro, which does try to go deeper into understanding the various areas
==
URL reference: https://medium.com/@kavishkafernando/exploring-the-kubernetes-architecture-a-foundation-for-modern-application-deployment-f2c0f15d661e
DateReviewed: 2024-02-07
Description: We start of by talking about what Kubernetes provides, and this article will approach things from a development perspective. We start with K8s arch, along with a decent diagram to help a dev understand where we are. We go through the components on the "master node", which is actually the control or backplane of K8s. There are 5 they go through, with a short paragraph laying out what they do. They then tour the Worker nodes, explaining Kubelet, Kube-proxy and the container runtime. They do brief runthroughs of pods and K8s networking, and end up talking about persistent storage. A quick but decent dev overview.
BottomLine: A quick developer focused overview of what Kubernetes is and how it works
==
URL reference: https://dzone.com/articles/bridging-the-observability-gap-for-modern-cloud-ar
DateReviewed: 2024-02-08
Description: Cloud allows complexity, but with this comes fragility and opacity in observability areas. So the apparent answer to this is of course AI, which we'll check out in this article. They look at using AI for code specifically, and found it was less complex and had better style adherence, wasn't worse security wise but had less test coverage. They then start to talk about AI observability, but don't rely dive into details much. A bit of handwave is given to ML and models, but not how they are used or what they are doing. Finally we get to something interesting -- being able to monitor data "freshness, volume and lineage" -- which does sound interesting. A few more paragraphs and they wrap up. So, it's a lot of words to not say too much. It's VERY high level, but while introducing tools it doesn't explain why you'd need them or really what they do. It doesn't do a compelling job of motivating you to even find out more.
BottomLine: No gaps are filled with this article -- not even worth a skim
==
URL reference: https://fixyacloud.com/kubernetes/how-to-configure-coredns-for-kubernetes
DateReviewed: 2024-02-09
Description: We start with a quick paragraph explaining that K8s is popular, and that DNS is a key glue to hold things together. In this article, we'll do a walk-through of installing CoreDNS, which offers service discovery and DNS based load balancing. They quickly explain that CoreDNS is an alternative to the built-in kube-dns and is more flexible, and then we're onto our prereqs. Next up is the actual start of our walk through, and each explains what needs to be done and then gives the CLI command to do it. First is installing CoreDNS. Next is verifying that it's running as expected. They now give us a YAML config file and we use this to actually configure the DNS. Our new config needs a restart, and we have to emit a command for this. And we want to verify that things are still running, so another command. We're thorough though, so we also do a lookup to make sure the DNS resolution is also working. Quite tight and fairly well done -- I'd have liked some output and maybe a diagram, but overall a very solid walkthrough.
BottomLine: Very good walkthrough of installing CoreDNS on Kubernetes
==
URL reference: https://contabo.com/blog/mastering-kubernetes/
DateReviewed: 2024-02-10
Description: Apparently a sequel to an older guide, this article will tell us how to really master Kubernetes. We start with configuring applications, and they go through Config Maps, Env variables and volumes for config files. This is done at a high level, but it gives a decent understanding of how things are done. Next is secret handling, and they go through best practices and explain how things work. We then move on to monitoring K8s, and they talk about both simple and more complex approaches, which should be tailored to your situation. They then have a decent section on troubleshooting, and tips and techniques you can try to track things down. We then move on to Security in K8s, and they cover RBAC here. We also dip into securing Pod comms, and this gets into Network security in K8s. We move on to K8s benefits (why isn't this in the basics?) and use cases, which are short and high level, but decent for a toe-dip. We conclude with a K8s cheat sheet. I'll say I'm a bit disappointed -- it's quite high level for a "mastery" document, but as a general overview it is very solid.
BottomLine: Good general overview of Kubernetes topics - but lacks deep dive to be a master
==
URL reference: https://www.valewood.org/topics/devops/learn/get-started/engineering/early-devops/
DateReviewed: 2024-02-11
Description: We start with some preamble that doesn't relate before scrolling down to the actual article, which promises an exciting career in DevOps. They do explain that DevOps is a team approach, and that there is lots to know. We have to know code, and they point to languages like Python and Ruby; then they explain we'll be using automation tools like Chef or Puppet. At this point, I tried to find a publish date, because no one is doing new projects with these tools now, as opposed to Ansible or Terraform. They do highlight skills and understanding, and keeping up to date in the community with things such as conferences. They talk a bit about practices, like Continuous Delivery or Site Reliability and how this helps build a strong culture. We also talk about Automated testing and IaC, and how they build on other practices. Unfortunately, in the end they try to build a roadmap but seem to get lost in the wilderness, and while they use a lot of good phrases, there isn't great advice on what to do.
BottomLine: DevOps jobs piece that starts strong and finishes weak
==
URL reference: https://fixyacloud.com/kubernetes/how-to-create-init-containers-in-kubernetes
DateReviewed: 2024-02-12
Description: We start with a brief overview of init containers, the startup scripts of the K8s world. This is a walk through, so let's go! First, we start by defining the init container in YAML, so they show us how to do it for both the init and the main container. They then explain what we should be doing in the init container - downloading dependencies, db setups, and configuring environment variables. We can run them in parallel or sequentially, depending on our needs. Finally, the give us a command to check the init container status. Now some examples - includes downloading a dependency and etting a env variable.
BottomLine: Decent walk through of init Containers for Kubernetes
==
URL reference: https://www.stb.id.au/blog/meet-kacti
DateReviewed: 2024-02-13
Description: This is about a security control in Kubernetes called Kacti, and is told by its author. So what kacti does is try to deploy known bad images or misconfigurations, and see if that succeeds. If it does, controls are not effective. It's a neat approach. Just to be clear, the test is performed against your admission controller and its policies -- and it should reject bad configs and images. Next we do a walkthrough. First you install the software, and then they show us the CLI for deploying a bad image. At first, the bad image is deployed, and kacti fails the controller; then they add checking for bad images and re-run, causing the controller to reject the image and pass the test. They give a bit more details along with a bit of what they'd like to come, as it's a new tool.
BottomLine: Interesting approach to security by testing your Kubernetes admission controllers
==
URL reference: https://securityboulevard.com/2024/02/exploiting-kubernetes-through-operator-injection/
DateReviewed: 2024-02-14
Description: We start with a short blurb on what controllers are and that they can be a bespoke attack surface. This article will take us through an attack on a controller. So, basically this is an input sanitation attack, but performed against a component that is used to deploy infrastructure. The article is a bit vague, but I believe what they are doing is exploiting a YAML property that allows you to put multiple YAML documents into one file, with a delimiter. Once the delimiter is hit, the payload is the deployment of another container which does what the attacker wants. It's a novel attack, and it points to the fact that you have to make sure the API components and extensions are written carefully and well validated.
BottomLine: Novel attack on a custom Kubernetes controller which allows an attacker to run their choice of container
==
URL reference: https://itnext.io/kubernetes-silent-pod-killer-104e7c8054d9
DateReviewed: 2024-02-15
Description: Are Kubernetes processes weirdly disappearing on you -- this is the premise of this piece, focused on OOMKiller. For those who don't know, this is caused by a K8s container running out of memory coupled with the fact pods generally run swapless and thus limited to the memory allocated. The article says you can see this in either an event or the pod-related YAML, but otherwise it isn't easy to notice. Ah, while the article doesn't say earlier, the issue here is that a _subprocess_ is getting killed which causes issues that are hard to see. So in K8s v1.28 on, there is a setting which you can set to kill the entire process tree if a single process is a candidate for an OOM kill. Unfortunately, the setting isn't configurable currently, so all 1.28 clusters will get this new beahviour. Finally they do talk about ways to detect OOMKill events pre 1.28, so you can be more aware of them.
BottomLine: Good walkthrough of strange issues that can be caused by OOMKill on Kubernetes
==
