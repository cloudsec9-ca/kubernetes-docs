
URL reference: https://medium.com/@perfectscale/kubernetes-node-huge-nodes-vs-small-nodes-95f4ad0600e0
DateReviewed: 2025-02-01
Description: This article tackles an interesting Cloud question - what is the best node size, small or large, for your clusters? We dive right in, and they go through some background around nodes - what they are, components, ways to identify them (labels and annotations). Then we get to the meat, node allocation and capacity, where it takes about CPU numbers, how much memory and how many pods it might support. They also cover condition status and info, which allow us to dig into metrics around a node. They talk a bit about large nodes (32CPU 128GB memory) and small nodes (2CPU 2GB memory) with some other examples. The note small nodes are cheaper, but you'll need more of them. We then dig into analysis, looking at cost efficiency, simplified management, lower API server load, improved resource utilization - all favoring large nodes. In contrast, huge nodes have downsides, like risk of outages elevated, more downtime for upgrades, resource wastage for small workloads. Then then pivot to small nodes, nothing they are flexible, resilient and efficient in allocation for various workloads. Downsides here include more nodes to manage, more network overhead, and idle resource waste. Each of these points comes with a para of discussion to flesh things out. They then have pointers for choosing which size of node and when. Lastly, they pitch their product - PerfectScale, which helps to choose an optimal node size.
BottomLine: Great discussion of Kubernetes node sizes in the cloud and how to choose
==
URL reference: https://thenewstack.io/build-an-open-source-kubernetes-gitops-platform-part-1/
DateReviewed: 2025-02-02
Description: We're going to explore using Open source to build a Kubernetes GitOps platform in this article. We start off by talking about tools to help you with your K8s cluster, and they note there are lots of them, and I think they are going to help us navigate them here. First, we have to choose a cloud, and they frame the choice as between hyperscalers and simpler IaC offerings. They do mention that many tools are cloud agnostic, and name drop Argo, cert-manager and a few others. They do mention both hybrid or multicloud, and caution that tech like ingress and secret managers can create a challenge in these instances. Next, they say to pick a Git provider, and talk about the two biggest players - GitHub and GitLab. Third up is Platfrom domain and DNS, which they mention Cloudflare for. Fourth up is defining your IaC, and they mention DataDog and Terraform, but talk about a few others. Step 5 is picking your GitOps engine, and mention Argo CD and Flux CD as options. Finally the last step is to define your mgmt pillars, and they describe the loadout they use. They have a follow on post to continue the journey.
BottomLine: Great discussion of options around building a GitOps pipeline on Kubernetes
==
