
URL reference: https://medium.com/@perfectscale/kubernetes-node-huge-nodes-vs-small-nodes-95f4ad0600e0
DateReviewed: 2025-02-01
Description: This article tackles an interesting Cloud question - what is the best node size, small or large, for your clusters? We dive right in, and they go through some background around nodes - what they are, components, ways to identify them (labels and annotations). Then we get to the meat, node allocation and capacity, where it takes about CPU numbers, how much memory and how many pods it might support. They also cover condition status and info, which allow us to dig into metrics around a node. They talk a bit about large nodes (32CPU 128GB memory) and small nodes (2CPU 2GB memory) with some other examples. The note small nodes are cheaper, but you'll need more of them. We then dig into analysis, looking at cost efficiency, simplified management, lower API server load, improved resource utilization - all favoring large nodes. In contrast, huge nodes have downsides, like risk of outages elevated, more downtime for upgrades, resource wastage for small workloads. Then then pivot to small nodes, nothing they are flexible, resilient and efficient in allocation for various workloads. Downsides here include more nodes to manage, more network overhead, and idle resource waste. Each of these points comes with a para of discussion to flesh things out. They then have pointers for choosing which size of node and when. Lastly, they pitch their product - PerfectScale, which helps to choose an optimal node size.
BottomLine: Great discussion of Kubernetes node sizes in the cloud and how to choose
==
URL reference: https://thenewstack.io/build-an-open-source-kubernetes-gitops-platform-part-1/
DateReviewed: 2025-02-02
Description: We're going to explore using Open source to build a Kubernetes GitOps platform in this article. We start off by talking about tools to help you with your K8s cluster, and they note there are lots of them, and I think they are going to help us navigate them here. First, we have to choose a cloud, and they frame the choice as between hyperscalers and simpler IaC offerings. They do mention that many tools are cloud agnostic, and name drop Argo, cert-manager and a few others. They do mention both hybrid or multicloud, and caution that tech like ingress and secret managers can create a challenge in these instances. Next, they say to pick a Git provider, and talk about the two biggest players - GitHub and GitLab. Third up is Platfrom domain and DNS, which they mention Cloudflare for. Fourth up is defining your IaC, and they mention DataDog and Terraform, but talk about a few others. Step 5 is picking your GitOps engine, and mention Argo CD and Flux CD as options. Finally the last step is to define your mgmt pillars, and they describe the loadout they use. They have a follow on post to continue the journey.
BottomLine: Great discussion of options around building a GitOps pipeline on Kubernetes
==
URL reference: https://blog.devops.dev/the-ultimate-guide-to-ephemeral-volumes-in-kubernetes-8983f0395009
DateReviewed: 2025-02-03
Description: While this article is about ephemeral volumes, it surprised me for both the length and depth, in a good way. They have a tiny intro and an AI slop picture, where all of the bits - Kuberntes, pods, storage and volumes are depicted by cabinets? Anyways, we then jump into what are ephemeral vols, which are storage areas tied directly to a pod being alive -- once the pod is destroyed, all of the ephemeral vols are too. They give some characteristics, and then contrast it with persistent volumes, which are long-lived storage areas that persist between pod starts. There are a few types we go through, including emptyDir, configMap, secret and downwardAPI, with explainations of each. We then do an overview of the process of building and using an ephemeral volume, and continue into a bit of hands on, where we are shown the building of a YAML file that has a volume in it, with explaination. We then move on to the mounting process, where an ephemeral volume is mounted into a pod for use, with YAML and explaination. They then go through a bunch of the ephemeral types, use cases, and even a step by step process to do it as a walkthrough. Excellent article.
BottomLine: Excellent explaination of Ephemeral volumes on Kubernetes with a full walkthrough
==
URL reference: https://www.solo.io/blog/ambient-mesh-mtls-for-all-traffic-even-within-the-same-node
DateReviewed: 2025-02-04
Description: So this article we'll tackle Ambient mesh, which is a mTLS provider. Our first bit of intro lets us know this is a sidecar-less approach, and informs us that even intra-node comms are encrypted, meaning two containers running on the same pod still have encryption between them. We then dig into ztunnel a bit, which is how this all works - ztunnel grabs, encrypts and forwards the traffic, and then does the revese at the destination. They further explain that this lives inside the CNI, which is what makes it transparent. By default it catches all traffic, but you can add policies to change what gets encrypted or not, and with what identities. They include a diagram and a link to a vid talk that goes through it.
BottomLine: Good article talking about using mesh to encrypt all Kubernetes traffic
==
URL reference: https://stripe.com/blog/how-stripes-document-databases-supported-99.999-uptime-with-zero-downtime-data-migrations
DateReviewed: 2025-02-05
Description: This article is about a five-nines uptime that Stripe strives for. They are using something they call DocDB on top of MongoDB, which is an enterprise level extension to help with uptime. They talk a bit about approaches, then settle into their arch - their API, backed by DB proxies, writing to specific shards and maintaining consistency with a metadata service and a change data capture pipeline. They walk through their 5 steps and a couple more diagrams, but it's actually hard for me to understand their approach clearly. They use NoSQL, which maybe makes sense as they are facilitating by not the end point of transactions, but it seems like they do LOTS of work to do the things you get for free with a good SQL DB?
BottomLine: Interesting read of how Stripe manages to get amazing uptime
==
