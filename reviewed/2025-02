
URL reference: https://medium.com/@perfectscale/kubernetes-node-huge-nodes-vs-small-nodes-95f4ad0600e0
DateReviewed: 2025-02-01
Description: This article tackles an interesting Cloud question - what is the best node size, small or large, for your clusters? We dive right in, and they go through some background around nodes - what they are, components, ways to identify them (labels and annotations). Then we get to the meat, node allocation and capacity, where it takes about CPU numbers, how much memory and how many pods it might support. They also cover condition status and info, which allow us to dig into metrics around a node. They talk a bit about large nodes (32CPU 128GB memory) and small nodes (2CPU 2GB memory) with some other examples. The note small nodes are cheaper, but you'll need more of them. We then dig into analysis, looking at cost efficiency, simplified management, lower API server load, improved resource utilization - all favoring large nodes. In contrast, huge nodes have downsides, like risk of outages elevated, more downtime for upgrades, resource wastage for small workloads. Then then pivot to small nodes, nothing they are flexible, resilient and efficient in allocation for various workloads. Downsides here include more nodes to manage, more network overhead, and idle resource waste. Each of these points comes with a para of discussion to flesh things out. They then have pointers for choosing which size of node and when. Lastly, they pitch their product - PerfectScale, which helps to choose an optimal node size.
BottomLine: Great discussion of Kubernetes node sizes in the cloud and how to choose
==
