URL reference: https://medium.com/spacelift/top-13-kubernetes-alternatives-for-containers-b46cb40727c9
DateReviewed: 2025-06-01
Description: Our article today goes into 13 Kubernetes alternatives you might consider using. Each alternative has specific use cases, and they as a group have a wide variety of interesting things they do. The format follows the same basics for each one - name of package, a small blurb, the website, key features and a when to use blurb. I'll list all the alternatives, which are each given the same treatment - OpenShift, Nomad, Mesos, Swarm, ECS, Tanzu, Netlify, Cloud run, Incus, CloudFoundry, Docker, Rancher and Azure Container instances (ACI). They range from single devel. focus to enterprise, from container runners to full general clusters. I think the idea is to see if your use case can be better served with a different approach, and there are a diversity of that here.
BottomLine: Great survey of alternatives to Kubernetes for deployments
==
URL reference: https://learn.microsoft.com/en-us/azure/defender-for-cloud/defender-for-containers-introduction
DateReviewed: 2025-06-02
Description: The article for today is an introduction to Defender for Containers written by Microsoft. It's a high level document, with an exec summary upfront and then a bit of a deeper dive further in. The four core areas it addresses are security posture management, vuln assessment, run time threat protection and Deployment and monitoring. Each gets a para upfront, then 3 to 4 paras in the deeper dive. For those on Azure, it might be a good option.
BottomLine: Intro to Defender for Containers by Microsoft
==
URL reference: https://www.portainer.io/solutions/enterprise
DateReviewed: 2025-06-03
Description: Today's article is a bit of a pitch, selling us on using Portainer as a service. The idea here is that you want to use containers, but you don't want to learn how to run or manage the container, but just focus on your own code. They cover all the important aspects, like security, scaling, and management. They provide tech experts to do the container management and grunt work. I'd say this is perfect for startups or dev-only teams looking to stay out of managing the orchestration of clusters. It does have a niche.
BottomLine: Good pitch on using Portainer to run managed containers
==
URL reference: https://towardsdatascience.com/kubernetes-understanding-and-utilizing-probes-effectively/
DateReviewed: 2025-06-04
Description: Our article today is a short one on using probes the right way. Starts with a bit of background about what probes are and do, then talks about each one - startup, liveness and readiness. Each section has a para on what role the probe has, a sample config, and key takeaways to optimize each. It has some tips at the end and wraps with other configs that might be interesting.
BottomLine: Good short intro to the various Kubernetes probes
==
URL reference: https://arxiv.org/abs/2504.11126
DateReviewed: 2025-06-05
Description: This is an abstract fronting a paper on security hardening of the Kubernetes attack surface through a tool called KubeFence. The thesis here is that even with RBAC, it is possible to have misconfigs and vulns. So they use KubeFence to do filtering of API requests in a more fine grained way. Seems like a promising approach.
BottomLine: Short intro to KubeFence - a Kubernetes tool to improve API security
==
URL reference: https://kubenomicon.com/Pentesting%20Kubernetes.html
DateReviewed: 2025-06-06
Description: Today we dive into the 4 layers of Kubernetes security in this article. We start with a quick intro, and then dive into the 4 layers - Code, Container, Cluster and Cloud. They talk briefly about three offensive tools, some helpful commands, and then do a brief stint on enumeration. It's mostly a primer for security people needing to bang on K8s clusters.
BottomLine: Decent quick intro to Kubernetes for security people
==
URL reference: https://istio.io/latest/blog/2025/ztunnel-security-assessment/
DateReviewed: 2025-06-07
Description: Our article today delves into an audit of the new mesh option in Istio called ztunnel. Written in Rust, it runs as a secure overlay in cooperation with the existing Envoy proxy. The audit result was good, with no vulns found and remarking that the code is already good. They did sugest some improvements, like beter dependency management and test coverage, as well as hardening HTTP header parsing.
BottomLine: Interesting look at the Security audit for ztunnel from Istio
==
URL reference: https://medium.com/h7w/scaling-your-kubernetes-deployments-vertically-a-cool-in-depth-guide-94fe834ea3d8
DateReviewed: 2025-06-08
Description: This article tackles scaling Kubernetes deployments vertically, or moving them to a bigger machine. After a bit of background, they git into the meat with why requests and limits matter, talking about the needs. They then talk a bit about some tools, paticularly Kubecost and OpenCost, and the pros/cons of each. They then look at Vertical Pod Autoscalar (VPA), walking through install, defining an object in it, viewing the recommendations from it. The then look at centralizing metrics and things like visualizing and alerting, before touching on automatic updates.
BottomLine: Good examination of limits and using recommendations on your Kubernetes cluster
==
URL reference: https://www.wiz.io/academy/kubernetes-rbac-best-practices
DateReviewed: 2025-06-09
Description: Okay, I'll admit this is more than I thought at first glance - the standard Kubernetes best practices for RBAC. I expected something short, and no, that isn't this. Starts with a point form "takeaways", then dives in with what is RBAC. Next is why it matters, before getting to setting up RBAC, a small tutorial. Not a bad walkthrough. Next we get into the best practices, and each one is named and gets a para; things like least priv and regular review of perms, with 7 covered. We then get 4 "bonus advanced" practices, pitfalls, and discussion of RBACs critical role, before some real world examples and a short product pitch.
BottomLine: Great discussion and setup walkthrough of Kubernetes RBAC
==
URL reference: https://www.refontelearning.com/blog/top-backend-skills-to-learn-in-2025
DateReviewed: 2025-06-10
Description: The article today is an exploration of skills to learn in 2025. We start with some background, basically talking about how tech is changing and we have to keep up, before getting into the topics. Each area gets 2 to 5 paras, and it's fairly well motivated. We start with Polyglot programming and Framework mastery, talking about using multiple langs and a variety of libs and frameworks. Next up is Cloud Native and serverless computing skills, followed by microservices arch and DevOps integration, next is Data mgmt and concludes with API evolution and Security first mindset and performance optimization. Actually well covered and talked through
BottomLine: Interesting list of skills to tackle for 2025
==
URL reference: https://www.portainer.io/blog/governance-and-policy-for-kubernetes-balancing-control-with-developer-freedom
DateReviewed: 2025-06-11
Description: This article dives into governance, and tries to explain the role it plays and why it's important. We start with a bit of background, including how traditional governance works, and how Kubernetes changes things. They argue that this has to be done early while building clusters, and not afterwards. The emphasis is on guardrails and not controls preventing things from happening. They argue that there is a balance to be struck. To wrap, they do a bit of talking about Internal developor platforms, and how they can help in this.
BottomLine: Good thinkpiece on Governance as applied to Kubernetes
==
URL reference: https://thenewstack.io/toolhive-simplifies-mcp-server-orchestration-with-kubernetes/
DateReviewed: 2025-06-12
Description: Today's article is on ToolHive, a tool to help manage MCP servers you may be running. We start with some background, talking about what MCP is and some of the challenges of working with it. They talk a bit about things like dependencies needed for MCPs, and issues with things like logins. The advice is to manage them uniformly. They argue that K8s is well suited to this job, using things like RBAC and other policies. ToolHive connects the strengths of K8s with the flexibility of MCPs. Using GO, it's been around for a bit, and it uses StatefulSets to manage the apps.
BottomLine: Good overview of ToolHive to manage MCP servers on Kubernetes
==
URL reference: https://sysdig.com/blog/sysdig-2025-cloud-native-security-and-usage-report/
DateReviewed: 2025-06-13
Description: Our article today talks about Kubernetes security, and argues that 2025 will be a breakthrough year. We start with some background, and then jump in. They let us know that AI adoption skyrocketed, and now it is more secure. More, as in a climb from 15 to 36% using, and less exposed to the Internet, down 38%. In acount access, good things too - especially in service accounts, where configs are better and IDs are being managed more securely. The also touch on defense pieces, saying these take time, and reiterating that secure clouds are a product of secure containers, their building blocks. 
BottomLine: Good coverage of a few Kubernetes security concerns for 2025
==
URL reference: https://benhouston3d.com/blog/why-i-left-kubernetes-for-google-cloud-run
DateReviewed: 2025-06-14
Description: This article will talk about NOT using Kubernetes. We start with background, notably starting a company that offered a 3D editor. They started on bare metal, making the switch to K8s after a couple years. They switched away due to 3 main factors - cost overruns, difficulty managing large jobs volumes, and complexity overhead. They explain each in decent detail. They then talk about what they switched to, a bit on thoughts about K8s, and then some other details. I like it as an honest reckoning on K8s.
BottomLine: Decent piece on why you might not want to run on Kubernetes
==
URL reference: https://krishnag.ceo/blog/owasp-kubernetes-top-ten-k10-outdated-and-vulnerable-kubernetes-components/
DateReviewed: 2025-06-15
Description: Our article today deals with one of the OWASP top 10 - outdated and vulnerable Kubernetes components. We start, as ususal, with a bit of background and stage setting, before diving in. They define what components are, and how they might be outdated. They then talk about the risks from running out of date stuff. We are then taken on a tour of TEN incidents, with an explaination of what happened, to whom, when, and the lessons to be learned. They use these to build a discussion, including why timely security is important and what the best practices are. Very well done piece.
BottomLine: Good explaination focued on securing outdated/vulnerable Kubernetes components
==
URL reference: https://krishnag.ceo/blog/owasp-kubernetes-top-ten-k09-misconfigured-cluster-components/
DateReviewed: 2025-06-16
Description: Today's article continues yesterdays OWASP theme, this time looking at Misconfigured cluster components. We start with background, and then they do a quick review of K8s cluster components. They then start to dig in on the security side, starting with Control plane components, and examining 5 of them. Each has a bit of an explaination, and then a security consideration. Next they look at Worker node components, examinng 3 of them. They then look at what they call additional components, which are used as resource or access managers; same idea applied here. We do a short best practices, and then dive into common Kubernetes misconfigs, and they go through 5 of them. They start with a short intro, explain the risks, give examples of misconfig, and show mitigation strategies. They then highlight 8 real-world incidents where misconfigs played a role, before addin more best practices and wrapping up.
BottomLine: Good discussion of misconfigured Kubernetes components
==
URL reference: https://www.infoq.com/news/2025/04/edera-protect-1-0/
DateReviewed: 2025-06-17
Description: This article announces a new product, Edera protect, to help enhance container isolation and security. It uses zones to create isolation between containers. It supports Amazon Linux 2023, warm zones and up to 250 zones per node. The announcement doesn't talk about how it is done, just what it supports.
BottomLine: Interesting isolation announcement without too many tech details
==
URL reference: https://tdoot.com/writing/understanding-k8s-deployments-replicasets-hpas/
DateReviewed: 2025-06-18
Description: Today's article talks about Kubernetes innards - using HPA, Deployments and ReplicaSets, and how they interact. We start with a story of an app failure due to scale problems -- the HPA it turns out didn't scale up. We jump into a section called Core control loops, where they (with a diagram!) explain a bit about what our three players above do, and how they do it. We then look at the metrics that are used to figure out what they should do - the status bits. They then explain how ReplicaSets and Deployments interact, and they show a bit of YAML and some CLI commands. They talk about what ReplicaSet management Deployments manage, and what you would have to do to manage it yourself. They talk a bit about tuning too. Now, back to our HPA issue -- first, they say - replicate it. Next is simulating some load. We then mix in our HPA and watch. They do point out that there are some things to know .. if your within 10% of a metric, nothing happens; if you have dead or unready nodes, they aren't factored in. So cutting down the readiness delay, or asking for the right ammount of ram is important. Some good advice and a great approach.
BottomLine: Good explaination of the interaction of HPA, Deployments and ReplicaSets to tune your Kubernetes rollouts
==
URL reference: https://www.microsoft.com/en-us/security/blog/2025/04/23/understanding-the-threat-landscape-for-kubernetes-and-containerized-assets/
DateReviewed: 2025-06-19
Description: This article is about the threat landscape for Kubernetes and containerized assets. We start with a bit of background, before diving into the main stuff - threats in Kubernetes environments. They classify 6 areas as follows - compromised accounts, vuln or misconfiged images, env misconfigs, app-level attacks, node-level attacks and unauthed traffic. They discuss each for a para, and then include a diagram. Next, we jump into a case study. After that, we have a long list of recommendations, some in a 20-point list, of things to do. This might all be great, but it's difficult to read and process, and that makes it hard to work with.
BottomLine: Good intention and start but weaker finish for Kubernetes threat landscape
==
URL reference: https://www.breachlock.com/resources/blog/kubernetes-security-best-practices-protecting-your-cluster-from-code-to-runtime/
DateReviewed: 2025-06-20
Description: Our article today will be looking and Kubernetes security best practices, with a focus on runtime code. We start with background and then go through a couple paras of what is K8s, so we start from first principles. Then we go on to talk about built-in K8s security bits, before hitting the challenges. Oddly the issues are numbered starting at 4, but they do go through 5 threat vectors, each with a bit of explaination. Their points are all decent, and then we go through a section on Vulns and threats, which talk about things like API exposures and supply chain attacks. We do a quick dive into AI benefits and challenges around K8s, then they have 6 recommendations on improving K8s security. It feels a bit stitched, but does cover some decent points.
BottomLine: Okay coverage of a number of security best practices around Kubernetes
==
URL reference: https://www.clouddatainsights.com/genai-for-kubernetes-breakthrough-or-breakdown/
DateReviewed: 2025-06-21
Description: The article today is a question on whether AI is good or a challenge for Kubernetes. We do a short bit of background and jump into a section called  Hallucinations waste valuable time and resources; obviously bad. Next they talk about a generic LLM w/o K8s context - and then the explain what the mean, namely that without K8s training, the AI is likely to give wrong or misleading suggestions. Next is training issues - garbage in, garbage out, or if your training data is nonsensical how can you expect your output to make sense? Next up is the important problem of where is your data going - or when you use a model or LLM, is your data going someplace you don't intend? Who can use your training data, and what access do they get? There are two other sections to finish up - uncovering cascading errors and integration with K8s and CI/CD pipelines.
BottomLine: Interesting discussion of how to use AI with Kubernetes
==
URL reference: https://thenewstack.io/7-major-gaps-in-todays-gitops-tools/
DateReviewed: 2025-06-22
Description: Our article today will look at 7 gaps that exist today in GitOps tools. We start with a bit of an intro and background, before talking about a couple popular tools, Flux and ArgoCD. Then they surface the gaps, as they see them - multicluster management, policy based deployments missing, no native SLO based rollbacks, lack of GitOps promo capabilities to round things out. Each treatment gets a solid para explaining what it is and what is needed. Going through what is needed, we get the ad for the writer's tool - Devtron - in the last para.
BottomLine: Good overview of gaps in the GitOps ecosystem
==
URL reference: https://thenewstack.io/kelsey-hightower-on-nix-vs-docker-is-there-a-different-way/
DateReviewed: 2025-06-23
Description: This article is a take on Nix vs Docker, with the well known Kelsey Hightower chiming in. We start with a bit of background, where we learn how Kelsey started with Nix and what he thought at first glance. One influence was having more time; the other was being able to build repeatable software. He points out that at the end of a Docker build, you have this monster that you then have to ship to servers. We get to a section named Making problems better, which is a key promise. He contrasts the fact that Nix is "better" with the fact that more "know" Docker -- and shipping is important. Kelsey suggests you can even use Nix inside your Docker file for things like repeatable builds. They talk a bit about ecosystems, and wax about looking backwards and forwards. Great discussion.
BottomLine: A chat with Kelsey Hightower contrasting Docker with Nix
==
URL reference: https://medium.tuanh.net/master-kubernetes-services-a-complete-guide-with-examples-9a6fdcfd97a7
DateReviewed: 2025-06-24
Description: Our article today is a skim through the range of Kubernetes services. There are some diagrams, a smattering of YAML snips and a lot of text to put things in perspective. We dive right in with K8s services, how they work and why we need them. They have extended discussions around clusterIP, nodePort and loadBalancers, so you what they do and which one you might want to use. They talk quickly about externalDNS, and do a toe dip into service mesh. A good all around exploration.
BottomLine: Good intro to Kubernetes services for all levels
==
URL reference: https://www.youtube.com/watch?v=u5mM7O-iAIM
DateReviewed: 2025-06-25
Description: Today's entry is a vid short that talks about Kubestronauts, who have completed all the current Kubernetes certs.
BottomLine: Quick point about what it is and why you might want it
==
URL reference: https://dev.to/olalekan_oladiran_d74b7a6/end-to-end-devops-running-a-net-app-in-kubernetes-with-docker-acr-and-aks-32jj
DateReviewed: 2025-06-26
Description: For today's entry, we're going to do an old-fashioned tutorial. Let's hang on for the ride! Our intro here is a para, which talks about the platform (dotnet) but not much about what the app we're deploying does. We jump over to the requirements list, and then we're creating infrastructure. Or, at least, we're checking out a repo. We then test the app (?!) is running, which they mean the platform is properly installed; and if not, they show how to resolve that. We now do a build in the editor of the checked-out repo, and when it completes we then run it on dotnet. We follow the URL emitted in our browser. They edit a JSON file to update a setting and reload, to ensure things are working. They then build a dockerfile and containerize the app. They then run this on Kubernetes and Azure. My take is this is a good starting point, but it would be helpful to users if they explained what they were doing and why, and where choices and edits can be made, instead of having lots of screenshots. 
BottomLine: Decent quick walkthrough to getting a dotnet Azure container put together.
==
URL reference: https://github.com/k8snetworkplumbingwg/multus-cni
DateReviewed: 2025-06-27
Description: This repo is for multi-homing pods in a Kubernetes cluster, with a tool called Multus CNI. The way it works is that Multus is a meta-plugin, calling other CNIs to get them to do the grunt work. They explain that the newest release enables something called a thick plugin, which allows for things like metric collection; the older arch is now named thing, and it doesn't collect metrics and the like. The thick consumes more resources for it's extra features. 
BottomLine: Repo for a CNI that allows a pod in Kubernetes to have multiple network interfaces
==
URL reference: https://github.com/jumpserver/jumpserver
DateReviewed: 2025-06-28
Description: The repo we're looking at is called Jumpserver, and it's an auth solution to allow all of your roles access to various resources on your cluster. They have some diagrams and a short quick start video guide to get started. The goal here is to centrally manage access to RDP, SSH, K8s and DB points among others. A cool idea!
BottomLine: A package to do auth management for Kubernetes clusters for end users
==
URL reference: https://www.wiz.io/academy/kubernetes-bill-of-materials-kbom
DateReviewed: 2025-06-29
Description: Our article today is going to tackle Kubernetes bill of materials. Like a physical bill, this tells us about our K8s deployment. Here, we dive right in with a short key takeaways section before dropping into the main section. There we contrast what KBOMs are comparted to SBOMs. All BOMs use YAML to capture the definitions, but differ on what they capture. We put three different ones together, to get a sense of what is in each. They pull out the visibility and security benefits, and go through some best practices and tips. Oveall a decent piece.
BottomLine: Tackles Kubernetes bill of materials in a decent way
==
URL reference: https://itnext.io/kubernetes-1-33-resizing-pods-without-the-drama-finally-88e4791be8d1
DateReviewed: 2025-06-30
Description: This article is about Kubernetes updates, and in paticular one around the resizing of pods that was a sticking point for some time. This allows you to adjust the CPU and memory of a Pod without resorting to restarting the pod, allowing you to do so without disrupting a live site. What this does is allow you to be less aggressive in config, allowing a lower setting and then in-place bumping of CPU limits or memory if you run low. After lauding the ability, they do go through a few real-world scenarios where it works. They also note that things like Java apps MAY need a restart to benefit, so it's not always a seemless transition. They even do a deep dive to explain how things happen under the covers. Then, to fill in the blanks, they also do a walkthrough to show it working. They explain the current state of cloud provider rollout, and what still could be a challenge related to this. To finish up, they talk about future improvements.
BottomLine: Good walkthrough of new resizing feature in Kubernetes
==
