
URL reference: https://www.nivelepsilon.com/2024/06/12/understanding-kubernetes-garbage-collection/
DateReviewed: 2025-07-01
Description: This article is going to dive into the way Kubernetes does garbage collection. We do a bit of background and introduce what GC is -- finding and cleaning up resources that are no longer needed, like completed jobs or old pods. They then lay out some concepts and explain why we need it, referencing resource management, cost efficiency, better performance and simplified ops. They explain how to set it up, with a YAML snippet, where they reference things like interval to check and max age before deletion. They then show setting up a TTL, and specifying how to limit historical replicas with another YAML snip. They then go through the pros and cons of GC.
BottomLine: Good treatment of Garbage collection for Kubernetes
==
URL reference: https://cloudnativenow.com/topics/cloudnativedevelopment/kubernetes/security-in-kubernetes-your-stack-is-lying-to-you/
DateReviewed: 2025-07-02
Description: The thesis of this article is that you can't do traditional security with Kubenetes, and that is true. Old school notions like boundries and inside/outside are now in the past, and we have to pivot to new tech to cover things well. They outline this, and explain that K8s has a volatile nature, where pods spin up and down quickly. They then pivot to what to do -- Cloud native friendly approaches, like container-aware security tools, zero-trust arch, policy as code, runtime protections, using CI/CD and finally observability. Good piece.
BottomLine: Highlight approach changes needed in security for Kubernetes
==
URL reference: https://mogenius.com/blog-posts/securing-applications-using-keycloaks-helm-chart
DateReviewed: 2025-07-03
Description: Our article today is partially a tutorial and a bit of a walkthrough of an open source tool called Keycloak, that does SSO, user federation and strong auth. We start with a bit of background on why Helm should be the way to deploy it an the benefits of doing so. We then go through the prereqs, to get ready for the tutorial. Next we start the process, adding the Helm repo we need to geth the package, then take a look at the YAML config needed. They then break down the config, explaining which parts do what. We now install the package with a CLI command, and then use a kubectl command to verify it is up and running. They show us how to grab the URL needed to access Keycloak from the CLI. They further show another command to grab the login password. They go through the things we need to set up; enabling SSL, adding a strong passwork policy, and locking out tafter too many failed attempts. We finish up with creating realms with Helm and user management basics. A good intro to the package.
BottomLine: Tutorial on Keycloak, a user management package for Kubernetes
==
URL reference: https://kodekloud.com/blog/kubernetes-1-33-top-5-features-of-octarine/
DateReviewed: 2025-07-04
Description: We're going to be shown what the different stuff is in the latest version of Kubernetes, namely v1.33. We start with a bit of background on the name (Octarine) and the basic stats (62 features) of what types of things were included. The focus on what the thing are the biggest features, with a what it is, what's new, how to use it and why it matters for each feature., with a what it is, what's new, how to use it and why it matters for each feature. They cover sidecar containers, in-place vertical pod scaling, OCI artifact and image volumes, Namespaces for pods, and kubectl .kuberc configuration. Well covered highlights.
BottomLine: Good discussion about biggest features of new Kubernetes v1.33 release
==
URL reference: https://www.red-gate.com/simple-talk/devops/securing-the-devops-pipeline-part-2-hardening-kubernetes-and-cloud-security/
DateReviewed: 2025-07-05
Description: This article is about hardening Kubernetes and cloud security in general, from a perspective of DevOps. We start with a bit of background, and as this is the second part of a series, a quick recap is given from part 1. We dive in with an anecdote about unneeded root privs, which allowed an attacker to escalate and compromise the host system. They cover 4 main strategies for hardening K8s. One thing I like is they include YAML snips as they work through stuff, so you can know how to do things. The first strategy is restricting Pod to Pod traffic; in this case, only letting traffic through to backends from the frontend. Next they show an example of PSP, and after that an RBAC example. They show how to deploy security monitoring tools, and also set up K8s audit logging. They also cover shift-left and IaC, both also important items. 
BottomLine: Good piece about Kubernetes security with a bit of hands-on YAML to show implementation ideas
==
