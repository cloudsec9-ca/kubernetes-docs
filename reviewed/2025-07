
URL reference: https://www.nivelepsilon.com/2024/06/12/understanding-kubernetes-garbage-collection/
DateReviewed: 2025-07-01
Description: This article is going to dive into the way Kubernetes does garbage collection. We do a bit of background and introduce what GC is -- finding and cleaning up resources that are no longer needed, like completed jobs or old pods. They then lay out some concepts and explain why we need it, referencing resource management, cost efficiency, better performance and simplified ops. They explain how to set it up, with a YAML snippet, where they reference things like interval to check and max age before deletion. They then show setting up a TTL, and specifying how to limit historical replicas with another YAML snip. They then go through the pros and cons of GC.
BottomLine: Good treatment of Garbage collection for Kubernetes
==
URL reference: https://cloudnativenow.com/topics/cloudnativedevelopment/kubernetes/security-in-kubernetes-your-stack-is-lying-to-you/
DateReviewed: 2025-07-02
Description: The thesis of this article is that you can't do traditional security with Kubenetes, and that is true. Old school notions like boundries and inside/outside are now in the past, and we have to pivot to new tech to cover things well. They outline this, and explain that K8s has a volatile nature, where pods spin up and down quickly. They then pivot to what to do -- Cloud native friendly approaches, like container-aware security tools, zero-trust arch, policy as code, runtime protections, using CI/CD and finally observability. Good piece.
BottomLine: Highlight approach changes needed in security for Kubernetes
==
URL reference: https://mogenius.com/blog-posts/securing-applications-using-keycloaks-helm-chart
DateReviewed: 2025-07-03
Description: Our article today is partially a tutorial and a bit of a walkthrough of an open source tool called Keycloak, that does SSO, user federation and strong auth. We start with a bit of background on why Helm should be the way to deploy it an the benefits of doing so. We then go through the prereqs, to get ready for the tutorial. Next we start the process, adding the Helm repo we need to geth the package, then take a look at the YAML config needed. They then break down the config, explaining which parts do what. We now install the package with a CLI command, and then use a kubectl command to verify it is up and running. They show us how to grab the URL needed to access Keycloak from the CLI. They further show another command to grab the login password. They go through the things we need to set up; enabling SSL, adding a strong passwork policy, and locking out tafter too many failed attempts. We finish up with creating realms with Helm and user management basics. A good intro to the package.
BottomLine: Tutorial on Keycloak, a user management package for Kubernetes
==
URL reference: https://kodekloud.com/blog/kubernetes-1-33-top-5-features-of-octarine/
DateReviewed: 2025-07-04
Description: We're going to be shown what the different stuff is in the latest version of Kubernetes, namely v1.33. We start with a bit of background on the name (Octarine) and the basic stats (62 features) of what types of things were included. The focus on what the thing are the biggest features, with a what it is, what's new, how to use it and why it matters for each feature., with a what it is, what's new, how to use it and why it matters for each feature. They cover sidecar containers, in-place vertical pod scaling, OCI artifact and image volumes, Namespaces for pods, and kubectl .kuberc configuration. Well covered highlights.
BottomLine: Good discussion about biggest features of new Kubernetes v1.33 release
==
URL reference: https://www.red-gate.com/simple-talk/devops/securing-the-devops-pipeline-part-2-hardening-kubernetes-and-cloud-security/
DateReviewed: 2025-07-05
Description: This article is about hardening Kubernetes and cloud security in general, from a perspective of DevOps. We start with a bit of background, and as this is the second part of a series, a quick recap is given from part 1. We dive in with an anecdote about unneeded root privs, which allowed an attacker to escalate and compromise the host system. They cover 4 main strategies for hardening K8s. One thing I like is they include YAML snips as they work through stuff, so you can know how to do things. The first strategy is restricting Pod to Pod traffic; in this case, only letting traffic through to backends from the frontend. Next they show an example of PSP, and after that an RBAC example. They show how to deploy security monitoring tools, and also set up K8s audit logging. They also cover shift-left and IaC, both also important items. 
BottomLine: Good piece about Kubernetes security with a bit of hands-on YAML to show implementation ideas
==
URL reference: https://cloudbelievers.blogspot.com/p/which-cloud-security-tool-actually.html
DateReviewed: 2025-07-06
Description: Our author here was lamenting about how you actual secure a Kubernetes deployment, and tried to figure out what might help. So we start with a bit of personal background, and then zip into the fact that Kubernetes security isn't plug and play, with lots of defaults set on "easy but insecure". So he focuses on tools that are K8s friendly by default. He goes through them, detailing what he liked and what could be better. He looked at Sysdig secure, Palo Alto Prisma Cloud, and Aqua Security. He gives a list of things that are nice to haves, even. He also thinks security doesn't have to slow you down, if done right.
BottomLine: Good discussion of a few secuirty tools that are Kubernetes friendly
==
URL reference: https://blog.kubewise.io/strengthening-kubernetes-security-addressing-key-cloud-risks-in-2025-8ee0c0cda0f9
DateReviewed: 2025-07-07
Description: Our article today talks about working on Key cloud risks in 2025 related to Kubernetes. We start with an intro, where they point out that 25% of K8s CVEs see some traction in the wild before they are found by sec researchers. We dive into the meat with a key revelation - many vulns are known, but operators aren't patching/remidating quickly enough. They also point out a key culprit is misconfigured configs, which can be actioned if understood. We are also told that many approaches to fixes are traditional and slow. We now pivot to action, and they recommend things like vuln scanning, using good RBAC, and things like Network policies. Wrapping all of this is automation, to allow things to proceed quickly. Some good thoughts and recommendations here.
BottomLine: Good advocacty for a paradigm shift in security approach for Kubernetes
==
URL reference: https://dev.to/cyclops-ui/mcp-servers-for-agentic-dev-platforms-3ja9
DateReviewed: 2025-07-08
Description: Today we're going to look at MCP servers, and specifically ones for the Agentic Dev platform. They first talk a bit about MCP or Model Context Protocol, the way that AI systems can access platforms through an API. They go through a bit of background, but the gist is you need an MCP as an adapter to talk to the end point on your behalf. They recommend a single MCP service that all devs can tap into, simplifying things a bit. We then dive in and look at how MCP servers work - broadly two streams -- stdin and SSE. Stdin servers are simple, taking requests on standard input and returning output on standard out while running a binary. SSE (server sent events) talk via HTTP. Agents subscribe to a server where they can get responses, and then request via POST. While a bit more work, it can be exposed over the network, allowing non-local requests to the MCP server. Now we get into MCP arch, with a diagram. The idea is that you have a container with the MCP server which can take requests on a services behalf. Next up, they do a runthrough of setting up an MCP server, with Redis as the target. They are using their own deployment tool (plug), but the config stuff will be similar. Once up, you can now ask Cursor (AI) questions against your Redis server. They do show you can use other services, like Wikipedia or Grafana for the target.
BottomLine: Interesting discussion about using MCP servers with Kubernetes and a hands-on with a Redis MCP
==
URL reference: https://medium.com/@sruthianem89/how-i-built-a-simple-kubernetes-operator-for-cluster-health-checks-590db10d49a4
DateReviewed: 2025-07-09
Description: This article will talk a bit about setting up an operator to do cluster health checks. We jump right in, with kopf being the health checking piece, and using a CRD to do the health piece on the K8s side. We get a why K8s operators next, which explains why they use an operator with a CRD to do this. The focus of this project is ClusterHealthCheck, the piece that will do the actual checking. Now we're on to the walkthrough, and the first part is the YAML that configs the actual CRD. That done, they work on the Operator code, in this case a stub in Python that simply prints out the check passes. They then deploy the CRD, install kopf and run the operator, and finally configure a resource to do the checking in YAML, and run the check. They verify it is working, checking before and after status.
BottomLine: Good walkthrough and explaination of Operator based CRD health checks on Kubernetes
==
URL reference: https://blog.devsecopsguides.com/p/attacking-cicd
DateReviewed: 2025-07-10
Description: Our article is a compendium of info on CI/CD related attacks from a security perspective. We start with a bit of an overview, where they do a high-level explaination of about 8 attack categories, which gives us context. They then work through a myriad of hands-on bits, explaining what the issue is, what the implications are, and how to mitigate or remediate the security flaw(s). They even have an example in an RCE through a simple Git clone operation.
BottomLine: Great piece showing areas that can be weak in a security sense that involve the development process of CI/CD
==
URL reference: https://info.nirmata.com/hubfs/2024/nirmata_gitops_whitepaper_v2.pdf
DateReviewed: 2025-07-11
Description: This article is actually a Nirmata whitepaper about GitOps. It starts with a diagram, so starting strong. They talk about the practice of GitOps, and some of the risks out of the box. Everything is about config, so configuration management is key - they talk about version control, automatic deployments, compliance, security - among other things. The platform they say can handle this is Nirmata, and they go through a laundry list of things it does, including the Dashboard, the CLI and pipeline scans. Everything is controlled with Policies, and they describe all of the ways you can put things together. While the piece is compact, it's pretty info dense, and it's aimed at a broader crowd, while still talking a lot about how things work. They finish with an outline of how to get things running, along with more reading and next steps. Well done.
BottomLine: Good whitepaper going through how Nirmata approaches GitOps and security in Kubernetes
==
URL reference: https://medium.com/kernel-space/allowprivilegeescalation-false-the-kubernetes-security-flag-with-a-hidden-catch-e81292a0f43c
DateReviewed: 2025-07-12
Description: Our article today seeks to figure out what an important security flag - allowPrivilegeEscalation - does and does not do. They claim that it doesn't do what people think - so let's dive in. They say that people believe that it stops any form of priv escalation in a pod - that this control disables any of that. What the docs say is that it prevents a child pod from gaining more privs than it's parent process. What actually happens, it turns out, is that this flag sets the "no_new_privs" flag in Linux, which actually prevents things like SUID bins from working, file capabilities from taking effect among other things. It doesn't stop kernel vulns, existing capabilities or privs granted at container start. They point out while the docs claim it prevents CAP_SYS_ADMIN, you can actually get that with the right config combo, which they show a YAML example of. They also point out that while it blocks the above, it misses "SYS_ADMIN", which does the same thing. They then give some good suggestions on securing pods, like using an admission controller and dropping unneeded caps by default, among others. Great discussion.
BottomLine: Insightful piece explaining what a key Kubernetes flag does and doesn't do for security
==
URL reference: https://www.linkedin.com/pulse/reduce-image-footprint-must-know-cks-exam-puru-tuladhar-oaewf
DateReviewed: 2025-07-13
Description: This article is an exam-prep piece, but it also is a good way to contain the size of your containers in general. We start with a bit of author background, then a bit about exams and where this article fits into the exams. Then, we dive in, talking about the base image and the footprint, and they define each term; basically the base image is the distro your container rides on, and the footprint takes into account all of the layers that make up the Docker image. They talk about why we want to have a slim image, including security, reduced resources and faster builds. As a hands on, they lean on iximiuz labs for the infra and Killer Coda to get image sizes. They then build a simple image, with a static app based on Ubuntu. They show it's 645MB, since it includes all of Ubuntu. They sub in Alpine to compare and rebuild, and we're down to 293MB. But they point out our app is only 2.2M? They point out we need build tools, which we're shipping in the image -- so they explain how multi-stage builds work, where the tools are only there for the build step, and then we slim down to package our image. We rebuild, and our image ends up as 10MB. Good process.
BottomLine: Shows how to save space in your distributed container image
==
URL reference: https://dev.to/kartikdudeja21/devops-sandbox-build-your-own-kubernetes-lab-with-vagrant-ansible-3imi
DateReviewed: 2025-07-14
Description: Our article today is about setting up a Kubernetes local lab. We start with background, and the explain that we'll be using Vagrant to spin up virtual machines and Ansible to configure them. We start with a diagram which I always like, and then get into it. They outline the layout we'll be aiming for - 1 master and 2 workers, and then they detail things like what OS and how many CPUs and how much RAM each will get. They also show us the directory outline they are using. The first step is the Vagrant file, which they give us and do a short highlight of, pointing out the private IPs, and that they install Ansible and Helm. Step 2 is the Ansible YAML config, to prep all the nodes to run K8s. They then explain the Master initialization YAML, and finally explains how the worker nodes join the cluster. The inventory file is how Ansible figures out which hosts are which, and is the final config piece. Now they do a walkthrough of what to do - first clone the repo, then "vagrant up" to spin up the VMs and start the Ansible playbooks we looked at above. Finally we log in and check that the nodes are all there. As a final step, we do a cleanup and blow away all of the resources at the vagrant level.
BottomLine: Good complete walkthrough to create a Kubernetes lab with Vagrant and Ansible
==
URL reference: https://freecomputerbooks.com/Docker-Succinctly.html
DateReviewed: 2025-07-15
Description: So, it turns out todays piece is an ad for a print book. It does go through the contents and give us a bit of a blurb, so let's dig in. It looks like their coverage is decent, starting with an intro to Docker, going through packaging, registries and Docker hub, then things like storage, clusters with Swarm, using it on Win and Linux, and using it in the cloud. Seems pretty solid.
BottomLine: Interesting promo for a book about Docker
==
