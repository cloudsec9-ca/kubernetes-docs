URL reference: https://medium.com/@bhuwanmishra_59371/how-to-manage-multiple-containers-in-a-single-kubernetes-pod-9f66cc1498f5
DateReviewed: 2025-04-01
Description: This article tackles the subject of running multiple containers in a single pod. We start with a bit one why - namely having closely-related containers run near each other - and a bit more motivation and background. They then run through what might cause us to need them to run near each other, and there are a few - tightly coupled apps, sidecar pattern, ambassador pattern and finally adapter pattern. They then go through the benefits - share resources, simplified management, better performance and easy comms. We then get into the nitty gritty of how, and as always it starts with YAML. They walk us through, with explaination, the needed snip of YAML. They then walk us through shared volumes, so that both containers can use the same file resources. We then get a section on best practices -- things like there should be a strong relation between the containers, and think about lifecycle, since they will both start and stop together. They even have a short section on when NOT to run containers together! Well done.
BottomLine: Excellent piece on how and when to run multiple containers on a single Kubernetes pod
==
URL reference: https://coinsbench.com/meet-kontract-simplifying-smart-contract-deployment-with-kubernetes-b539f9401e9a
DateReviewed: 2025-04-02
Description: Our article today looks into smart contract deployment, which interfaces with the Blockchain and generally cryptocurrency actions. We start with a bit of Web3 background, and a bit about how our topic tool Kontract functions. They tout a shared dev env, abstraction of blockchain responsibilities, multi-network simultaneous development and Kubernetes-native integrations as benefits. At a high level, it lets you build a standard, repeatable, and scalable to multiple developers approach to your blockchain bits. To finish up, they to a walk-through of a real-world scenario.
BottomLine: Great intro to using a smart contract authoring tool on Kubernetes
==
URL reference: https://cyberwarfare.live/never-let-your-kubelet-down/
DateReviewed: 2025-04-03
Description: As usual, we start with a bit of background - Kubernetes is very popular, but security isn't always peak. Then we do a quick basics, and they include an excellent diagram. They remark that RBAC is a good building block, but note that misconfigs can hurt this. To illustrate, they walk us through a sample misconfig and show us how to exploit it. They show us this all in Curl through the web interface, and show how we can run a command through this. But that is it - no remediation or advice on how to avoid.
BottomLine: Good quick walkthrough of a simple misconfig exploit on Kubernetes
==
URL reference: https://blog.stackademic.com/building-a-custom-kubernetes-scheduler-plugin-scheduling-based-on-pod-specific-node-affinity-7f66b6c607f9
DateReviewed: 2025-04-04
Description: Our article today will go beyond the default Kubernetes scheduler with its support for node affinity and will build a custom scheduler that allows more fine tuned placement. We start with an intro which gives some background. We then go through a primer of how K8s decides where it puts pods. There are three types of plugins - filter, score, and other - the filter figures out if a node is suitable for a pod; score ranks nodes that are eligible, another other actually handles stages of the scheduling. We then go through the prereqs to build the custom scheduler, which includes GO, K8s, Docker and the K8s CLI. They then do a step by step walk through of the process, defining the use case, implementing the plugin, integrating with the K8s scheduler, and running it. They then go through testing and validation. Very well done and clear.
BottomLine: Good clear walkthrough and motivation for a custom Kubernetes scheduler
==
