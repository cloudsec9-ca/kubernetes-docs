URL reference: https://medium.com/@bhuwanmishra_59371/how-to-manage-multiple-containers-in-a-single-kubernetes-pod-9f66cc1498f5
DateReviewed: 2025-04-01
Description: This article tackles the subject of running multiple containers in a single pod. We start with a bit one why - namely having closely-related containers run near each other - and a bit more motivation and background. They then run through what might cause us to need them to run near each other, and there are a few - tightly coupled apps, sidecar pattern, ambassador pattern and finally adapter pattern. They then go through the benefits - share resources, simplified management, better performance and easy comms. We then get into the nitty gritty of how, and as always it starts with YAML. They walk us through, with explaination, the needed snip of YAML. They then walk us through shared volumes, so that both containers can use the same file resources. We then get a section on best practices -- things like there should be a strong relation between the containers, and think about lifecycle, since they will both start and stop together. They even have a short section on when NOT to run containers together! Well done.
BottomLine: Excellent piece on how and when to run multiple containers on a single Kubernetes pod
==
URL reference: https://coinsbench.com/meet-kontract-simplifying-smart-contract-deployment-with-kubernetes-b539f9401e9a
DateReviewed: 2025-04-02
Description: Our article today looks into smart contract deployment, which interfaces with the Blockchain and generally cryptocurrency actions. We start with a bit of Web3 background, and a bit about how our topic tool Kontract functions. They tout a shared dev env, abstraction of blockchain responsibilities, multi-network simultaneous development and Kubernetes-native integrations as benefits. At a high level, it lets you build a standard, repeatable, and scalable to multiple developers approach to your blockchain bits. To finish up, they to a walk-through of a real-world scenario.
BottomLine: Great intro to using a smart contract authoring tool on Kubernetes
==
URL reference: https://cyberwarfare.live/never-let-your-kubelet-down/
DateReviewed: 2025-04-03
Description: As usual, we start with a bit of background - Kubernetes is very popular, but security isn't always peak. Then we do a quick basics, and they include an excellent diagram. They remark that RBAC is a good building block, but note that misconfigs can hurt this. To illustrate, they walk us through a sample misconfig and show us how to exploit it. They show us this all in Curl through the web interface, and show how we can run a command through this. But that is it - no remediation or advice on how to avoid.
BottomLine: Good quick walkthrough of a simple misconfig exploit on Kubernetes
==
URL reference: https://blog.stackademic.com/building-a-custom-kubernetes-scheduler-plugin-scheduling-based-on-pod-specific-node-affinity-7f66b6c607f9
DateReviewed: 2025-04-04
Description: Our article today will go beyond the default Kubernetes scheduler with its support for node affinity and will build a custom scheduler that allows more fine tuned placement. We start with an intro which gives some background. We then go through a primer of how K8s decides where it puts pods. There are three types of plugins - filter, score, and other - the filter figures out if a node is suitable for a pod; score ranks nodes that are eligible, another other actually handles stages of the scheduling. We then go through the prereqs to build the custom scheduler, which includes GO, K8s, Docker and the K8s CLI. They then do a step by step walk through of the process, defining the use case, implementing the plugin, integrating with the K8s scheduler, and running it. They then go through testing and validation. Very well done and clear.
BottomLine: Good clear walkthrough and motivation for a custom Kubernetes scheduler
==
URL reference: https://thekubeguy.com/audit-logs-in-kubernetes-26eec1267acb
DateReviewed: 2025-04-05
Description: Today's article will tackle the who did what in your cluster - Kubernetes audit logs. We start with what are audit logs, where they go over what info we want to collect, and they lay it out well in "4 Ws". They are what happened, who did it, when did it happen, and where was it done. They explain a short issue and how logs help. We then go through why they are improtant, and talk about security, troubleshooting, compliance and transparency. We then dig into how audit logging works in K8s. Everything stats with the API server, but then they take us through the pipeline, which includes RequestRecieved, ResponseStarted, ResponseComplete and Panic if something goes wrong. Next they walk us through the steps of configuring logs - first they need to be enabled in the API server, then configured with an Audit Policy. Finally they talk a bit about how to analyze audit logs, and use a specific snip to highlight how. To close, they leave us with some best practices for logging.
BottomLine: A good all around overview of Audit logging for Kubernetes
==
URL reference: https://portworx.com/blog/top-5-kubernetes-based-alternatives-to-vmware/
DateReviewed: 2025-04-06
Description: This article is going to tackle some alternatives to VMware that are Kubernetes based. We start with a bit of background on VMs in general and VMware in paticular, and they tell us that people are looking at how K8s can do some of these types of things. One way is akin to lift and shift using CDRs to run the VMs. There are a few of these points, each supported by a solid paragraph of info for each point. Next we look at K8s platforms - OpenShift, SUSE Harvester, Spectro Cloud, KubeVirt on DIY K8s and finally Platform9. They include a chart for comparison. They do talk about storage issues, paticularly for persistent and stateful workloads, and a bit about scalability. They do a side quest to explain how their product, Portworx, solves these issues. They do explain that Portworx runs with any of the various platforms they mentioned. To wrap up, they do a real-world walkthrough of a certain use case to demonstrate things. 
BottomLine: Solid explaination of Kubernetes platforms and storage options to replace VMware
==
URL reference: https://www.swift.org/blog/how-swifts-server-support-powers-things-cloud/
DateReviewed: 2025-04-07
Description: Our article today focuses on an app called Things and how it switched to Swift and Kubernetes. We start with a bit of background, and what Things is, namely a personal task manager. They use Things Cloud as they backend, to sync todos and whatnot between devices. The app has 12 yrs of longevity, but needed a refresh on the tech level. They tell us they were using Python 2 and Google App engine; but this had limitations and needed an upgrade. They thought about using Java, Python 3, GO and even C++, but settled on Swift. They had concerns about Swift's use as a server, but thought there was strong commitment from Apple and the community. The give us a diagram and an overview of how the bits fit together. They break things down into code, deployment, storage, other services, and monitoring. They then run through the results - the response time is faster and costs are cheaper than before, with a modern tooling to boot.
BottomLine: Good walkthrough of migrating from one system to a modern Cloud Native system
==
URL reference: https://www.cncf.io/blog/2025/02/25/announcing-the-kubernetes-shift-down-security-paper/
DateReviewed: 2025-04-08
Description: This article is a high level overview to a paper on Shift Down security. It links to the paper, and explains that it is trying to motivate adoption of things like Policy as Code to prevent misconfigs. They also include some quotes from key people, to explain and help promote the paper.
BottomLine: Short article announcing the Shift Down paper and Policy as Code effort for Kubernetes
==
URL reference: https://www.techworld-with-nana.com/post/the-ultimate-devops-roadmap
DateReviewed: 2025-04-09
Description: Our article of interest today is on the ultimate DevOps roadmap - and it promises to be good, as it is on Tech by Nana's site. We start with a bit of grounding - there are lots of tools, but we'll break things down. We dive in with DevOps basics, and this starts as stps with things like embrace automation, version control systems and CI/CD, each explained with a short paragraph. We then touch on Containers and Orchestration, again with a brief para. We're then linked to a couple of 1 hr courses on Docker and Kubernetes, which I assume go over the basics. Step 5 is then Cloud platforms, where she talks about AWS, Azure and Google cloud. We then pivot to our *personal* knowledge - and we look at first leveling up our skills, to second getting some hands on experience with a CI/CD project, and finally Connect and Collaborate with groups and forums that allow you to participate. So, my perspective is that it's a good baseline, but it would have helped to delegate a bit less and explain a bit more in the article. Still, a solid resource.
BottomLine: Solid beginner resource to getting started in DevOps
==
URL reference: https://www.computerweekly.com/feature/Kubernetes-Navigating-the-pitfalls-and-pathways-to-success
DateReviewed: 2025-04-10
Description: This article will try to give us the pitfalls and pathways to having a successful Kubernetes deployment. We'll be getting insights from a CTO who has some experience and wants to impart best and worst practices. After a bit of intro, we get into the meat of the matter. He points out that some went the IaaS route, lifting and shifting, while other went all in with PaaS or SaaS as needed. They do note that going all in makes it more difficult to switch providers (or repatriate a workload). Next we go through pitfalls - the question is how to approach - do you buy a complete solution, start with a solid base and build on top, or build from scratch? They also not that even with containers, it's possible to get locked in with your vendor -- it requires deliberate design to avoid it. He also warns against forgetting day two, meaning doing things like monitoring and updating pieces. They talk about some of the tension between ops and developers, with how they interact with other services. Now we pivot to best practices for K8s - where they list things that their product does.
BottomLine: Decent look at downsides but light on the best practices of Kubernetes
==
URL reference: https://itbrief.com.au/story/kubernetes-security-concerns-rise-among-apac-businesses
DateReviewed: 2025-04-11
Description: Our article looks into security concerns around Kubernetes rising in the APAC region for businesses. The report comes through Tenable cloud research, and the risk report does show concerns. It highlights a high uptake in containers, but draws attention to lack of strong security practices, which can bring risks of breaches, disruptions and unauth access. Like many in the K8s space, APAC region people are struggling to secure things. They mention that 78% of K8s API servers are publicly accessible, which is troubling. Another concern is that 44% are running containers in priv mode, which should be a lot lower. They highlight these, and point to best practices to help stem the tide. Usinc RBAC, CIS K8s benchmarks and NIST guidelines can help to reduce risks. My take is that these are worldwide concerns, and I don't see the data here being APAC specific; but concerns are still valid.
BottomLine: Tackles Kubernetes security issues in APAC area
==
URL reference: https://www.crowdstrike.com/en-us/resources/guides/complete-guide-to-kubernetes-security/
DateReviewed: 2025-04-12
Description: While I thought this was an article about Kubernetes security, it turns out it is a stub to get a download link; and while the book might be awesome, I'm not jumping through hoops here to do a review. So, hoop jumping bad, and no review.
BottomLine: Not an article but a stub to collect info for a link - skip
==
URL reference: https://devpost.com/software/asap-1h45pk
DateReviewed: 2025-04-13
Description: This article goes into something called the ASAP Knowledge Navigator, which is a RAG. RAG stands for Retrieval Augmented Generation, which is a kind of AI focused on answering certain types of questions. They are looking to help with understanding of SEC filings, to pull out actionable info. There are 3 projects - Command line tools to help with SEC filing retrieval, Knowledge navigator that provides the natural language interface, and a log analyzer that helps wwith issues like pod failure. We go through a bit of background for the projects, laying out why this would be helpful. They cite things like automation of data extraction, dealing with complex financial data, and staying up to date with regulatory changes. We then dive into the nitty gritty, and go through a bit of how each piece works together to provide value. We see a sample dashboard screen, and they take us through things like trend anaylsis and anomaoly detection. They go through a bunch of use cases, a short walkthrough, and finally a list of the challenges, learnings and next steps.
BottomLine: Interesting application of AI in Kubernetes to enhance a complex system in the SEC filings of companies
==
URL reference: https://blogs.opsflow.in/advanced-kubernetes-networking-and-management-key-concepts-explained-676f2dd6980f
DateReviewed: 2025-04-14
Description: Our article today dives into various topics in Kubernetes, including networking, container health and DNS. We start with a bit of a background and then dive in to the meat of the matter. It's written as a Q and A article, which is a cool approach. The first question is - what mode of kube-proxy is preferred to use - iptables or IPVS. They give their answer (IPVS), but then explain both options and why they think that is the way to go. Question two is who is responsible for health checks, and that is the Kubelet. They explain the two main types of check, being readiness and liveness probes. Question three is what is an Overlay network, which they say is a virtual net built on top of a real physical network. Lastly, Question four is How do you scale CoreDNS for large deployments, and they list 4 approaches that can help. They tie it up with a short summary. Great piece.
BottomLine: Excellent piece that talks about 4 key areas of Kubernetes and how they work
==
URL reference: https://www.valewood.org/topics/devops/learn/technology/kubernetes/what-is-a-service-mesh/
DateReviewed: 2025-04-15
Description: The article today is going to introduce us to Service Mesh in Kubernetes. We start with a bit of background on the state of Kubernetes before diving in. Our first bit is what is a service mesh - and they define it as an infra layer that manages service to service comms. They tout it as more flexible then HTTP or REST APIs - and even mention TCP/IP, but I question how they do their transport then. They add that features like load balancing and observability are possible with service mesh, among others. They point out the most popular service mesh is Istio. Next up we go through all the details, with a few sentences on each - they cover what we mentioned earlier, and things like service discovery, traffic mgmt, resilience, and security. Next, we dive into how this all works. They explain there is a data plane for the actual traffic, a control plane with several components co-ordinated with an API server, and sidecars that live alongside the app containers and intercept and route all the network traffic. Having covered the basics, they tackle an important question - is service mesh an Inversion of Control - and they argue yes, as it strips comms control from the app containers. This is a good piece if considering using service mesh.
BottomLine: Solid intro to Service Mesh as it is used on a Kubernetes cluster
==
URL reference: https://www.infoq.com/news/2025/02/kube-resource-orchestrator/
DateReviewed: 2025-04-16
Description: Our article today talks about some of the heavyweight providers who are banding together to launch a new open source project called Kube Resource Orchestrator, or kro for short. The aim is to standardize how K8s resources are grouped and deployed. They hope to offer a better approach then current tools like Helm and Kustomize, which seem to be costly and require special knowledge to use effectively. The idea is to encapsulate things only platform engineers need to know inside of kro, and expose only the parts needed for deployments via an API. Basically it aims to abstract the provider-specific stuff, and each of the named providers will provide a piece that talks to their services, allowing a developers to create compute resources withough worrying who the end provider is. They go through some examples and list many resources and videos which seem interesting, and conclude with a link to the repo.
BottomLine: Announcement of project to manage larger-scale Kubernetes resources
==
URL reference: https://dev.to/aws-builders/understanding-the-true-cost-of-ownership-ecs-vs-eks-2l0
DateReviewed: 2025-04-17
Description: This article dives into the true costs of ownership between managed options of ECS and EKS for running a Kubernetes cluster. We start with a bit of background, where they point out that ECS is fully managed, whereas EKS is more flexible but user controlled. They also mention that other comparisons are high level, focused on upper management. They use a real world case to illustrate, where the app was running on ECS as the due to no DevOps engineers so that lightened the running load of the team. The system is a simple ETL, which takes files from S3 to a data lake and does some simple transforms. As things grew, the company adopted DevOps and built a number of other apps as containers. There was friction not to break something that was working, against things like having two systems and having to port features between EKS and ECS. Finally a feature request was needed for the ETL component, and they ran into some weird issues, including spikes in network cost and trouble with pod scheduling. It exposed some networking differences (no private endpoints in ECS) which were part of the cause. They argue that you have to take into account hidden issues when calculating the overall cost of ownership.
BottomLine: Excellent piece on ECS vs EKS cost of ownership for Kubernetes clusters
==
URL reference: https://blog.devops.dev/installing-the-opentelemetry-collector-on-kubernetes-339f02c0e24c
DateReviewed: 2025-04-18
Description: Today's article is more of a hands-on about getting the OpenTelemetry collector working on Kubernetes. We start with a reference to a past article on a similar install, but then focus in on how we can spin this up and what they will use - Official Helm Chart and OpentTelemetry Operator and CRDs. They then run through how to install the Helm version with the backing of Terraform, and also as pure Helm commands with explainations. They then run through a number of OpenTelemetry images and their advantages, giving us details of each one. They even talk about CRDs and Sidecar usage. Pretty comprehensive.
BottomLine: Good solid intro to getting OpenTelemetry installed on Kubernetes
==
URL reference: https://www.infoworld.com/article/3830687/how-ebpf-is-changing-container-networking.html
DateReviewed: 2025-04-19
Description: Our article for today is going to dive into eBPF, and how it can be used in various ways to help with Kubernetes and container type of concerns. We do a small background on how networking usually works in containers, and how eBPF changes that equation, going from virtual networks to deeper control of the network stack. There is a bit of high level chat and motivation, including a couple of quotes, to help us understand why we need this. We then get into a deeper dive of the current network situation. They point out using iptables can be a heavier burden with more containers at play. Certain speedups meant containers needed to run in specific spots, breaking the ability of containers to be flexible and run anywhere. They point out more people are moving to CNI, which does help. We then move onto the eBPF approach, which simplifies things because it works through the kernel, and that is the same no matter how many containers are being run. They talk about why and how this benefits all containers, and what can be done with it. They get a bit into the weeds of speedups at one point, before coming back to talk about projects using eBPF. They talk a bit about tools that use eBPF through CNI, like Cilium and Netkit, and a bit about how they work. They also give coverage to eBPF pitfalls, applying it for observability and security, and talk about it running the game of Life. A pretty good walkthrough!
BottomLine: Decent walkthrough of what eBPF is and how to use it with Kubernetes
==
URL reference: https://kube.fm/i-just-want-mtls-john
DateReviewed: 2025-04-20
Description: So, I thought this was an article, but apparently it's a stub for an episode of a podcast. While that isn't bad, I'm here to review an article and not a podcast, so this stub is a skip.
BottomLine: Just a stub for a podcast so skip
==
URL reference: https://securityonline.info/flaws-in-rancher-cve-2025-23388-cve-2025-23389-expose-kubernetes-environments-to-attacks/
DateReviewed: 2025-04-21
Description: So, this is an article but its behind a paywall, and does not even have a stub or a description on it. Oddly, it is linked in a few places, but none of them have more info than this, and all link back here. So, this is a skip.
BottomLine: Paywalled security article is a skip
==
URL reference: https://openliberty.io/guides/cloud-azure.html#tearing-down-the-environment
DateReviewed: 2025-04-22
Description: Today's article is actually a tutorial on deploying a microservice to Azure. It's actually pretty detailed and looks very good. Things I don't like -- layout. It's laid out with a big chunk of the screen dedicated to what looks like an editor, but greyed out. Somewhere in the body it does unblur it, but I thought this was where we would do the hands-on part -- it turns out you need an Azure account for that. There is a lot of background and pre-reqs, but then they get into the meat. It's detailed, with commands and explainations, where they build up the env and do the deployment. A second file joins our first one later on, before they wrap up by tearing down the env. Looks interesting if you want to get your toes wet with Azure!
BottomLine: Solid looking tutorial to deploy a microservice to Azure Kubernetes
==
URL reference: https://thenewstack.io/managing-kubernetes-at-scale-top-3-lessons-from-the-trenches/
DateReviewed: 2025-04-23
Description: Our article today is on managing Kubernetes with some advice from others that have done it already. Starts out with a great photo and a bit of background, and then dive into the four phases of a platform engineering journey. They talk about the "golden path", where not only are you doing the best practices, but they are the path of least resistance. We now get to the title of the article, and there are three pieces - plan for growth (day 0), validated automation (day 1), and establish op excellence (day 2). 
BottomLine: Simple high level approaches to succeed at managing Kubernetes clusters
==
